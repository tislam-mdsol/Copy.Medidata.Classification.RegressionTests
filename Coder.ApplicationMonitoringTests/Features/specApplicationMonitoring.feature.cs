// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Coder.ApplicationMonitoringTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("This feature shall verify that the Coder system is operational. This is intended " +
        "to be a scheduled task run in Production.")]
    [NUnit.Framework.CategoryAttribute("specApplicationMonitoring.feature")]
    [NUnit.Framework.CategoryAttribute("ApplicationMonitoring")]
    public partial class ThisFeatureShallVerifyThatTheCoderSystemIsOperational_ThisIsIntendedToBeAScheduledTaskRunInProduction_Feature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "specApplicationMonitoring.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "This feature shall verify that the Coder system is operational. This is intended " +
                    "to be a scheduled task run in Production.", "Like Production ETE environments can utilize this feature to determine if propose" +
                    "d Rave changes will affect the test in Production and\r\nto verify the operation s" +
                    "tatus of the lower environment.\r\n\r\nThis feature requires the following test conf" +
                    "iguration settings:\r\n| Config.cs               | Settings.config.dice           " +
                    "          |\r\n| Login                   | configured.regression_test_user_id     " +
                    "  |\r\n| Password                | configured.regression_test_user_password | \r\n| " +
                    "Segment                 | configured.segment                       |\r\n| StudyNam" +
                    "e               | configured.study_name                    |\r\n| ParentDownloadDi" +
                    "rectory | DEFAULT                                  |\r\n| ParentDumpDirectory     " +
                    "| DEFAULT                                  |\r\n\r\nThis feature was designed to exe" +
                    "cute in Production with no database access. No connection settings are included." +
                    "\r\n\r\nPossible Rave configuration settings affecting Coder auto-coding workflow:\r\n" +
                    "| Type                                            |  IsAutoApproval | IsApproval" +
                    "Required |\r\n| AutoApprovalRequired                            |  TRUE           " +
                    "| TRUE               |\r\n| ApprovalRequired                                |  TRU" +
                    "E           | FALSE              |\r\n| AutoApprovalNotRequired (will not auto-app" +
                    "rove) |  FALSE          | TRUE               |\r\n| ApprovalNotRequired           " +
                    "                  |  FALSE          | FALSE              |\r\n\r\nThe scenario steps" +
                    " will dynamically detect the Rave configuration settings and manually approve co" +
                    "ding decisions if required.\r\n\r\nThis scenario uses the RetryPolicy.RaveCoderTrans" +
                    "mission to wait for information during the bidirectional exchanges between Rave " +
                    "and Coder.\r\nThese waits are currently configured to check for the data every 30 " +
                    "seconds for 5 minutes. It is possible that all waits in sequence could\r\nextend t" +
                    "he duration of the test past the next scheduled execution. IncreaseTimeout tag i" +
                    "s set to limit the execution time to 28 minutes.\r\nBase execution time in Assembl" +
                    "yInfo (3 mins) + Increased Timeout (25 mins) = 28 mins.", ProgrammingLanguage.CSharp, new string[] {
                        "specApplicationMonitoring.feature",
                        "ApplicationMonitoring"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The services required to code adverse events added to new subjects shall be runni" +
            "ng and functioning correctly")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2016.1.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_209375_001")]
        [NUnit.Framework.Timeout(1500000)]
        public virtual void TheServicesRequiredToCodeAdverseEventsAddedToNewSubjectsShallBeRunningAndFunctioningCorrectly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The services required to code adverse events added to new subjects shall be runni" +
                    "ng and functioning correctly", new string[] {
                        "VAL",
                        "Release2016.1.0",
                        "PBMCC_209375_001",
                        "IncreaseTimeout_1500000"});
#line 36
this.ScenarioSetup(scenarioInfo);
#line 38
testRunner.Given("Rave Modules App Segment \"<Segment>\" is loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
testRunner.And("a unique adverse event \"CoderAppMon\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
testRunner.When("adding a new manual ID subject \"TST\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 41
testRunner.And("adding a new adverse event \"<AdverseEventText>\" to subject \"<SubjectId>\" of study" +
                    " \"<StudyName>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
testRunner.Then("the audit log for occurrence \"1\" of the adverse event \"<AdverseEventText>\" is upd" +
                    "ated when the term is sent to coder", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 43
testRunner.When("Coder App Segment \"<Segment>\" is loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 44
testRunner.Then("the MEV upload capability is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 45
testRunner.And("the task \"<AdverseEventText>\" should have a status of \"Waiting Manual Code\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
testRunner.Given("the Rave settings used for task \"<AdverseEventText>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 47
testRunner.When("I configure \"Force Primary Path Selection\" to \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 48
testRunner.And("I configure the Synonym Creation Policy Flag to \"Always Active\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 49
testRunner.And("I configure dictionary \"<Dictionary>\" with \"Auto Add Synonyms\" set to \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 50
testRunner.And("I configure dictionary \"<Dictionary>\" with \"Auto Approve\" set to \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Operator",
                        "Attribute",
                        "Text"});
            table1.AddRow(new string[] {
                        "Has",
                        "System Organ Class",
                        "Gastrointestinal disorders"});
            table1.AddRow(new string[] {
                        "Has",
                        "High Level Group Term",
                        "Gastrointestinal signs and symptoms"});
            table1.AddRow(new string[] {
                        "Has",
                        "High Level Term",
                        "Dyspeptic signs and symptoms"});
            table1.AddRow(new string[] {
                        "Has",
                        "Preferred Term",
                        "Dyspepsia"});
#line 51
testRunner.And("task \"<AdverseEventText>\" is coded to term \"Gastroesophageal burning\" at search l" +
                    "evel \"Low Level Term\" with code \"10066998\" at level \"LLT\" and higher level terms" +
                    " with a synonym created", ((string)(null)), table1, "And ");
#line 57
testRunner.Then("the synonym for verbatim \"<AdverseEventText>\" and code \"10066998\" should be activ" +
                    "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 58
testRunner.When("approving task \"<AdverseEventText>\" if required", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 59
testRunner.Then("the coding decision for the task \"<AdverseEventText>\" is approved for term \"Gastr" +
                    "oesophageal burning\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 60
testRunner.And(@"the audit log for occurrence ""1"" of the adverse event ""<AdverseEventText>"" is updated with the term path ""SOC: Gastrointestinal disorders, HLGT: Gastrointestinal signs and symptoms, HLT: Dyspeptic signs and symptoms, PT: Dyspepsia, LLT: Gastroesophageal burning""", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
testRunner.When("adding a new adverse event \"<AdverseEventText>\" to subject \"<SubjectId>\" of study" +
                    " \"<StudyName>\" and the coding decision approved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 62
testRunner.Then(@"the audit log for occurrence ""2"" of the adverse event ""<AdverseEventText>"" is updated with the term path ""SOC: Gastrointestinal disorders, HLGT: Gastrointestinal signs and symptoms, HLT: Dyspeptic signs and symptoms, PT: Dyspepsia, LLT: Gastroesophageal burning""", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
