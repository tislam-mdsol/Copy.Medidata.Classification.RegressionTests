<#@ template language="C#v4.0" debug="True" hostspecific="True" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Configuration" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Data.Common" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="EnvDTE" #>
<#+

	const string ProcSchemaFileName   = "ProcSchema.xml";
	const string TableSchemaFileName  = "TableSchema.xml";
	const string UdtSchemaFileName    = "UdtSchema.xml";
	const string Namespace            = "Coder.DeclarativeBrowser.Db";
	const string ConnectionString     = "Server=ec2-54-227-82-214.compute-1.amazonaws.com;Database=coder_av;uid=developer;pwd=developer";

	const string DatabaseFriendlyName = "Coder";
	
	//This is the name of your database and is used in naming
	//the repository. By default we set it to the connection string name
	const string DatabaseName = "coder_av";

	const string DataModelBaseName = "Coder";

	string[] ReadableTables = new string[]{
	};

	Dictionary<string, string[]> ReadableTablesExcludeColumns = new Dictionary<string, string[]>
	{
		/*
		{ "CodingRequests", new string[] { "XmlContent" } }
		*/
	};

	Dictionary<string, string> ReadableTablesPrimaryKeyOverrides = new Dictionary<string, string>
	{
		/*
		{ "CompletedCodingJobs"     , "CodingElementId"  },
		{ "CodingRequestStatus"     , "CodingRequestId"  },
		{ "CsvCodingJobErrorDetails", "CodingJobErrorId" },
		{ "VolatileCodingRequestLineQueue", "LineNumber" }
		*/
	};

	string[] IncludedProcedures = new string[]
	{
		"spCreateSynonymList",
		"spActivateSynonymListForDictionaryVersionLocaleSegment",
		"spDoProjectRegistration",
		"spSetupDefaultConfiguration",
		"spSetupGranularDefaultConfiguration",
		"spGetUserNameByLogin",
		"spGetDictionaryAndVersions",
		"spGetSourceSystemApplicationData",
		"spGetCurrentCodingElement",
		"spGetSegmentSetupDataByUserName",
		"spDeleteWorkFlowRole",
		"spDeleteGeneralRole",
		"spCreateWorkFlowRole",
		"spGetRolesManagementSetupData",
		"spGetStudyDataByProject",
        "spDeleteDoNotAutoCodeTerms",
        "spInsertDoNotAutoCodeTerms",
		"spSegmentInsert",
		"spConfigurationClone",
		"spRuntimeLockInsert",
		"spRoleInsert",
		"spRoleActionInsert",
		"spRuntimeLockDelete",
		"spUserInsert",
		"spUserObjectRoleInsert",
		"spTrackableObjectInsert",
		"spStudyProjectInsert",
		"spObjectSegmentInsert",
		"spDictionaryLicenceInformationInsert",
		"spWorkflowRoleInsert",
		"spWorkflowRoleActionInsert",
		"spUserObjectWorkflowRoleInsert",
		"spDictionarySegmentConfigurationInsert",
		"spDeleteGeneratedUser",
        "spInsertDoNotAutoCodeTerms",
        "spFakeStudyMigrationFailure",
		"spGetQueryUUIDByCodingElementUUID",
		"spCreationDateAgingByCodingElementUUID",
		"spAgeSynonymCreationDate"
	};

	Dictionary<string, string[]> ProcedureExcludeColumns = new Dictionary<string, string[]>
	{
		//{ "CodingRequests", new string[] { "XmlContent" } }
	};

	string[] ArithAbortProcedures = new string[] 
	{
		//"spStoredProcedureRequiringArithAbortSetting",
	};
#>