// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Coder.EndToEndTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Verify using the search list by entering a value not in the options is fully supp" +
        "orted and the around trip integration works successfully.")]
    public partial class VerifyUsingTheSearchListByEnteringAValueNotInTheOptionsIsFullySupportedAndTheAroundTripIntegrationWorksSuccessfully_Feature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "specENG_SearchListForceEntry.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Verify using the search list by entering a value not in the options is fully supp" +
                    "orted and the around trip integration works successfully.", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A coding decision will be accepted by EDC for a verbatim that has supplemental da" +
            "ta that is not part of the SearchList dropdown values.")]
        [NUnit.Framework.CategoryAttribute("DFT")]
        [NUnit.Framework.CategoryAttribute("PBMCC57210-001b")]
        [NUnit.Framework.CategoryAttribute("ReleaseRave2013.2.0")]
        public virtual void ACodingDecisionWillBeAcceptedByEDCForAVerbatimThatHasSupplementalDataThatIsNotPartOfTheSearchListDropdownValues_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A coding decision will be accepted by EDC for a verbatim that has supplemental da" +
                    "ta that is not part of the SearchList dropdown values.", new string[] {
                        "DFT",
                        "PBMCC57210-001b",
                        "ReleaseRave2013.2.0"});
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("a Rave project registration with dictionary \"WhoDrugDDEB2 ENG 200703\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.And("Rave Modules App Segment is loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Form",
                        "Field",
                        "Dictionary",
                        "Locale",
                        "CodingLevel",
                        "Priority",
                        "IsApprovalRequired",
                        "IsAutoApproval",
                        "SupplementalTerms"});
            table1.AddRow(new string[] {
                        "ETE17",
                        "CoderField17",
                        "<Dictionary>",
                        "<Locale>",
                        "PRODUCTSYNONYM",
                        "1",
                        "true",
                        "true",
                        ""});
#line 9
  testRunner.And("a Rave Coder setup with the following options", ((string)(null)), table1, "And ");
#line 12
 testRunner.When("a Rave Draft is published and pushed using draft \"<Draft>\" for Project \"<StudyNam" +
                    "e>\" to environment \"Prod\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
 testRunner.And("adding a new subject \"TST\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value",
                        "ControlType"});
            table2.AddRow(new string[] {
                        "Specify Search List",
                        "child advil cold extreme",
                        "SearchList"});
#line 14
 testRunner.And("adding a new verbatim term to form \"ETE17\"", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Form",
                        "Field",
                        "SupplementalTerm",
                        "SupplementalValue"});
            table3.AddRow(new string[] {
                        "ETE17",
                        "Specify Search List",
                        "LogSuppField17",
                        "Extra Strength"});
#line 17
 testRunner.And("supplemental term for the following field", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Supplemental Term",
                        "Supplemental Value"});
            table4.AddRow(new string[] {
                        "ETE17.Specify Search List",
                        "Extra Strength"});
#line 20
    testRunner.And("Coder Source Terms contains the following", ((string)(null)), table4, "And ");
#line 23
 testRunner.And("task \"child advil cold extreme\" is coded to term \"CHILDRENS ADVIL COLD\" at search" +
                    " level \"Preferred Name\" with code \"010502 01 015 9\" at level \"PN\" and a synonym " +
                    "is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
 testRunner.Then("Rave Adverse Events form \"ETE17\" should not display \"child advil cold extreme\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source System",
                        "Study",
                        "Dictionary",
                        "Locale",
                        "Term",
                        "Level",
                        "Priority"});
            table5.AddRow(new string[] {
                        "<SourceSystem>",
                        "<SourceSystemStudyDisplayName>",
                        "WhoDrugDDEB2 - 200703",
                        "ENG",
                        "child advil cold extreme",
                        "Trade Name",
                        "1"});
#line 25
 testRunner.And("I verify the following Source Term information is displayed", ((string)(null)), table5, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A coding decision will be accepted by EDC for a verbatim that is not part of the " +
            "SearchList dropdown values.")]
        [NUnit.Framework.CategoryAttribute("DFT")]
        [NUnit.Framework.CategoryAttribute("PBMCC57210-001d")]
        [NUnit.Framework.CategoryAttribute("ReleaseRave2013.2.0")]
        public virtual void ACodingDecisionWillBeAcceptedByEDCForAVerbatimThatIsNotPartOfTheSearchListDropdownValues_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A coding decision will be accepted by EDC for a verbatim that is not part of the " +
                    "SearchList dropdown values.", new string[] {
                        "DFT",
                        "PBMCC57210-001d",
                        "ReleaseRave2013.2.0"});
#line 32
this.ScenarioSetup(scenarioInfo);
#line 33
 testRunner.Given("a Rave project registration with dictionary \"WhoDrugDDEB2 ENG 200703\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 34
 testRunner.And("Rave Modules App Segment is loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Form",
                        "Field",
                        "Dictionary",
                        "Locale",
                        "CodingLevel",
                        "Priority",
                        "IsApprovalRequired",
                        "IsAutoApproval",
                        "SupplementalTerms"});
            table6.AddRow(new string[] {
                        "ETE17",
                        "CoderField17",
                        "<Dictionary>",
                        "<Locale>",
                        "PRODUCTSYNONYM",
                        "1",
                        "true",
                        "true",
                        ""});
#line 35
  testRunner.And("a Rave Coder setup with the following options", ((string)(null)), table6, "And ");
#line 38
 testRunner.When("a Rave Draft is published and pushed using draft \"<Draft>\" for Project \"<StudyNam" +
                    "e>\" to environment \"Prod\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
 testRunner.And("adding a new subject \"TST\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value",
                        "ControlType"});
            table7.AddRow(new string[] {
                        "Specify Search List",
                        "child advil cold extreme",
                        "SearchList"});
#line 40
 testRunner.And("adding a new verbatim term to form \"ETE17\"", ((string)(null)), table7, "And ");
#line 43
 testRunner.And("task \"child advil cold extra\" is coded to term \"CHILDRENS ADVIL COLD\" at search l" +
                    "evel \"Preferred Name\" with code \"010502 01 015 9\" at level \"PN\" and a synonym is" +
                    " created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
 testRunner.Then("Rave Adverse Events form \"ETE17\" should not display \"child advil cold extreme\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source System",
                        "Study",
                        "Dictionary",
                        "Locale",
                        "Term",
                        "Level",
                        "Priority"});
            table8.AddRow(new string[] {
                        "<SourceSystem>",
                        "<SourceSystemStudyDisplayName>",
                        "WhoDrugDDEB2 - 200703",
                        "ENG",
                        "child advil cold extreme",
                        "Trade Name",
                        "1"});
#line 45
 testRunner.And("I verify the following Source Term information is displayed", ((string)(null)), table8, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
