// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Coder.EndToEndTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Configuration download will contain Global Coder settings and Configuration uploa" +
        "d will save Global Coder settings.")]
    public partial class ConfigurationDownloadWillContainGlobalCoderSettingsAndConfigurationUploadWillSaveGlobalCoderSettings_Feature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "specETEMCC42703GlobalConfigurationSettings.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Configuration download will contain Global Coder settings and Configuration uploa" +
                    "d will save Global Coder settings.", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When downloading an configuration spreadsheet for a URL that has Coder active, th" +
            "e Coder settings will be included.")]
        [NUnit.Framework.CategoryAttribute("EndToEndDynamicSegment")]
        [NUnit.Framework.CategoryAttribute("DFT")]
        [NUnit.Framework.CategoryAttribute("PBMCC42703_10")]
        [NUnit.Framework.CategoryAttribute("ETE_STANDALONE")]
        [NUnit.Framework.CategoryAttribute("Release2016.1.0")]
        public virtual void WhenDownloadingAnConfigurationSpreadsheetForAURLThatHasCoderActiveTheCoderSettingsWillBeIncluded_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When downloading an configuration spreadsheet for a URL that has Coder active, th" +
                    "e Coder settings will be included.", new string[] {
                        "EndToEndDynamicSegment",
                        "DFT",
                        "PBMCC42703_10",
                        "ETE_STANDALONE",
                        "Release2016.1.0"});
#line 12
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("a Rave project registration with dictionary \"MedDRA ENG 15.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 15
    testRunner.And("Rave Modules App Segment is loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.When("global Rave-Coder Configuration settings with Review Marking Group are set to \"Da" +
                    "ta Management\" and Requires Response are set to \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
    testRunner.Then("verify Rave Coder Global Configuration download worksheet with Review Marking Gro" +
                    "up \"Data Management\" Requires Response \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 18
 testRunner.When("global Rave-Coder Configuration settings with Review Marking Group are set to \"si" +
                    "te from system\" and Requires Response are set to \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
    testRunner.Then("verify Rave Coder Global Configuration download worksheet with Review Marking Gro" +
                    "up \"site from system\" Requires Response \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
