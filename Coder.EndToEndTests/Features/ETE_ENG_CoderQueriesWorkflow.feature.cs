// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Coder.EndToEndTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("When a Coder query is answered or cancelled, the verbatim will be resent to Coder" +
        ".")]
    public partial class WhenACoderQueryIsAnsweredOrCancelledTheVerbatimWillBeResentToCoder_Feature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ETE_ENG_CoderQueriesWorkflow.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "When a Coder query is answered or cancelled, the verbatim will be resent to Coder" +
                    ".", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify after opening a Query in Coder that the Query is Opened in Rave and an Ans" +
            "wer for that Closed Query makes it to Coder.")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PB9.1.0-001")]
        [NUnit.Framework.CategoryAttribute("Release2016.1.0")]
        public virtual void VerifyAfterOpeningAQueryInCoderThatTheQueryIsOpenedInRaveAndAnAnswerForThatClosedQueryMakesItToCoder_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify after opening a Query in Coder that the Query is Opened in Rave and an Ans" +
                    "wer for that Closed Query makes it to Coder.", new string[] {
                        "VAL",
                        "PB9.1.0-001",
                        "Release2016.1.0"});
#line 8
this.ScenarioSetup(scenarioInfo);
#line 10
testRunner.Given("a Rave project registration with dictionary \"MedDRA 12.0 ENG\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 11
testRunner.And("Rave Modules App Segment is loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Form",
                        "Field",
                        "Dictionary",
                        "Locale",
                        "Coding Level",
                        "Priority",
                        "IsApprovalRequired",
                        "IsAutoApproval"});
            table1.AddRow(new string[] {
                        "ETE1",
                        "Adverese Event 1",
                        "<Dictionary>",
                        "<Locale>",
                        "LLT",
                        "1",
                        "true",
                        "true"});
#line 12
testRunner.And("a Rave Coder setup with the following options", ((string)(null)), table1, "And ");
#line 15
testRunner.When("a Rave Draft is published and pushed using draft \"<Draft>\" for Project \"<SourceSy" +
                    "stemStudyName>\" to environment \"Production\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
testRunner.And("adding a new subject \"TST\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value",
                        "ControlType"});
            table2.AddRow(new string[] {
                        "Coding Field",
                        "sharp pain down leg query",
                        "LongText"});
#line 17
testRunner.And("adding a new verbatim term to form \"ETE1\"", ((string)(null)), table2, "And ");
#line 20
testRunner.And("Coder App Segment is loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
testRunner.And("I open a query for task \"sharp pain down leg query\" with comment \"Opening Query, " +
                    "does this make sense?\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
testRunner.And("a coding task \"sharp pain down leg\" returns to \"Open\" query status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Verbatim Term",
                        "Query Status",
                        "Query Text",
                        "Query Response",
                        "Open To",
                        "Query Notes"});
            table3.AddRow(new string[] {
                        "<SystemUser>",
                        "SHARP PAIN DOWN LEG QUERY",
                        "Open",
                        "Opening Query, does this make sense?",
                        "",
                        "SystemMarkingGroup",
                        ""});
#line 23
testRunner.Then("the query history contains the following information", ((string)(null)), table3, "Then ");
#line 26
testRunner.When("Rave Modules App Segment is loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 27
testRunner.And("the coder query to the Rave form \"ETE1\" field \"Adverese Event 1\" with verbatim te" +
                    "rm \"SHARP PAIN DOWN LEG QUERY\" is responded to with \"Answered Query, yes it make" +
                    "s sense.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
testRunner.And("Coder App Segment is loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
testRunner.And("a coding task \"sharp pain down leg query\" returns to \"closed\" query status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Verbatim Term",
                        "Query Status",
                        "Query Text",
                        "Query Response",
                        "Query Notes"});
            table4.AddRow(new string[] {
                        "<SystemUser>",
                        "sharp pain down leg query",
                        "Closed",
                        "Opening Query, does this make sense?",
                        "Answered Query, yes it makes sense.",
                        ""});
#line 30
testRunner.Then("the query history contains the following information", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify after opening a Query in Coder that the Query is Opened and then Cancelled" +
            " in Rave which updates the Query status in Coder")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PB9.1.0-002")]
        [NUnit.Framework.CategoryAttribute("Release2016.1.0")]
        public virtual void VerifyAfterOpeningAQueryInCoderThatTheQueryIsOpenedAndThenCancelledInRaveWhichUpdatesTheQueryStatusInCoder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify after opening a Query in Coder that the Query is Opened and then Cancelled" +
                    " in Rave which updates the Query status in Coder", new string[] {
                        "VAL",
                        "PB9.1.0-002",
                        "Release2016.1.0"});
#line 39
this.ScenarioSetup(scenarioInfo);
#line 41
testRunner.Given("a Rave project registration with dictionary \"MedDRA 12.0 ENG\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 42
testRunner.And("Rave Modules App Segment is loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Form",
                        "Field",
                        "Dictionary",
                        "Locale",
                        "Coding Level",
                        "Priority",
                        "IsApprovalRequired",
                        "IsAutoApproval"});
            table5.AddRow(new string[] {
                        "ETE1",
                        "Adverese Event 1",
                        "<Dictionary>",
                        "<Locale>",
                        "LLT",
                        "1",
                        "true",
                        "true"});
#line 43
testRunner.And("a Rave Coder setup with the following options", ((string)(null)), table5, "And ");
#line 46
testRunner.When("a Rave Draft is published and pushed using draft \"<Draft>\" for Project \"<SourceSy" +
                    "stemStudyName>\" to environment \"Production\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
testRunner.And("adding a new subject \"TST\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value",
                        "ControlType"});
            table6.AddRow(new string[] {
                        "Coding Field",
                        "sharp pain down leg query",
                        "LongText"});
#line 48
testRunner.And("adding a new verbatim term to form \"ETE1\"", ((string)(null)), table6, "And ");
#line 51
testRunner.And("Coder App Segment is loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
testRunner.And("I open a query for task \"sharp pain down leg query\" with comment \"Opening Query, " +
                    "does this make sense?\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
testRunner.And("a coding task \"sharp pain down leg\" returns to \"Open\" query status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Verbatim Term",
                        "Query Status",
                        "Query Text",
                        "Query Response",
                        "Query Notes"});
            table7.AddRow(new string[] {
                        "<SystemUser>",
                        "SHARP PAIN DOWN LEG QUERY",
                        "Open",
                        "Opening Query, does this make sense?",
                        "",
                        ""});
#line 54
testRunner.Then("the query history contains the following information", ((string)(null)), table7, "Then ");
#line 57
testRunner.When("Rave Modules App Segment is loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 58
testRunner.And("the coder query to the Rave form \"ETE1\" field \"Adverese Event 1\" with verbatim te" +
                    "rm \"SHARP PAIN DOWN LEG QUERY\" is canceled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
testRunner.And("Coder App Segment is loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
testRunner.And("a coding task \"SHARP PAIN DOWN LEG QUERY\" returns to \"Cancelled\" query status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Verbatim Term",
                        "Query Status",
                        "Query Text",
                        "Query Response",
                        "Query Notes"});
            table8.AddRow(new string[] {
                        "<SystemUser>",
                        "SHARP PAIN DOWN LEG QUERY",
                        "Cancelled",
                        "Opening Query, does this make sense?",
                        "",
                        ""});
#line 61
testRunner.Then("the query history contains the following information", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify after opening a Query in Coder that the Query is Opened and then Cancelled" +
            " in Coder which updates the Query status in Rave.")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PB9.1.0-003")]
        [NUnit.Framework.CategoryAttribute("Release2016.1.0")]
        public virtual void VerifyAfterOpeningAQueryInCoderThatTheQueryIsOpenedAndThenCancelledInCoderWhichUpdatesTheQueryStatusInRave_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify after opening a Query in Coder that the Query is Opened and then Cancelled" +
                    " in Coder which updates the Query status in Rave.", new string[] {
                        "VAL",
                        "PB9.1.0-003",
                        "Release2016.1.0"});
#line 70
this.ScenarioSetup(scenarioInfo);
#line 72
testRunner.Given("a Rave project registration with dictionary \"MedDRA 12.0 ENG\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 73
testRunner.And("Rave Modules App Segment is loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Form",
                        "Field",
                        "Dictionary",
                        "Locale",
                        "Coding Level",
                        "Priority",
                        "IsApprovalRequired",
                        "IsAutoApproval"});
            table9.AddRow(new string[] {
                        "ETE1",
                        "Adverese Event 1",
                        "<Dictionary>",
                        "<Locale>",
                        "LLT",
                        "1",
                        "true",
                        "true"});
#line 74
testRunner.And("a Rave Coder setup with the following options", ((string)(null)), table9, "And ");
#line 77
testRunner.When("a Rave Draft is published and pushed using draft \"<Draft>\" for Project \"<SourceSy" +
                    "stemStudyName>\" to environment \"Production\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 78
testRunner.And("adding a new subject \"TST\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value",
                        "ControlType"});
            table10.AddRow(new string[] {
                        "Coding Field",
                        "sharp pain down leg query",
                        "LongText"});
#line 79
testRunner.And("adding a new verbatim term to form \"ETE1\"", ((string)(null)), table10, "And ");
#line 82
testRunner.And("Coder App Segment is loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
testRunner.And("I open a query for task \"sharp pain down leg query\" with comment \"Opening Query, " +
                    "does this make sense?\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
testRunner.And("a coding task \"sharp pain down leg query\" returns to \"Open\" query status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Verbatim Term",
                        "Query Status",
                        "Query Text",
                        "Query Response",
                        "Query Notes"});
            table11.AddRow(new string[] {
                        "<SystemUser>",
                        "sharp pain down leg query",
                        "Open",
                        "Opening Query, does this make sense?",
                        "",
                        ""});
#line 85
testRunner.Then("the query history contains the following information", ((string)(null)), table11, "Then ");
#line 88
testRunner.When("I cancel the query for task \"sharp pain down leg query\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 89
testRunner.And("a coding task \"sharp pain down leg query\" returns to \"Cancelled\" query status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Verbatim Term",
                        "Query Status",
                        "Query Text",
                        "Query Response",
                        "Query Notes"});
            table12.AddRow(new string[] {
                        "<SystemUser>",
                        "sharp pain down leg query",
                        "Cancelled",
                        "Opening Query, does this make sense?",
                        "",
                        ""});
#line 90
testRunner.Then("the query history contains the following information", ((string)(null)), table12, "Then ");
#line 93
testRunner.When("Rave Modules App Segment is loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 94
testRunner.And("the coder query to the Rave form \"ETE1\" field \"Adverese Event 1\" with verbatim te" +
                    "rm \"sharp pain down leg query\" is canceled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify after opening a Query in Coder that the Query is Opened in Rave but then i" +
            "s Closed in Rave when the term has been coded and approved in Coder.")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PB9.1.0-004")]
        [NUnit.Framework.CategoryAttribute("Release2016.1.0")]
        public virtual void VerifyAfterOpeningAQueryInCoderThatTheQueryIsOpenedInRaveButThenIsClosedInRaveWhenTheTermHasBeenCodedAndApprovedInCoder_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify after opening a Query in Coder that the Query is Opened in Rave but then i" +
                    "s Closed in Rave when the term has been coded and approved in Coder.", new string[] {
                        "VAL",
                        "PB9.1.0-004",
                        "Release2016.1.0"});
#line 102
this.ScenarioSetup(scenarioInfo);
#line 104
testRunner.Given("a Rave project registration with dictionary \"MedDRA 12.0 ENG\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 105
testRunner.And("Rave Modules App Segment is loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Form",
                        "Field",
                        "Dictionary",
                        "Locale",
                        "Coding Level",
                        "Priority",
                        "IsApprovalRequired",
                        "IsAutoApproval"});
            table13.AddRow(new string[] {
                        "ETE1",
                        "Adverese Event 1",
                        "<Dictionary>",
                        "<Locale>",
                        "LLT",
                        "1",
                        "true",
                        "true"});
#line 106
testRunner.And("a Rave Coder setup with the following options", ((string)(null)), table13, "And ");
#line 109
testRunner.When("a Rave Draft is published and pushed using draft \"<Draft>\" for Project \"<SourceSy" +
                    "stemStudyName>\" to environment \"Production\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 110
testRunner.And("adding a new subject \"TST\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value",
                        "ControlType"});
            table14.AddRow(new string[] {
                        "Coding Field",
                        "sharp pain down leg query code",
                        "LongText"});
#line 111
testRunner.And("adding a new verbatim term to form \"ETE1\"", ((string)(null)), table14, "And ");
#line 114
testRunner.And("Coder App Segment is loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 115
testRunner.And("I open a query for task \"sharp pain down leg query code\" with comment \"Code this " +
                    "anyway\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 116
testRunner.And("a coding task \"sharp pain down leg\" returns to \"Open\" query status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Verbatim Term",
                        "Query Status",
                        "Query Text",
                        "Query Response",
                        "Query Notes"});
            table15.AddRow(new string[] {
                        "<SystemUser>",
                        "sharp pain down leg query code",
                        "Open",
                        "Code this anyway",
                        "",
                        ""});
#line 117
testRunner.Then("the query history contains the following information", ((string)(null)), table15, "Then ");
#line 120
testRunner.When("task \"sharp pain down leg query code\" is coded to term \"ALEVE\" at search level \"L" +
                    "ow Level Term\" with code \"??????????????\" at level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 121
testRunner.And("approve and reclassify task \"sharp pain down leg query code\" with Include Autocod" +
                    "ed Items set to \"True\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Verbatim Term",
                        "Query Status",
                        "Query Text",
                        "Query Response",
                        "Query Notes"});
            table16.AddRow(new string[] {
                        "<SystemUser>",
                        "sharp pain down leg query code",
                        "Cancelled",
                        "Code this anyway",
                        "",
                        ""});
#line 122
testRunner.Then("the query history contains the following information", ((string)(null)), table16, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
