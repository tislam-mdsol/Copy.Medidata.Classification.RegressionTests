// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Coder.EndToEndTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("When selecting a requires response option for Coder configuration, when a Coder q" +
        "uery is open they will respect the configuration settings. Remove requires manua" +
        "l close and option for Coder configuration")]
    [NUnit.Framework.CategoryAttribute("specETE_ENG_CoderConfigQuerySettings.feature")]
    [NUnit.Framework.CategoryAttribute("EndToEndDynamicSegment")]
    public partial class WhenSelectingARequiresResponseOptionForCoderConfigurationWhenACoderQueryIsOpenTheyWillRespectTheConfigurationSettings_RemoveRequiresManualCloseAndOptionForCoderConfigurationFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ETE_ENG_CoderConfigQuerySettings.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "When selecting a requires response option for Coder configuration, when a Coder q" +
                    "uery is open they will respect the configuration settings. Remove requires manua" +
                    "l close and option for Coder configuration", "", ProgrammingLanguage.CSharp, new string[] {
                        "specETE_ENG_CoderConfigQuerySettings.feature",
                        "EndToEndDynamicSegment"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the requires manual close option is not available on Coder Configuration S" +
            "ettings page and when the requires response option is checked  in Coder Configur" +
            "ation, Coder Configuration will be respected when a Coder query is opened.")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("MCC-207751-005")]
        [NUnit.Framework.CategoryAttribute("Release2016.1.0")]
        public virtual void VerifyTheRequiresManualCloseOptionIsNotAvailableOnCoderConfigurationSettingsPageAndWhenTheRequiresResponseOptionIsCheckedInCoderConfigurationCoderConfigurationWillBeRespectedWhenACoderQueryIsOpened_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the requires manual close option is not available on Coder Configuration S" +
                    "ettings page and when the requires response option is checked  in Coder Configur" +
                    "ation, Coder Configuration will be respected when a Coder query is opened.", new string[] {
                        "VAL",
                        "MCC-207751-005",
                        "Release2016.1.0"});
#line 9
this.ScenarioSetup(scenarioInfo);
#line 11
testRunner.Given("a Rave project registration with dictionary \"WHODRUGB2 200703 ENG\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 12
testRunner.And("Rave Modules App Segment is loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Form",
                        "Field",
                        "Dictionary",
                        "Locale",
                        "Coding Level",
                        "Priority",
                        "IsApprovalRequired",
                        "IsAutoApproval",
                        "SupplementalTerms"});
            table1.AddRow(new string[] {
                        "ETE2",
                        "Coding Field",
                        "<Dictionary>",
                        "",
                        "LLT",
                        "1",
                        "true",
                        "true",
                        "LOGSUPPFIELD2,LOGSUPPFIELD4,LOGCOMPFIELD1,COMPANY,LOGCOMPFIELD3,SOURCE"});
#line 13
testRunner.And("a Rave Coder setup with the following options", ((string)(null)), table1, "And ");
#line 16
testRunner.When("a Rave Draft is published and pushed using draft \"<DraftName>\" for Project \"<Stud" +
                    "yName>\" to environment \"Prod\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
testRunner.And("edit global Rave-Coder Configuration settings with Review Marking Group set to \"S" +
                    "ite from system\" and Requires Response set to \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
testRunner.When("adding a new subject \"TST\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value",
                        "ControlType"});
            table2.AddRow(new string[] {
                        "Coding Field",
                        "Sharp pain down leg",
                        "LongText"});
            table2.AddRow(new string[] {
                        "Log Supplemental Field A",
                        "33",
                        ""});
            table2.AddRow(new string[] {
                        "Std Supplemental Field B",
                        "New Jersey",
                        ""});
            table2.AddRow(new string[] {
                        "Log Supplemental Field A",
                        "United States",
                        ""});
            table2.AddRow(new string[] {
                        "Log Supplemental Field A",
                        "Lost in Translation",
                        ""});
#line 19
testRunner.And("adding a new verbatim term to form \"ETE2\"", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value",
                        "ControlType"});
            table3.AddRow(new string[] {
                        "Coding Field",
                        "Sharp pain down nerves",
                        "LongText"});
            table3.AddRow(new string[] {
                        "Log Supplemental Field A",
                        "22",
                        ""});
            table3.AddRow(new string[] {
                        "Std Supplemental Field B",
                        "New York",
                        ""});
#line 26
testRunner.And("adding a new verbatim term to form \"ETE2\"", ((string)(null)), table3, "And ");
#line 31
testRunner.And("Coder App Segment is loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
testRunner.And("task \"sharp pain down leg\" is coded to term \"ACHES-N-PAIN\" at search level \"Low L" +
                    "evel Term\" with code \"??????????????\" at level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
testRunner.And("reclassifying task \"sharp pain down leg\" with Include Autocoded Items set to \"Tru" +
                    "e\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
testRunner.And("rejecting coding decision for the task \"sharp pain down leg\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
testRunner.And("I open a query for task \"sharp pain down leg\" with comment \"Open query due to bad" +
                    " term\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
testRunner.And("task \"sharp pain in nerves\" is coded to term \"ACHES-N-PAIN\" at search level \"Low " +
                    "Level Term\" with code \"??????????????\" at level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
testRunner.And("Rave Modules App Segment is loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
testRunner.Then("the coder query \"Open query due to bad term\" is available to the Rave form \"ETE1\"" +
                    " field \"Coding Field\" with verbatim term \"Adverse Event 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Code",
                        "Term Path"});
            table4.AddRow(new string[] {
                        "SOC",
                        "10007541",
                        "Cardiac disorders"});
            table4.AddRow(new string[] {
                        "HLGT",
                        "10007521",
                        "Cardiac arrhythmias"});
            table4.AddRow(new string[] {
                        "HLT",
                        "10042600",
                        "Supraventricular arrhythmias"});
            table4.AddRow(new string[] {
                        "PT",
                        "10003658",
                        "Atrial fibrillation"});
            table4.AddRow(new string[] {
                        "LLT",
                        "10003658",
                        "Atrial fibrillation"});
#line 39
testRunner.Then("the coding decision for verbatim \"Headachery\" on form \"ETE2\" for field \"Coding Fi" +
                    "eld\" contains the following data", ((string)(null)), table4, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "data"});
            table5.AddRow(new string[] {
                        "ATC"});
            table5.AddRow(new string[] {
                        "M"});
            table5.AddRow(new string[] {
                        "MUSCULO-SKELETAL SYSTEM"});
            table5.AddRow(new string[] {
                        "M02"});
            table5.AddRow(new string[] {
                        "TOPICAL PRODUCTS FOR JOINT AND MUSCULAR PAIN"});
            table5.AddRow(new string[] {
                        "M02A"});
            table5.AddRow(new string[] {
                        "M02AA"});
            table5.AddRow(new string[] {
                        "ANTIINFL. PREP., NON-STEROIDS FOR TOPICAL USE"});
            table5.AddRow(new string[] {
                        "PRODUCT"});
            table5.AddRow(new string[] {
                        "001092 01 001 4"});
            table5.AddRow(new string[] {
                        "IBUPROFEN"});
            table5.AddRow(new string[] {
                        "PRODUCTSYNONYM"});
            table5.AddRow(new string[] {
                        "001092 01 110 3"});
            table5.AddRow(new string[] {
                        "ACHES-N-PAIN"});
#line 46
testRunner.Then("when I view task \"Sharp pain down leg\" on form \"ETE2\" for \"Subject\" I should see " +
                    "the following data", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify when the requires response option is unchecked in Coder Configuration, Cod" +
            "er Configuration will be respected when a Coder query is opened.")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("MCC-207751-006")]
        [NUnit.Framework.CategoryAttribute("Release2016.1.0")]
        public virtual void VerifyWhenTheRequiresResponseOptionIsUncheckedInCoderConfigurationCoderConfigurationWillBeRespectedWhenACoderQueryIsOpened_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify when the requires response option is unchecked in Coder Configuration, Cod" +
                    "er Configuration will be respected when a Coder query is opened.", new string[] {
                        "VAL",
                        "MCC-207751-006",
                        "Release2016.1.0"});
#line 67
this.ScenarioSetup(scenarioInfo);
#line 68
testRunner.Given("a Rave project registration with dictionary \"WHODRUGB2 200703 ENG\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 69
testRunner.And("Rave Modules App Segment is loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Form",
                        "Field",
                        "Dictionary",
                        "Locale",
                        "Coding Level",
                        "Priority",
                        "IsApprovalRequired",
                        "IsAutoApproval",
                        "SupplementalTerms"});
            table6.AddRow(new string[] {
                        "ETE2",
                        "Coding Field",
                        "<Dictionary>",
                        "",
                        "LLT",
                        "1",
                        "true",
                        "true",
                        "LOGSUPPFIELD2,LOGSUPPFIELD4,LOGCOMPFIELD1,COMPANY,LOGCOMPFIELD3,SOURCE"});
#line 70
testRunner.And("a Rave Coder setup with the following options", ((string)(null)), table6, "And ");
#line 73
testRunner.When("a Rave Draft is published and pushed using draft \"<DraftName>\" for Project \"<Stud" +
                    "yName>\" to environment \"Prod\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 74
testRunner.And("edit global Rave-Coder Configuration settings with Review Marking Group set to \"S" +
                    "ite from system\" and Requires Response set to \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
testRunner.When("adding a new subject \"TST\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value",
                        "ControlType"});
            table7.AddRow(new string[] {
                        "Coding Field",
                        "Sharp pain down leg",
                        "LongText"});
            table7.AddRow(new string[] {
                        "Log Supplemental Field A",
                        "33",
                        ""});
            table7.AddRow(new string[] {
                        "Std Supplemental Field B",
                        "New Jersey",
                        ""});
            table7.AddRow(new string[] {
                        "Log Supplemental Field A",
                        "United States",
                        ""});
            table7.AddRow(new string[] {
                        "Log Supplemental Field A",
                        "Lost in Translation",
                        ""});
#line 76
testRunner.And("adding a new verbatim term to form \"ETE2\"", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value",
                        "ControlType"});
            table8.AddRow(new string[] {
                        "Coding Field",
                        "Sharp pain down nerves",
                        "LongText"});
            table8.AddRow(new string[] {
                        "Log Supplemental Field A",
                        "22",
                        ""});
            table8.AddRow(new string[] {
                        "Std Supplemental Field B",
                        "New York",
                        ""});
#line 83
testRunner.And("adding a new verbatim term to form \"ETE2\"", ((string)(null)), table8, "And ");
#line 88
testRunner.And("Coder App Segment is loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
testRunner.And("task \"sharp pain down leg\" is coded to term \"ACHES-N-PAIN\" at search level \"Low L" +
                    "evel Term\" with code \"??????????????\" at level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 90
testRunner.And("reclassifying task \"sharp pain down leg\" with Include Autocoded Items set to \"Tru" +
                    "e\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 91
testRunner.And("rejecting coding decision for the task \"sharp pain down leg\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 92
testRunner.And("I open a query for task \"sharp pain down leg\" with comment \"Open query due to bad" +
                    " term\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 93
testRunner.And("task \"sharp pain in nerves\" is coded to term \"ACHES-N-PAIN\" at search level \"Low " +
                    "Level Term\" with code \"??????????????\" at level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
testRunner.And("Rave Modules App Segment is loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
testRunner.Then("the coder query \"Open query due to bad term\" is available to the Rave form \"ETE1\"" +
                    " field \"Coding Field\" with verbatim term \"Adverse Event 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Code",
                        "Term Path"});
            table9.AddRow(new string[] {
                        "SOC",
                        "10007541",
                        "Cardiac disorders"});
            table9.AddRow(new string[] {
                        "HLGT",
                        "10007521",
                        "Cardiac arrhythmias"});
            table9.AddRow(new string[] {
                        "HLT",
                        "10042600",
                        "Supraventricular arrhythmias"});
            table9.AddRow(new string[] {
                        "PT",
                        "10003658",
                        "Atrial fibrillation"});
            table9.AddRow(new string[] {
                        "LLT",
                        "10003658",
                        "Atrial fibrillation"});
#line 96
testRunner.Then("the coding decision for verbatim \"Headachery\" on form \"ETE2\" for field \"Coding Fi" +
                    "eld\" contains the following data", ((string)(null)), table9, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "data"});
            table10.AddRow(new string[] {
                        "ATC"});
            table10.AddRow(new string[] {
                        "M"});
            table10.AddRow(new string[] {
                        "MUSCULO-SKELETAL SYSTEM"});
            table10.AddRow(new string[] {
                        "M02"});
            table10.AddRow(new string[] {
                        "TOPICAL PRODUCTS FOR JOINT AND MUSCULAR PAIN"});
            table10.AddRow(new string[] {
                        "M02A"});
            table10.AddRow(new string[] {
                        "M02AA"});
            table10.AddRow(new string[] {
                        "ANTIINFL. PREP., NON-STEROIDS FOR TOPICAL USE"});
            table10.AddRow(new string[] {
                        "PRODUCT"});
            table10.AddRow(new string[] {
                        "001092 01 001 4"});
            table10.AddRow(new string[] {
                        "IBUPROFEN"});
            table10.AddRow(new string[] {
                        "PRODUCTSYNONYM"});
            table10.AddRow(new string[] {
                        "001092 01 110 3"});
            table10.AddRow(new string[] {
                        "ACHES-N-PAIN"});
#line 103
testRunner.Then("when I view task \"Sharp pain down leg\" on form \"ETE2\" for \"Subject\" I should see " +
                    "the following data", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
