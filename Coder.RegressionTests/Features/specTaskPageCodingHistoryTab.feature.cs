// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Coder.RegressionTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("This feature file will verify the Task page\'s history tab section for a verbatim " +
        "term.")]
    [NUnit.Framework.CategoryAttribute("specTaskPageCodingHistoryTab.feature")]
    [NUnit.Framework.CategoryAttribute("CoderCore")]
    public partial class ThisFeatureFileWillVerifyTheTaskPageSHistoryTabSectionForAVerbatimTerm_Feature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "specTaskPageCodingHistoryTab.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "This feature file will verify the Task page\'s history tab section for a verbatim " +
                    "term.", "\r\n_ The following environment configuration settings were enabled:\r\n\r\n Empty Syno" +
                    "nym Lists Registered:\r\n Synonym List 1: MedDRA       (ENG) 11.0   Primary List\r\n" +
                    " Synonym List 2: WhoDrugDDEB2 (ENG) 200703 Primary List\r\n Synonym List 3: WhoDru" +
                    "gDDEC  (ENG) 200703 Primary List\r\n\r\n Common Configurations:\r\nConfiguration Name\t" +
                    "| Force Primary Path Selection (MedDRA) | Synonym Creation Policy Flag | Bypass " +
                    "Reconsider Upon Reclassify | Default Select Threshold | Default Suggest Threshol" +
                    "d | Auto Add Synonyms | Auto Approve | Term Requires Approval (IsApprovalRequire" +
                    "d )  | Term Auto Approve with synonym (IsAutoApproval)   |IsBypassTransmit\t\t|\r\nB" +
                    "asic\t\t\t| TRUE                                  | Always Active                | " +
                    "TRUE                              | 100                      | 70               " +
                    "         | TRUE              | FALSE        | TRUE                              " +
                    "            | TRUE                                              |TRUE\t\t\t\t|\r\nNo A" +
                    "pproval\t\t| TRUE                                  | Always Active                " +
                    "| TRUE                              | 100                      | 70             " +
                    "           | TRUE              | FALSE        | FALSE                           " +
                    "              | TRUE                                              |TRUE\t\t\t\t|\r\nRe" +
                    "consider\t\t| TRUE                                  | Always Active               " +
                    " | FALSE                             | 100                      | 70            " +
                    "            | TRUE              | FALSE        | TRUE                           " +
                    "               | TRUE                                              |TRUE\t\t\t\t|\r\nA" +
                    "pproval\t\t| TRUE                                  | Always Active                " +
                    "| FALSE                             | 100                      | 70             " +
                    "           | FALSE             | FALSE        | TRUE                            " +
                    "              | FALSE                                             |TRUE\t\t\t\t|\r\nCo" +
                    "mpleted Reconsider\t| TRUE                                  | Always Active      " +
                    "          | TRUE                              | 100                      | 70   " +
                    "                     | TRUE              | FALSE        | TRUE                  " +
                    "                        | TRUE                                              |FAL" +
                    "SE\t\t\t\t|", ProgrammingLanguage.CSharp, new string[] {
                        "specTaskPageCodingHistoryTab.feature",
                        "CoderCore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The following will show Coding history of a Waiting Approval task with informatio" +
            "n on User, Action, Status, Verbatim Term, Comment, and TimeStamp")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163324_001")]
        public virtual void TheFollowingWillShowCodingHistoryOfAWaitingApprovalTaskWithInformationOnUserActionStatusVerbatimTermCommentAndTimeStamp()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The following will show Coding history of a Waiting Approval task with informatio" +
                    "n on User, Action, Status, Verbatim Term, Comment, and TimeStamp", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_163324_001"});
#line 23
this.ScenarioSetup(scenarioInfo);
#line 25
  testRunner.Given("a \"Waiting Approval\" Coder setup with no tasks and no synonyms and dictionary \"Me" +
                    "dDRA ENG 11.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 26
  testRunner.And("coding task \"BURN\" for dictionary level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
  testRunner.When("I view task \"BURN\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Action",
                        "Status",
                        "Verbatim Term",
                        "Comment"});
            table1.AddRow(new string[] {
                        "<SystemUser>",
                        "Start Auto Code",
                        "Waiting Approval",
                        "BURN",
                        "Auto coded by direct dictionary match"});
            table1.AddRow(new string[] {
                        "<SystemUser>",
                        "",
                        "Start",
                        "BURN",
                        "Workflow=DEFAULT,WorkflowVariables[IsAutoCode=True,IsApprovalRequired=true,IsAuto" +
                            "Approval=false,IsBypassTransmit=True]"});
#line 28
  testRunner.Then("I verify the following Coding History information is displayed", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The following will show Term Path Coding history of a task with a coding decision" +
            " that is shown expanded")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163324_002")]
        public virtual void TheFollowingWillShowTermPathCodingHistoryOfATaskWithACodingDecisionThatIsShownExpanded()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The following will show Term Path Coding history of a task with a coding decision" +
                    " that is shown expanded", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_163324_002"});
#line 36
this.ScenarioSetup(scenarioInfo);
#line 38
  testRunner.Given("a \"Waiting Approval\" Coder setup with no tasks and no synonyms and dictionary \"Me" +
                    "dDRA ENG 11.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
  testRunner.And("coding task \"BURN\" for dictionary level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
  testRunner.When("I view task \"BURN\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Term Path",
                        "Code"});
            table2.AddRow(new string[] {
                        "SOC",
                        "Injury, poisoning and procedural complications: 10022117",
                        "10022117"});
            table2.AddRow(new string[] {
                        "HLGT",
                        "Injuries by physical agents: 10022119",
                        "10022119"});
            table2.AddRow(new string[] {
                        "HLT",
                        "Thermal burns: 10043418",
                        "10043418"});
            table2.AddRow(new string[] {
                        "PT",
                        "Thermal burn: 10053615",
                        "10053615"});
            table2.AddRow(new string[] {
                        "LLT",
                        "Burn: 10006634",
                        "10006634"});
#line 41
  testRunner.Then("I verify the following Coding history term full path information is displayed in " +
                    "row \"1\"", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The following will show Term Path Coding history of a task with a coding decision" +
            " that is contracted")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163324_003")]
        public virtual void TheFollowingWillShowTermPathCodingHistoryOfATaskWithACodingDecisionThatIsContracted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The following will show Term Path Coding history of a task with a coding decision" +
                    " that is contracted", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_163324_003"});
#line 52
this.ScenarioSetup(scenarioInfo);
#line 54
  testRunner.Given("a \"Waiting Approval\" Coder setup with no tasks and no synonyms and dictionary \"Me" +
                    "dDRA ENG 11.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 55
  testRunner.And("coding task \"BURN\" for dictionary level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
  testRunner.When("I view task \"BURN\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Term Path",
                        "Code"});
            table3.AddRow(new string[] {
                        "LLT",
                        "Burn: 10006634",
                        "10006634"});
#line 57
  testRunner.Then("I verify the following Coding history selected term path information is displayed" +
                    " in row \"1\"", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The following will show Coding history of an Approved and Reconsidered task.")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163324_004")]
        public virtual void TheFollowingWillShowCodingHistoryOfAnApprovedAndReconsideredTask_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The following will show Coding history of an Approved and Reconsidered task.", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_163324_004"});
#line 64
this.ScenarioSetup(scenarioInfo);
#line 66
  testRunner.Given("a \"Waiting Approval\" Coder setup with no tasks and no synonyms and dictionary \"Me" +
                    "dDRA ENG 11.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 67
  testRunner.And("coding task \"BURN\" for dictionary level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
  testRunner.When("approving task \"BURN\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 69
  testRunner.And("reclassifying task \"BURN\" with a comment \"Test Automation Comment\" and Include Au" +
                    "tocoded Items set to \"True\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
  testRunner.And("I view task \"BURN\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Action",
                        "Status",
                        "Verbatim Term",
                        "Comment",
                        "Time Stamp"});
            table4.AddRow(new string[] {
                        "<User>",
                        "Reclassify",
                        "Reconsider",
                        "BURN",
                        "Test Automation Comment",
                        "<TimeStamp>"});
            table4.AddRow(new string[] {
                        "<User>",
                        "Complete Without Transmission",
                        "Completed",
                        "BURN",
                        "Transmission Queue Number:",
                        "<TimeStamp>"});
            table4.AddRow(new string[] {
                        "<User>",
                        "Approve",
                        "Waiting Transmission",
                        "BURN",
                        "",
                        "<TimeStamp>"});
            table4.AddRow(new string[] {
                        "<SystemUser>",
                        "Start Auto Code",
                        "Waiting Approval",
                        "BURN",
                        "Auto coded by direct dictionary match",
                        "<TimeStamp>"});
            table4.AddRow(new string[] {
                        "<SystemUser>",
                        "",
                        "Start",
                        "BURN",
                        "Workflow=DEFAULT,WorkflowVariables[IsAutoCode=True,IsApprovalRequired=true,IsAuto" +
                            "Approval=false,IsBypassTransmit=True]",
                        "<TimeStamp>"});
#line 71
  testRunner.Then("I verify the following Coding History information is displayed", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The following will show Coding history of ReCoded task.")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163324_005")]
        public virtual void TheFollowingWillShowCodingHistoryOfReCodedTask_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The following will show Coding history of ReCoded task.", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_163324_005"});
#line 82
this.ScenarioSetup(scenarioInfo);
#line 83
  testRunner.Given("a \"Waiting Approval\" Coder setup with no tasks and no synonyms and dictionary \"Me" +
                    "dDRA ENG 11.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 84
  testRunner.And("coding task \"BURN\" for dictionary level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
  testRunner.When("I recode task \"BURN\" with comment \"Recode comment.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 86
  testRunner.And("I view task \"BURN\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Action",
                        "Status",
                        "Verbatim Term",
                        "Comment",
                        "Time Stamp"});
            table5.AddRow(new string[] {
                        "<User>",
                        "ReCode",
                        "Waiting Manual Code",
                        "BURN",
                        "Recode comment.",
                        "<TimeStamp>"});
            table5.AddRow(new string[] {
                        "<SystemUser>",
                        "Start Auto Code",
                        "Waiting Approval",
                        "BURN",
                        "Auto coded by direct dictionary match",
                        "<TimeStamp>"});
            table5.AddRow(new string[] {
                        "<SystemUser>",
                        "",
                        "Start",
                        "BURN",
                        "Workflow=DEFAULT,WorkflowVariables[IsAutoCode=True,IsApprovalRequired=true,IsAuto" +
                            "Approval=false,IsBypassTransmit=True]",
                        "<TimeStamp>"});
#line 87
  testRunner.Then("I verify the following Coding History information is displayed", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The following will show Coding history of a term that was completed without trans" +
            "mission, this applies to Manage External Verbatims")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163324_006")]
        public virtual void TheFollowingWillShowCodingHistoryOfATermThatWasCompletedWithoutTransmissionThisAppliesToManageExternalVerbatims()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The following will show Coding history of a term that was completed without trans" +
                    "mission, this applies to Manage External Verbatims", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_163324_006"});
#line 97
this.ScenarioSetup(scenarioInfo);
#line 98
  testRunner.Given("a \"Reconsider\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA E" +
                    "NG 11.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 99
  testRunner.And("coding task \"ANGIO-EDEMA\" for dictionary level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 100
  testRunner.When("reclassifying task \"ANGIO-EDEMA\" with a comment \"Test Automation Comment\" and Inc" +
                    "lude Autocoded Items set to \"True\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 101
  testRunner.And("I view task \"ANGIO-EDEMA\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Action",
                        "Status",
                        "Verbatim Term",
                        "Comment",
                        "Time Stamp"});
            table6.AddRow(new string[] {
                        "<User>",
                        "Reclassify",
                        "Reconsider",
                        "ANGIO-EDEMA",
                        "Test Automation Comment",
                        "<TimeStamp>"});
            table6.AddRow(new string[] {
                        "<SystemUser>",
                        "Complete Without Transmission",
                        "Completed",
                        "ANGIO-EDEMA",
                        "Transmission Queue Number:",
                        "<TimeStamp>"});
            table6.AddRow(new string[] {
                        "<SystemUser>",
                        "Auto Approve Internal",
                        "Waiting Transmission",
                        "ANGIO-EDEMA",
                        "Auto coded by direct dictionary match",
                        "<TimeStamp>"});
            table6.AddRow(new string[] {
                        "<SystemUser>",
                        "Start Auto Code",
                        "Waiting Approval",
                        "ANGIO-EDEMA",
                        "Auto coded by direct dictionary match",
                        "<TimeStamp>"});
            table6.AddRow(new string[] {
                        "<SystemUser>",
                        "",
                        "Start",
                        "ANGIO-EDEMA",
                        "Workflow=DEFAULT,WorkflowVariables[IsAutoCode=True,IsApprovalRequired=true,IsAuto" +
                            "Approval=true,IsBypassTransmit=True]",
                        "<TimeStamp>"});
#line 102
  testRunner.Then("I verify the following Coding History information is displayed", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The following will show Coding history of a term that has been manually coded")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163324_007")]
        public virtual void TheFollowingWillShowCodingHistoryOfATermThatHasBeenManuallyCoded()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The following will show Coding history of a term that has been manually coded", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_163324_007"});
#line 114
this.ScenarioSetup(scenarioInfo);
#line 115
  testRunner.Given("a \"Waiting Approval\" Coder setup with no tasks and no synonyms and dictionary \"Wh" +
                    "oDrugDDEB2 ENG 200703\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 116
  testRunner.And("coding task \"ASPORIZ3\" for dictionary level \"PRODUCT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 117
  testRunner.When("task \"ASPORIZ3\" is coded to term \"ASPIRIN PLUS C\" at search level \"Preferred Name" +
                    "\" with code \"003467 01 001\" at level \"PN\" and a synonym is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 118
  testRunner.And("I view task \"ASPORIZ3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Action",
                        "Status",
                        "Verbatim Term",
                        "Comment",
                        "Time Stamp"});
            table7.AddRow(new string[] {
                        "<User>",
                        "Browse And Code",
                        "Waiting Approval",
                        "ASPORIZ3",
                        "",
                        "<TimeStamp>"});
            table7.AddRow(new string[] {
                        "<SystemUser>",
                        "Start Auto Code",
                        "Waiting Manual Code",
                        "ASPORIZ3",
                        "",
                        "<TimeStamp>"});
            table7.AddRow(new string[] {
                        "<SystemUser>",
                        "",
                        "Start",
                        "ASPORIZ3",
                        "Workflow=DEFAULT,WorkflowVariables[IsAutoCode=True,IsApprovalRequired=true,IsAuto" +
                            "Approval=false,IsBypassTransmit=True]",
                        "<TimeStamp>"});
#line 119
  testRunner.Then("I verify the following Coding History information is displayed", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The following will show Coding history of a term that has been transmitted")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163324_008")]
        public virtual void TheFollowingWillShowCodingHistoryOfATermThatHasBeenTransmitted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The following will show Coding history of a term that has been transmitted", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_163324_008"});
#line 129
this.ScenarioSetup(scenarioInfo);
#line 130
  testRunner.Given("a \"Completed Reconsider\" Coder setup with no tasks and no synonyms and dictionary" +
                    " \"MedDRA ENG 11.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 131
  testRunner.And("coding task \"ANGIONEUROTIC OEDEMA AGGRAVATED\" for dictionary level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 132
  testRunner.When("reclassifying task \"ANGIONEUROTIC OEDEMA AGGRAVATED\" with a comment \"Test Automat" +
                    "ion Comment\" and Include Autocoded Items set to \"True\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 133
  testRunner.And("I view task \"ANGIONEUROTIC OEDEMA AGGRAVATED\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Action",
                        "Status",
                        "Verbatim Term",
                        "Comment",
                        "Time Stamp"});
            table8.AddRow(new string[] {
                        "<User>",
                        "Reclassify",
                        "Waiting Manual Code",
                        "ANGIONEUROTIC OEDEMA AGGRAVATED",
                        "Test Automation Comment",
                        "<TimeStamp>"});
            table8.AddRow(new string[] {
                        "<SystemUser>",
                        "Complete Without Transmission",
                        "Completed",
                        "ANGIONEUROTIC OEDEMA AGGRAVATED",
                        "Transmission Queue Number:",
                        "<TimeStamp>"});
            table8.AddRow(new string[] {
                        "<SystemUser>",
                        "Auto Approve Internal",
                        "Waiting Transmission",
                        "ANGIONEUROTIC OEDEMA AGGRAVATED",
                        "Auto coded by direct dictionary match",
                        "<TimeStamp>"});
            table8.AddRow(new string[] {
                        "<SystemUser>",
                        "Start Auto Code",
                        "Waiting Approval",
                        "ANGIONEUROTIC OEDEMA AGGRAVATED",
                        "Auto coded by direct dictionary match",
                        "<TimeStamp>"});
            table8.AddRow(new string[] {
                        "<SystemUser>",
                        "",
                        "Start",
                        "ANGIONEUROTIC OEDEMA AGGRAVATED",
                        "Workflow=DEFAULT,WorkflowVariables[IsAutoCode=True,IsApprovalRequired=true,IsAuto" +
                            "Approval=true,IsBypassTransmit=True]",
                        "<TimeStamp>"});
#line 134
  testRunner.Then("I verify the following Coding History information is displayed", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The following will show Coding history of a term that has been Auto Approved and " +
            "reclassified with Bypass Reconsider Upon Reclassify turned on")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163324_009")]
        public virtual void TheFollowingWillShowCodingHistoryOfATermThatHasBeenAutoApprovedAndReclassifiedWithBypassReconsiderUponReclassifyTurnedOn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The following will show Coding history of a term that has been Auto Approved and " +
                    "reclassified with Bypass Reconsider Upon Reclassify turned on", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_163324_009"});
#line 145
this.ScenarioSetup(scenarioInfo);
#line 146
  testRunner.Given("a \"No Approval\" Coder setup with no tasks and no synonyms and dictionary \"WhoDrug" +
                    "DDEB2 ENG 200703\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 147
  testRunner.And("coding task \"amethadone\" for dictionary level \"PRODUCT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 148
  testRunner.When("task \"amethadone\" is coded to term \"methadone\" at search level \"Preferred Name\" w" +
                    "ith code \"000689 01 001\" at level \"PN\" and a synonym is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 149
  testRunner.And("reclassifying task \"amethadone\" with a comment \"Test Automation Comment\" and Incl" +
                    "ude Autocoded Items set to \"True\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
  testRunner.And("I view task \"amethadone\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Action",
                        "Status",
                        "Verbatim Term",
                        "Comment",
                        "Time Stamp"});
            table9.AddRow(new string[] {
                        "<User>",
                        "Reclassify",
                        "Waiting Manual Code",
                        "AMETHADONE",
                        "Test Automation Comment",
                        "<TimeStamp>"});
            table9.AddRow(new string[] {
                        "<User>",
                        "Complete Without Transmission",
                        "Completed",
                        "AMETHADONE",
                        "Transmission Queue Number:",
                        "<TimeStamp>"});
            table9.AddRow(new string[] {
                        "<User>",
                        "Browse And Code",
                        "Waiting Transmission",
                        "AMETHADONE",
                        "",
                        "<TimeStamp>"});
            table9.AddRow(new string[] {
                        "<SystemUser>",
                        "Start Auto Code",
                        "Waiting Manual Code",
                        "AMETHADONE",
                        "",
                        "<TimeStamp>"});
            table9.AddRow(new string[] {
                        "<SystemUser>",
                        "",
                        "Start",
                        "AMETHADONE",
                        "Workflow=DEFAULT,WorkflowVariables[IsAutoCode=True,IsApprovalRequired=false,IsAut" +
                            "oApproval=true,IsBypassTransmit=True]",
                        "<TimeStamp>"});
#line 151
  testRunner.Then("I verify the following Coding History information is displayed", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The following will show Coding history of a term that has a status of waiting app" +
            "roval where an option of adding a comment is allowed")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163324_010")]
        public virtual void TheFollowingWillShowCodingHistoryOfATermThatHasAStatusOfWaitingApprovalWhereAnOptionOfAddingACommentIsAllowed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The following will show Coding history of a term that has a status of waiting app" +
                    "roval where an option of adding a comment is allowed", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_163324_010"});
#line 163
this.ScenarioSetup(scenarioInfo);
#line 164
  testRunner.Given("a \"Waiting Approval\" Coder setup with no tasks and no synonyms and dictionary \"Wh" +
                    "oDrugDDEB2 ENG 200703\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 165
  testRunner.And("coding task \"ARMILLARISIN A\" for dictionary level \"PRODUCT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 166
  testRunner.When("a user adds a comment \"Adding a comment!\" for task \"ARMILLARISIN A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Action",
                        "Status",
                        "Verbatim Term",
                        "Comment",
                        "Time Stamp"});
            table10.AddRow(new string[] {
                        "<User>",
                        "Add Comment",
                        "Waiting Approval",
                        "ARMILLARISIN A",
                        "Adding a comment!",
                        "<TimeStamp>"});
#line 167
  testRunner.Then("the Coding History contains following information", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The following will show Coding history of a term that has a status of waiting man" +
            "ual code where an option of adding a comment is allowed")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163324_011")]
        public virtual void TheFollowingWillShowCodingHistoryOfATermThatHasAStatusOfWaitingManualCodeWhereAnOptionOfAddingACommentIsAllowed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The following will show Coding history of a term that has a status of waiting man" +
                    "ual code where an option of adding a comment is allowed", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_163324_011"});
#line 174
this.ScenarioSetup(scenarioInfo);
#line 175
  testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"WhoDrugDDEB2 " +
                    "ENG 200703\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 176
  testRunner.And("coding task \"METH-\" for dictionary level \"PRODUCT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 177
  testRunner.When("a user adds a comment \"Adding a comment!\" for task \"METH-\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Action",
                        "Status",
                        "Verbatim Term",
                        "Comment",
                        "Time Stamp"});
            table11.AddRow(new string[] {
                        "<User>",
                        "Add Comment",
                        "Waiting Manual Code",
                        "METH-",
                        "Adding a comment!",
                        "<TimeStamp>"});
#line 178
  testRunner.Then("the Coding History contains following information", ((string)(null)), table11, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The following will show Coding history of a term that has a status of reconsider " +
            "where an option of adding a comment is allowed")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163324_012")]
        public virtual void TheFollowingWillShowCodingHistoryOfATermThatHasAStatusOfReconsiderWhereAnOptionOfAddingACommentIsAllowed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The following will show Coding history of a term that has a status of reconsider " +
                    "where an option of adding a comment is allowed", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_163324_012"});
#line 185
this.ScenarioSetup(scenarioInfo);
#line 186
  testRunner.Given("a \"Waiting Approval\" Coder setup with no tasks and no synonyms and dictionary \"Wh" +
                    "oDrugDDEB2 ENG 200703\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 187
  testRunner.And("coding task \"ARMILLARISIN A\" for dictionary level \"PRODUCT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 188
  testRunner.And("approve and reclassify task \"ARMILLARISIN A\" with Include Autocoded Items set to " +
                    "\"True\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 189
  testRunner.When("a user adds a comment \"Adding a comment!\" for task \"ARMILLARISIN A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Action",
                        "Status",
                        "Verbatim Term",
                        "Comment",
                        "Time Stamp"});
            table12.AddRow(new string[] {
                        "<User>",
                        "Add Comment",
                        "Reconsider",
                        "ARMILLARISIN A",
                        "Adding a comment!",
                        "<TimeStamp>"});
#line 190
  testRunner.Then("the Coding History contains following information", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
