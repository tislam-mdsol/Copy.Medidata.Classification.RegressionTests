// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Coder.RegressionTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("This feature will demonstrate Coder\'s functionality on uploading a synonym list.")]
    [NUnit.Framework.CategoryAttribute("specSynonymUpload.feature")]
    [NUnit.Framework.CategoryAttribute("CoderCore")]
    public partial class ThisFeatureWillDemonstrateCoderSFunctionalityOnUploadingASynonymList_Feature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SpecSynonymUpload.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "This feature will demonstrate Coder\'s functionality on uploading a synonym list.", "", ProgrammingLanguage.CSharp, new string[] {
                        "specSynonymUpload.feature",
                        "CoderCore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Coder will allow a user to be able to upload a synonym list file.")]
        [NUnit.Framework.CategoryAttribute("VALLongRunningTask")]
        [NUnit.Framework.CategoryAttribute("PBMCC_155558_001")]
        [NUnit.Framework.CategoryAttribute("PBMCC_158325_001")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.Timeout(1800000)]
        public virtual void CoderWillAllowAUserToBeAbleToUploadASynonymListFile_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Coder will allow a user to be able to upload a synonym list file.", new string[] {
                        "VALLongRunningTask",
                        "PBMCC_155558_001",
                        "PBMCC_158325_001",
                        "Release2015.3.0",
                        "IncreaseTimeout_1800000"});
#line 10
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "SynonymListName",
                        "Dictionary",
                        "Version",
                        "Locale"});
            table1.AddRow(new string[] {
                        "Primary_List",
                        "MedDRA",
                        "12.0",
                        "ENG"});
#line 12
 testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionaries", ((string)(null)), table1, "Given ");
#line 15
 testRunner.When("uploading synonym list file \"SynonymUpload_PrimaryList.txt\" to \"MedDRA ENG 12.0 P" +
                    "rimary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("the loading of synonym list file \"SynonymUpload_PrimaryList.txt\" is completed wit" +
                    "hout errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Autocoding will adhere to cross level synonyms created through synonym upload")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_208336_002")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.3")]
        [NUnit.Framework.TestCaseAttribute("WHODrugDDEB2 ENG 201306", "New Drug 92", "PRODUCT", "000764 02 019", "PRODUCTSYNONYM:000764 02 019;PRODUCT:000764 02 001;ATC:J01EC;ATC:J01E;ATC:J01;ATC" +
            ":J", "false", "", "Active", "TN", "SILVER SULFADIAZINE: 000764 02 019", null)]
        [NUnit.Framework.TestCaseAttribute("WHODrugDDEB2 ENG 201306", "New Drug 92", "PRODUCTSYNONYM", "000764 02 001", "PRODUCT:000764 02 001;ATC:J01EC;ATC:J01E;ATC:J01;ATC:J", "false", "", "Active", "PN", "SULFADIAZINE SILVER: 000764 02 001", null)]
        [NUnit.Framework.TestCaseAttribute("MedDRA ENG 15.0", "Adverse 92", "PT", "10009589", "LLT:10009589;PT:10049946;HLT:10041574;HLGT:10005942;SOC:10022117", "true", "", "Active", "LLT", "Closed fracture of second cervical vertebra: 10009589", null)]
        [NUnit.Framework.TestCaseAttribute("MedDRA ENG 15.0", "Adverse 92", "LLT", "10049946", "PT:10049946;HLT:10041574;HLGT:10005942;SOC:10022117", "true", "", "Active", "PT", "Cervical vertebral fracture: 10049946", null)]
        [NUnit.Framework.TestCaseAttribute("JDrug ENG 2015H1", "New Drug 92", "DetailedClass", "131970902", "DrugName:131970902;Category:6;PreferredName:1319709;DetailedClass:1319;LowLevelCl" +
            "ass:131;MidLevelClass:13;HighLevelClass:1", "false", "", "Active", "薬", "CHONDRON: 131970902", null)]
        [NUnit.Framework.TestCaseAttribute("JDrug ENG 2015H1", "New Drug 92", "DrugName", "1319", "DetailedClass:1319;LowLevelClass:131;MidLevelClass:13;HighLevelClass:1", "false", "", "Active", "細", "OTHER AGENTS FOR OPHTHALMIC USE: 1319", null)]
        [NUnit.Framework.TestCaseAttribute("JDrug JPN 2015H1", "New Drug 92", "DetailedClass", "131970902", "DrugName:131970902;Category:6;PreferredName:1319709;DetailedClass:1319;LowLevelCl" +
            "ass:131;MidLevelClass:13;HighLevelClass:1", "false", "", "Active", "薬", "コンドロン: 131970902", null)]
        [NUnit.Framework.TestCaseAttribute("JDrug JPN 2015H1", "New Drug 92", "DrugName", "1319", "DetailedClass:1319;LowLevelClass:131;MidLevelClass:13;HighLevelClass:1", "false", "", "Active", "細", "その他の眼科用剤: 1319", null)]
        public virtual void AutocodingWillAdhereToCrossLevelSynonymsCreatedThroughSynonymUpload(string dictionary, string verbatim, string taskLevel, string code, string path, string primaryFlag, string suppInfo, string status, string termLevel, string termDesc, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "VAL",
                    "PBMCC_208336_002",
                    "Release2015.3.3"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Autocoding will adhere to cross level synonyms created through synonym upload", @__tags);
#line 22
this.ScenarioSetup(scenarioInfo);
#line 24
 testRunner.Given(string.Format("a \"Waiting Approval\" Coder setup with no tasks and no synonyms and dictionary \"{0" +
                        "}\"", dictionary), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim",
                        "Code",
                        "Level",
                        "Path",
                        "Primary Flag",
                        "Supplemental Info",
                        "Status"});
            table2.AddRow(new string[] {
                        string.Format("{0}", verbatim),
                        string.Format("{0}", code),
                        string.Format("{0}", taskLevel),
                        string.Format("{0}", path),
                        string.Format("{0}", primaryFlag),
                        string.Format("{0}", suppInfo),
                        string.Format("{0}", status)});
#line 25
 testRunner.And("a synonym list upload with the following synonyms", ((string)(null)), table2, "And ");
#line 28
 testRunner.And(string.Format("coding task \"{0}\" for dictionary level \"{1}\"", verbatim, taskLevel), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Term Path",
                        "Code"});
            table3.AddRow(new string[] {
                        string.Format("{0}", termLevel),
                        string.Format("{0}", termDesc),
                        string.Format("{0}", code)});
#line 29
 testRunner.Then(string.Format("task \"{0}\" should have the following Coding history selected term path informatio" +
                        "n is displayed in row \"1\"", verbatim), ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
