// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Coder.RegressionTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("This feature will validate the behavior of the coding system when a dictionary se" +
        "arch result is selected")]
    [NUnit.Framework.CategoryAttribute("specDictionaryResultSelection.feature")]
    [NUnit.Framework.CategoryAttribute("CoderCore")]
    public partial class ThisFeatureWillValidateTheBehaviorOfTheCodingSystemWhenADictionarySearchResultIsSelectedFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "specDictionaryResultSelection.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "This feature will validate the behavior of the coding system when a dictionary se" +
                    "arch result is selected", "", ProgrammingLanguage.CSharp, new string[] {
                        "specDictionaryResultSelection.feature",
                        "CoderCore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A single dictionary search result should be associated to distinct synonym verbat" +
            "ims")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_199894_001")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.1")]
        [NUnit.Framework.TestCaseAttribute("MedDRA ENG 15.0", "MedDRA_150_ENG_20.txt", "MedDRA 15.0 English", "Low Level Term", "10009388", "Closed dislocation, fourth cervical vertebra", "LLT", null)]
        [NUnit.Framework.TestCaseAttribute("WHODrugDDEB2 ENG 201206", "WHODrug_201206_ENG_2.txt", "WHODrugDDEB2 201206 English", "Preferred Name", "075350 02 001", "DIFENOXIN HYDROCHLORIDE", "PN", null)]
        [NUnit.Framework.TestCaseAttribute("JDrug ENG 2015H1", "JDrug_2015H1_ENG_2.txt", "JDrug 2015H1 English", "Drug Name", "399100102", "CHONDRON", "薬", null)]
        [NUnit.Framework.TestCaseAttribute("AZDD ENG 15.1", "AZDD_151_ENG_2.txt", "AZDD 15.1 English", "Preferred Name", "001670 01 001", "TYPHOID VACCINE", "PN", null)]
        public virtual void ASingleDictionarySearchResultShouldBeAssociatedToDistinctSynonymVerbatims(string contextDictionary, string synonymFile, string searchDictionary, string searchLevel, string code, string term, string level, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "VAL",
                    "PBMCC_199894_001",
                    "Release2015.3.1"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A single dictionary search result should be associated to distinct synonym verbat" +
                    "ims", @__tags);
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
  testRunner.Given(string.Format("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"{0}\"", contextDictionary), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
  testRunner.And(string.Format("a synonym list file named \"{0}\" is uploaded", synonymFile), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
  testRunner.And(string.Format("I begin a search in dictionary \"{0}\"", searchDictionary), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
  testRunner.And("I select Synonym List \"Primary List\" and Template \"Low to High\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
  testRunner.And(string.Format("I enter \"{0}\" as a \"Code\" search", code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level"});
            table1.AddRow(new string[] {
                        string.Format("{0}", searchLevel)});
#line 14
  testRunner.And("I select the following levels for the search", ((string)(null)), table1, "And ");
#line 17
  testRunner.And("I want only primary path results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
  testRunner.When("I execute the above specified search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
  testRunner.Then(string.Format("the synonyms for term \"{0}\" with code \"{1}\" at level \"{2}\" are distinct", term, code, level), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
