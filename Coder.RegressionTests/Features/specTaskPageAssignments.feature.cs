// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Coder.RegressionTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("This feature file will verify the display history of all coding assignments for t" +
        "he task selected in the Tasks List, including properties for each dictionary lev" +
        "el of an assignment.")]
    [NUnit.Framework.CategoryAttribute("specTaskPageAssignments.feature")]
    [NUnit.Framework.CategoryAttribute("CoderCore")]
    public partial class ThisFeatureFileWillVerifyTheDisplayHistoryOfAllCodingAssignmentsForTheTaskSelectedInTheTasksListIncludingPropertiesForEachDictionaryLevelOfAnAssignment_Feature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "specTaskPageAssignments.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "This feature file will verify the display history of all coding assignments for t" +
                    "he task selected in the Tasks List, including properties for each dictionary lev" +
                    "el of an assignment.", "\r\nThe following environment configuration settings were enabled:\r\n\r\nEmpty Synonym" +
                    " Lists Registered:\r\nSynonym List 1: MedDRA       (ENG) 11.0   Primary List\r\nSyno" +
                    "nym List 2: WhoDrugDDEB2 (ENG) 200703 Primary List\r\nSynonym List 3: WhoDrugDDEC " +
                    " (ENG) 200703 Primary List\r\n\r\nCommon Configurations:\r\nConfiguration Name\t\t| Forc" +
                    "e Primary Path Selection (MedDRA) | Synonym Creation Policy Flag | Bypass Recons" +
                    "ider Upon Reclassify | Default Select Threshold | Default Suggest Threshold | Au" +
                    "to Add Synonyms | Auto Approve | Term Requires Approval (IsApprovalRequired )  |" +
                    " Term Auto Approve with synonym (IsAutoApproval)   |\r\nBasic\t\t\t\t\t| TRUE          " +
                    "                        | Always Active                | TRUE                   " +
                    "           | 100                      | 70                        | TRUE        " +
                    "      | FALSE        | TRUE                                          | TRUE     " +
                    "                                         |\r\nReconsider Bypass On\t| TRUE         " +
                    "                         | Always Active                | TRUE                  " +
                    "            | 100                      | 70                        | TRUE       " +
                    "       | FALSE        | TRUE                                          | TRUE    " +
                    "                                          |\r\nReconsider Bypass Off\t| TRUE       " +
                    "                           | Always Active                | FALSE               " +
                    "              | 100                      | 70                        | TRUE     " +
                    "         | FALSE        | TRUE                                          | TRUE  " +
                    "                                            |\r\nWaiting Approval\t\t| TRUE         " +
                    "                         | Always Active                | FALSE                 " +
                    "            | 100                      | 70                        | FALSE      " +
                    "       | FALSE        | TRUE\t                                         | FALSE   " +
                    "                                          |", ProgrammingLanguage.CSharp, new string[] {
                        "specTaskPageAssignments.feature",
                        "CoderCore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The following will appear for Assignments Properties information for a status of " +
            "Waiting Manual")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163273_001")]
        [NUnit.Framework.CategoryAttribute("SmokeTest")]
        public virtual void TheFollowingWillAppearForAssignmentsPropertiesInformationForAStatusOfWaitingManual()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The following will appear for Assignments Properties information for a status of " +
                    "Waiting Manual", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_163273_001",
                        "SmokeTest"});
#line 23
this.ScenarioSetup(scenarioInfo);
#line 25
  testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 11" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary Level"});
            table1.AddRow(new string[] {
                        "Adverse Event 4",
                        "LLT"});
#line 26
  testRunner.When("the following externally managed verbatim requests are made", ((string)(null)), table1, "When ");
#line 29
  testRunner.When("I view task \"Adverse Event 4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
  testRunner.Then("I verify Assignment Detail information displayed is No data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 31
  testRunner.And("I verify Coding Assignments Path information displayed is No data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The following will appear for Assignments Properties information for a term that " +
            "has been auto coded and waiting approval which will now have an active coding de" +
            "cision")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163273_002")]
        public virtual void TheFollowingWillAppearForAssignmentsPropertiesInformationForATermThatHasBeenAutoCodedAndWaitingApprovalWhichWillNowHaveAnActiveCodingDecision()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The following will appear for Assignments Properties information for a term that " +
                    "has been auto coded and waiting approval which will now have an active coding de" +
                    "cision", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_163273_002"});
#line 36
this.ScenarioSetup(scenarioInfo);
#line 38
  testRunner.Given("a \"Waiting Approval\" Coder setup with no tasks and no synonyms and dictionary \"Wh" +
                    "oDrugDDEB2 ENG 200703\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary Level"});
            table2.AddRow(new string[] {
                        "ASPIRIN PLUS C",
                        "PRODUCT"});
#line 39
  testRunner.When("the following externally managed verbatim requests are made", ((string)(null)), table2, "When ");
#line 42
  testRunner.When("I view task \"ASPIRIN PLUS C\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Dictionary",
                        "User",
                        "Term",
                        "Is Auto Coded",
                        "Is Active"});
            table3.AddRow(new string[] {
                        "WhoDrugDDEB2 - 200703",
                        "<SystemUser>",
                        "003467 01 001: ASPIRIN PLUS C",
                        "Checked",
                        "Checked"});
#line 43
  testRunner.Then("I verify the following Assignment Detail information is displayed", ((string)(null)), table3, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Code",
                        "Term"});
            table4.AddRow(new string[] {
                        "ATC",
                        "N",
                        "NERVOUS SYSTEM"});
            table4.AddRow(new string[] {
                        "ATC",
                        "N02",
                        "ANALGESICS"});
            table4.AddRow(new string[] {
                        "ATC",
                        "N02B",
                        "OTHER ANALGESICS AND ANTIPYRETICS"});
            table4.AddRow(new string[] {
                        "ATC",
                        "N02BA",
                        "SALICYLIC ACID AND DERIVATIVES"});
            table4.AddRow(new string[] {
                        "PRODUCT",
                        "003467 01 001",
                        "ASPIRIN PLUS C"});
#line 46
  testRunner.And("I verify the following Coding Assignments Path information is displayed", ((string)(null)), table4, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The following will appear for Assignments Properties information for a term waiti" +
            "ng for coding through browser tree")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163273_003")]
        public virtual void TheFollowingWillAppearForAssignmentsPropertiesInformationForATermWaitingForCodingThroughBrowserTree()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The following will appear for Assignments Properties information for a term waiti" +
                    "ng for coding through browser tree", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_163273_003"});
#line 57
this.ScenarioSetup(scenarioInfo);
#line 59
  testRunner.Given("a \"Waiting Approval\" Coder setup with no tasks and no synonyms and dictionary \"Wh" +
                    "oDrugDDEB2 ENG 200703\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary Level"});
            table5.AddRow(new string[] {
                        "Adverse Event 4",
                        "PRODUCT"});
#line 60
  testRunner.When("the following externally managed verbatim requests are made", ((string)(null)), table5, "When ");
#line 63
  testRunner.When("task \"Adverse Event 4\" is coded to term \"ASPIRIN PLUS C\" at search level \"Preferr" +
                    "ed Name\" with code \"003467 01 001\" at level \"PN\" and a synonym is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 64
  testRunner.And("I view task \"Adverse Event 4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Dictionary",
                        "User",
                        "Term",
                        "Is Auto Coded",
                        "Is Active"});
            table6.AddRow(new string[] {
                        "WhoDrugDDEB2 - 200703",
                        "<User>",
                        "003467 01 001: ASPIRIN PLUS C",
                        "Unchecked",
                        "Checked"});
#line 65
  testRunner.Then("I verify the following Assignment Detail information is displayed", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The following will appear for Assignments Properties information for a term that " +
            "was auto coded and was inactivated after selecting to recode the coding decision" +
            "")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163273_004")]
        public virtual void TheFollowingWillAppearForAssignmentsPropertiesInformationForATermThatWasAutoCodedAndWasInactivatedAfterSelectingToRecodeTheCodingDecision()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The following will appear for Assignments Properties information for a term that " +
                    "was auto coded and was inactivated after selecting to recode the coding decision" +
                    "", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_163273_004"});
#line 72
this.ScenarioSetup(scenarioInfo);
#line 74
  testRunner.Given("a \"Waiting Approval\" Coder setup with no tasks and no synonyms and dictionary \"Wh" +
                    "oDrugDDEB2 ENG 200703\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary Level"});
            table7.AddRow(new string[] {
                        "SALICYLAMIDE",
                        "PRODUCT"});
#line 75
  testRunner.When("the following externally managed verbatim requests are made", ((string)(null)), table7, "When ");
#line 78
  testRunner.When("I recode task \"SALICYLAMIDE\" with comment \"Recoding.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Dictionary",
                        "User",
                        "Term",
                        "Is Auto Coded",
                        "Is Active"});
            table8.AddRow(new string[] {
                        "WhoDrugDDEB2 - 200703",
                        "<SystemUser>",
                        "000965 01 001: SALICYLAMIDE",
                        "Checked",
                        "Unchecked"});
#line 79
  testRunner.Then("I verify the following Assignment Detail information is displayed", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The following information will be available to the client as an Assignment Proper" +
            "ty information for a status of Reconsider with Bypass Reconsider Upon Reclassify" +
            " turned off")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163273_005")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void TheFollowingInformationWillBeAvailableToTheClientAsAnAssignmentPropertyInformationForAStatusOfReconsiderWithBypassReconsiderUponReclassifyTurnedOff()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The following information will be available to the client as an Assignment Proper" +
                    "ty information for a status of Reconsider with Bypass Reconsider Upon Reclassify" +
                    " turned off", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_163273_005",
                        "IncreaseTimeout"});
#line 87
this.ScenarioSetup(scenarioInfo);
#line 89
  testRunner.Given("a \"Reconsider Bypass Off\" Coder setup with no tasks and no synonyms and dictionar" +
                    "y \"MedDRA ENG 11.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary Level"});
            table9.AddRow(new string[] {
                        "Dizziness postural",
                        "LLT"});
#line 90
  testRunner.When("the following externally managed verbatim requests are made", ((string)(null)), table9, "When ");
#line 93
  testRunner.When("reclassifying task \"Dizziness postural\" with comment \"Regression testing\" in a \"R" +
                    "econsider Bypass Off\" coder setup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 94
  testRunner.And("task \"Dizziness postural\" is coded to term \"Dizzy on standing\" at search level \"L" +
                    "ow Level Term\" with code \"10013581\" at level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
  testRunner.And("I view task \"Dizziness postural\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Dictionary",
                        "User",
                        "Term",
                        "Is Auto Coded",
                        "Is Active"});
            table10.AddRow(new string[] {
                        "MedDRA - 11.0",
                        "<User>",
                        "10013581: Dizzy on standing",
                        "Unchecked",
                        "Checked"});
            table10.AddRow(new string[] {
                        "MedDRA - 11.0",
                        "<SystemUser>",
                        "10013578: Dizziness postural",
                        "Checked",
                        "Unchecked"});
#line 96
  testRunner.Then("I verify the following Assignment Detail information is displayed", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The following information will be available to the client as an Assignment Proper" +
            "ty information for a status of Reconsider with Bypass Reconsider Upon Reclassify" +
            " turned on")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163273_006")]
        public virtual void TheFollowingInformationWillBeAvailableToTheClientAsAnAssignmentPropertyInformationForAStatusOfReconsiderWithBypassReconsiderUponReclassifyTurnedOn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The following information will be available to the client as an Assignment Proper" +
                    "ty information for a status of Reconsider with Bypass Reconsider Upon Reclassify" +
                    " turned on", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_163273_006"});
#line 105
this.ScenarioSetup(scenarioInfo);
#line 107
  testRunner.Given("a \"Reconsider Bypass On\" Coder setup with no tasks and no synonyms and dictionary" +
                    " \"MedDRA ENG 11.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary Level"});
            table11.AddRow(new string[] {
                        "Dizziness postural",
                        "LLT"});
#line 108
  testRunner.When("the following externally managed verbatim requests are made", ((string)(null)), table11, "When ");
#line 111
  testRunner.When("reclassifying task \"Dizziness postural\" with comment \"Regression testing\" in a \"R" +
                    "econsider Bypass On\" coder setup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 112
  testRunner.And("I view task \"Dizziness postural\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Dictionary",
                        "User",
                        "Term",
                        "Is Auto Coded",
                        "Is Active"});
            table12.AddRow(new string[] {
                        "MedDRA - 11.0",
                        "<SystemUser>",
                        "10013578: Dizziness postural",
                        "Checked",
                        "Unchecked"});
#line 113
  testRunner.Then("I verify the following Assignment Detail information is displayed", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
