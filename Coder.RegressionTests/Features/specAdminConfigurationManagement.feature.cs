// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Coder.RegressionTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ConfigurationsManagement is for verifying the different configurations models use" +
        "d for Coder testing scenarios are working as expected.  The following is a list " +
        "of current configuration models used for Coder testing")]
    [NUnit.Framework.CategoryAttribute("specAdminConfigurationManagement.feature")]
    [NUnit.Framework.CategoryAttribute("CoderCore")]
    public partial class ConfigurationsManagementIsForVerifyingTheDifferentConfigurationsModelsUsedForCoderTestingScenariosAreWorkingAsExpected_TheFollowingIsAListOfCurrentConfigurationModelsUsedForCoderTestingFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "specAdminConfigurationManagement.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ConfigurationsManagement is for verifying the different configurations models use" +
                    "d for Coder testing scenarios are working as expected.  The following is a list " +
                    "of current configuration models used for Coder testing", @"
Configuration Name  | Force Primary Path Selection (MedDRA) | Synonym Creation Policy Flag | Bypass Reconsider Upon Reclassify | Default Select Threshold | Default Suggest Threshold | Auto Add Synonyms | Auto Approve | Term Requires Approval (IsApprovalRequired )  | Term Auto Approve with synonym (IsAutoApproval)
 Basic          | TRUE                                  | Always Active                   | TRUE                              | 100                      | 70                        | TRUE              | FALSE        | TRUE                                          | TRUE  |          
 No Approval    | TRUE                                  | Always Active                   | TRUE                              | 100                      | 70                        | TRUE              | FALSE        | FALSE                                         | TRUE  |
 Reconsider     | TRUE                                  | Always Active                   | FALSE                             | 100                      | 70                        | TRUE              | FALSE        | TRUE                                          | TRUE  |
 Approval       | TRUE                                  | Always Active                   | FALSE                             | 100                      | 70                        | FALSE             | FALSE        | TRUE                                          | FALSE |", ProgrammingLanguage.CSharp, new string[] {
                        "specAdminConfigurationManagement.feature",
                        "CoderCore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Coder Configuration allows user to set Coder configuration values for a Basic" +
            " Coder setup")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_166013_01")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void TheCoderConfigurationAllowsUserToSetCoderConfigurationValuesForABasicCoderSetup()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Coder Configuration allows user to set Coder configuration values for a Basic" +
                    " Coder setup", new string[] {
                        "VAL",
                        "PBMCC_166013_01",
                        "Release2015.3.0"});
#line 16
this.ScenarioSetup(scenarioInfo);
#line 18
 testRunner.Given("Coder Configurations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 19
 testRunner.When("setting up a \"Basic\" configuration for \"MedDRA\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Force Primary Path Selection",
                        "Synonym Creation Policy Flag",
                        "Bypass Reconsider Upon Reclassify",
                        "Auto Add Synonyms",
                        "Auto Approve"});
            table1.AddRow(new string[] {
                        "True",
                        "Always Active",
                        "True",
                        "True",
                        "False"});
#line 20
 testRunner.Then("the following Coder Configuration should exist", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Coder Configuration allows user to set Coder configuration values for a No Ap" +
            "proval Coder setup")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_166013_02")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void TheCoderConfigurationAllowsUserToSetCoderConfigurationValuesForANoApprovalCoderSetup()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Coder Configuration allows user to set Coder configuration values for a No Ap" +
                    "proval Coder setup", new string[] {
                        "VAL",
                        "PBMCC_166013_02",
                        "Release2015.3.0"});
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
 testRunner.Given("Coder Configurations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 30
 testRunner.When("setting up a \"No Approval\" configuration for \"WhoDrugDDEB2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Force Primary Path Selection",
                        "Synonym Creation Policy Flag",
                        "Bypass Reconsider Upon Reclassify",
                        "Auto Add Synonyms",
                        "Auto Approve"});
            table2.AddRow(new string[] {
                        "True",
                        "Always Active",
                        "True",
                        "True",
                        "False"});
#line 31
 testRunner.Then("the following Coder Configuration should exist", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Coder Configuration allows user to set Coder configuration values for a Recon" +
            "sider Coder setup")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_166013_03")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void TheCoderConfigurationAllowsUserToSetCoderConfigurationValuesForAReconsiderCoderSetup()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Coder Configuration allows user to set Coder configuration values for a Recon" +
                    "sider Coder setup", new string[] {
                        "VAL",
                        "PBMCC_166013_03",
                        "Release2015.3.0"});
#line 39
this.ScenarioSetup(scenarioInfo);
#line 40
 testRunner.Given("Coder Configurations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 41
 testRunner.When("setting up a \"Reconsider\" configuration for \"J-Drug\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Force Primary Path Selection",
                        "Synonym Creation Policy Flag",
                        "Bypass Reconsider Upon Reclassify",
                        "Auto Add Synonyms",
                        "Auto Approve"});
            table3.AddRow(new string[] {
                        "True",
                        "Always Active",
                        "False",
                        "True",
                        "False"});
#line 42
 testRunner.Then("the following Coder Configuration should exist", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Coder Configuration allows user to set Coder configuration values an Approval" +
            " Coder setup")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_166013_04")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void TheCoderConfigurationAllowsUserToSetCoderConfigurationValuesAnApprovalCoderSetup()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Coder Configuration allows user to set Coder configuration values an Approval" +
                    " Coder setup", new string[] {
                        "VAL",
                        "PBMCC_166013_04",
                        "Release2015.3.0"});
#line 50
this.ScenarioSetup(scenarioInfo);
#line 51
 testRunner.Given("Coder Configurations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 52
 testRunner.When("setting up a \"Approval\" configuration for \"AZDD\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Force Primary Path Selection",
                        "Synonym Creation Policy Flag",
                        "Bypass Reconsider Upon Reclassify",
                        "Auto Add Synonyms",
                        "Auto Approve"});
            table4.AddRow(new string[] {
                        "True",
                        "Always Active",
                        "False",
                        "False",
                        "False"});
#line 53
 testRunner.Then("the following Coder Configuration should exist", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
