// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Coder.RegressionTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("This feature will verify that Coder will display and manipulate tasks in the Task" +
        " Table.")]
    [NUnit.Framework.CategoryAttribute("specTaskPageTasksTable.feature")]
    [NUnit.Framework.CategoryAttribute("CoderCore")]
    public partial class ThisFeatureWillVerifyThatCoderWillDisplayAndManipulateTasksInTheTaskTable_Feature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "specTaskPageTasksTable.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "This feature will verify that Coder will display and manipulate tasks in the Task" +
                    " Table.", "This feature file uses data in CSV files located in DynamicCSVReports and the ODM" +
                    "FileBuilder to \r\nload multiple tasks to two studies, each with a different dicti" +
                    "onary.\r\n\r\n_ The following Task attributes are needed to be available to the clie" +
                    "nt in order to obtain information about a term:\r\n\r\nTask Attributes \r\n___________" +
                    "____________________ \r\nVerbatim Term\r\nPriority\r\nStatus\r\nAssigned Term\r\nDictionar" +
                    "y\r\nQueries           \r\nSegment                             \r\n\r\nVerbatim Term: (S" +
                    "et in CSV) The verbatim text.\r\nPriority: (Set in CSV) [1_255] Priority is define" +
                    "d in Rave and can represent a \"true\" priority or can be a way to subset source d" +
                    "ata types. Priority is defined on the form level. For example, all Rave Adverse " +
                    "Events (AE) forms can be set to Priority 2, Rave Conmeds Priority 3, and Rave Me" +
                    "dical History Terms Priority 4. You can also have all AEs, Conmeds, and Medical " +
                    "History Terms for one study set to Priority 1, and all AEs, Conmeds, and Medical" +
                    " History Terms for another study set to Priority 2. This number displays in the " +
                    "Task page in Coder for any verbatim term entered in this form. For example, if A" +
                    "E form =1, and the verbatim term \"headache\" is entered in this form, this number" +
                    " displays in the Task page for this verbatim term. Tip: The Priority field can b" +
                    "e used to search for a form in Coder. This is a good way to determine what form " +
                    "the data is from. Make sure you are consistent with your numbering.\r\nStatus: The" +
                    " status of the coding operation; for example, Waiting Approval.\r\nAssigned Term: " +
                    "The text of the coded term. This will only appear to non-approver users if the t" +
                    "ask has been reclassified and is Waiting Manual Code. \r\nDictionary: (Set in CSV)" +
                    " The dictionary assigned to the segment.\r\nQueries:\tStatus of the query: Queued, " +
                    "Open, Answered, Closed, or Canceled\r\nSegment: (Set in CSV) This refers to the cl" +
                    "ient division/segment that contains coding data from a collection of studies; a " +
                    "Segment can be equated to an iMedidata Study Group which contains these studies." +
                    "\r\n\r\n_ Reference the coding help information residing in:\r\n https://learn.mdsol.c" +
                    "om/display/CODERstg/Viewing+Coder+Transaction+Details+While+Coding?lang=en\r\n\r\n\r\n" +
                    "_ The following environment configuration settings were enabled:\r\n\r\n Empty Synon" +
                    "ym Lists Registered:\r\n Synonym List 1: MedDRA              (ENG) 15.0     Primar" +
                    "y List\r\n Synonym List 2: WhoDrugDDEB2        (ENG) 201503   Primary List\r\n Synon" +
                    "ym List 3: MedDRA              (ENG) 14.0     Empty_List\r\n Synonym List 4: MedDR" +
                    "A              (ENG) 15.0     New_Primary_List\r\n\r\n Common Configurations:\r\n Conf" +
                    "iguration Name       | Declarative Browser Class | \r\n Basic                    |" +
                    " BasicSetup                | \r\n Waiting Approval         | WaitingApprovalSetup " +
                    "     |", ProgrammingLanguage.CSharp, new string[] {
                        "specTaskPageTasksTable.feature",
                        "CoderCore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("SORT The task table shall sort in descending order by verbatim term when the verb" +
            "atim term column header is clicked")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_191152_001")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void SORTTheTaskTableShallSortInDescendingOrderByVerbatimTermWhenTheVerbatimTermColumnHeaderIsClicked()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SORT The task table shall sort in descending order by verbatim term when the verb" +
                    "atim term column header is clicked", new string[] {
                        "VAL",
                        "PBMCC_191152_001",
                        "Release2015.3.0"});
#line 47
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "SynonymListName",
                        "Dictionary",
                        "Version",
                        "Locale"});
            table1.AddRow(new string[] {
                        "Primary List",
                        "MedDRA",
                        "15.0",
                        "ENG"});
            table1.AddRow(new string[] {
                        "Primary List",
                        "WhoDrugDDEB2",
                        "201503",
                        "ENG"});
#line 49
  testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionaries", ((string)(null)), table1, "Given ");
#line 53
  testRunner.And("coding tasks from CSV file \"Tasks_30_MultiStudy_MultiSup_MultiDict.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
  testRunner.When("I sort the tasks by \"Verbatim Term\" \"descending\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 55
  testRunner.Then("the tasks will be sorted by \"Verbatim Term\" \"descending\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("SORT The task table shall sort in ascending order by verbatim term when the verba" +
            "tim term column header is clicked")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_191152_002")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void SORTTheTaskTableShallSortInAscendingOrderByVerbatimTermWhenTheVerbatimTermColumnHeaderIsClicked()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SORT The task table shall sort in ascending order by verbatim term when the verba" +
                    "tim term column header is clicked", new string[] {
                        "VAL",
                        "PBMCC_191152_002",
                        "Release2015.3.0"});
#line 60
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "SynonymListName",
                        "Dictionary",
                        "Version",
                        "Locale"});
            table2.AddRow(new string[] {
                        "Primary List",
                        "MedDRA",
                        "15.0",
                        "ENG"});
            table2.AddRow(new string[] {
                        "Primary List",
                        "WhoDrugDDEB2",
                        "201503",
                        "ENG"});
#line 62
  testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionaries", ((string)(null)), table2, "Given ");
#line 66
  testRunner.And("coding tasks from CSV file \"Tasks_30_MultiStudy_MultiSup_MultiDict.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
  testRunner.When("I sort the tasks by \"Verbatim Term\" \"ascending\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 68
  testRunner.Then("the tasks will be sorted by \"Verbatim Term\" \"ascending\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("SORT The task table shall sort in descending order by assigned term when the assi" +
            "gned term column header is clicked")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_191152_003")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.Timeout(300000)]
        public virtual void SORTTheTaskTableShallSortInDescendingOrderByAssignedTermWhenTheAssignedTermColumnHeaderIsClicked()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SORT The task table shall sort in descending order by assigned term when the assi" +
                    "gned term column header is clicked", new string[] {
                        "VAL",
                        "PBMCC_191152_003",
                        "Release2015.3.0",
                        "IncreaseTimeout_300000"});
#line 74
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "SynonymListName",
                        "Dictionary",
                        "Version",
                        "Locale"});
            table3.AddRow(new string[] {
                        "Primary List",
                        "MedDRA",
                        "15.0",
                        "ENG"});
            table3.AddRow(new string[] {
                        "Primary List",
                        "WhoDrugDDEB2",
                        "201503",
                        "ENG"});
#line 76
  testRunner.Given("a \"Waiting Approval\" Coder setup with no tasks and no synonyms and dictionaries", ((string)(null)), table3, "Given ");
#line 80
  testRunner.And("coding tasks from CSV file \"Tasks_30_MultiStudy_MultiSup_MultiDict.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
  testRunner.When("task \"ECHO\" is coded to term \"Echo virus infection NOS\" at search level \"Low Leve" +
                    "l Term\" with code \"10014112\" at level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 82
  testRunner.And("task \"GULF\" is coded to term \"Gulf war syndrome\" at search level \"Low Level Term\"" +
                    " with code \"10056557\" at level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
  testRunner.And("task \"SIERRA\" is coded to term \"Feeling of residual sleepiness\" at search level \"" +
                    "Low Level Term\" with code \"10016353\" at level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
  testRunner.And("reclassifying task \"ECHO\" with a comment \"Reclassify ECHO to populate Assigned Te" +
                    "rm column.\" and Include Autocoded Items set to \"True\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
  testRunner.And("reclassifying task \"GULF\" with a comment \"Reclassify GULF to populate Assigned Te" +
                    "rm column.\" and Include Autocoded Items set to \"True\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
  testRunner.And("reclassifying task \"SIERRA\" with a comment \"Reclassify SIERRA to populate Assigne" +
                    "d Term column.\" and Include Autocoded Items set to \"True\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
  testRunner.And("all task filters are cleared", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
  testRunner.And("I sort the tasks by \"Assigned Term\" \"descending\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
  testRunner.Then("the tasks will be sorted by \"Assigned Term\" \"descending\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("SORT The task table shall sort in ascending order by assigned term when the assig" +
            "ned term column header is clicked")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_191152_004")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.Timeout(300000)]
        public virtual void SORTTheTaskTableShallSortInAscendingOrderByAssignedTermWhenTheAssignedTermColumnHeaderIsClicked()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SORT The task table shall sort in ascending order by assigned term when the assig" +
                    "ned term column header is clicked", new string[] {
                        "VAL",
                        "PBMCC_191152_004",
                        "Release2015.3.0",
                        "IncreaseTimeout_300000"});
#line 95
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "SynonymListName",
                        "Dictionary",
                        "Version",
                        "Locale"});
            table4.AddRow(new string[] {
                        "Primary List",
                        "MedDRA",
                        "15.0",
                        "ENG"});
            table4.AddRow(new string[] {
                        "Primary List",
                        "WhoDrugDDEB2",
                        "201503",
                        "ENG"});
#line 97
  testRunner.Given("a \"Waiting Approval\" Coder setup with no tasks and no synonyms and dictionaries", ((string)(null)), table4, "Given ");
#line 101
  testRunner.And("coding tasks from CSV file \"Tasks_30_MultiStudy_MultiSup_MultiDict.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 102
  testRunner.When("task \"ECHO\" is coded to term \"Echo virus infection NOS\" at search level \"Low Leve" +
                    "l Term\" with code \"10014112\" at level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 103
  testRunner.And("task \"GULF\" is coded to term \"Gulf war syndrome\" at search level \"Low Level Term\"" +
                    " with code \"10056557\" at level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 104
  testRunner.And("task \"SIERRA\" is coded to term \"Feeling of residual sleepiness\" at search level \"" +
                    "Low Level Term\" with code \"10016353\" at level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 105
  testRunner.And("reclassifying task \"ECHO\" with a comment \"Reclassify ECHO to populate Assigned Te" +
                    "rm column.\" and Include Autocoded Items set to \"True\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 106
  testRunner.And("reclassifying task \"GULF\" with a comment \"Reclassify GULF to populate Assigned Te" +
                    "rm column.\" and Include Autocoded Items set to \"True\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 107
  testRunner.And("reclassifying task \"SIERRA\" with a comment \"Reclassify SIERRA to populate Assigne" +
                    "d Term column.\" and Include Autocoded Items set to \"True\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 108
  testRunner.And("all task filters are cleared", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 109
  testRunner.And("I sort the tasks by \"Assigned Term\" \"ascending\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 110
  testRunner.Then("the tasks will be sorted by \"Assigned Term\" \"ascending\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("FILTER The task table shall show all actionable tasks when Task View is selected " +
            "as the filter criteria")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_191152_005")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void FILTERTheTaskTableShallShowAllActionableTasksWhenTaskViewIsSelectedAsTheFilterCriteria()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("FILTER The task table shall show all actionable tasks when Task View is selected " +
                    "as the filter criteria", new string[] {
                        "VAL",
                        "PBMCC_191152_005",
                        "Release2015.3.0"});
#line 115
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "SynonymListName",
                        "Dictionary",
                        "Version",
                        "Locale"});
            table5.AddRow(new string[] {
                        "Primary List",
                        "MedDRA",
                        "15.0",
                        "ENG"});
            table5.AddRow(new string[] {
                        "Primary List",
                        "WhoDrugDDEB2",
                        "201503",
                        "ENG"});
#line 117
  testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionaries", ((string)(null)), table5, "Given ");
#line 121
  testRunner.And("coding tasks from CSV file \"Tasks_30_MultiStudy_MultiSup_MultiDict.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Filter Name",
                        "Filter Criteria"});
            table6.AddRow(new string[] {
                        "Trackables",
                        "Task View (actionable)"});
#line 122
  testRunner.When("I limit the displayed tasks by", ((string)(null)), table6, "When ");
#line 125
  testRunner.Then("Only tasks with \"Status\" of \"Waiting Manual Code\" will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 126
  testRunner.And("The task count is \"30\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("FILTER The task table shall show no actionable tasks when In Workflow is selected" +
            " as the filter criteria")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_191152_006")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void FILTERTheTaskTableShallShowNoActionableTasksWhenInWorkflowIsSelectedAsTheFilterCriteria()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("FILTER The task table shall show no actionable tasks when In Workflow is selected" +
                    " as the filter criteria", new string[] {
                        "VAL",
                        "PBMCC_191152_006",
                        "Release2015.3.0"});
#line 131
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "SynonymListName",
                        "Dictionary",
                        "Version",
                        "Locale"});
            table7.AddRow(new string[] {
                        "Primary List",
                        "MedDRA",
                        "15.0",
                        "ENG"});
            table7.AddRow(new string[] {
                        "Primary List",
                        "WhoDrugDDEB2",
                        "201503",
                        "ENG"});
#line 133
  testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionaries", ((string)(null)), table7, "Given ");
#line 137
  testRunner.And("coding tasks from CSV file \"Tasks_30_MultiStudy_MultiSup_MultiDict.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Filter Name",
                        "Filter Criteria"});
            table8.AddRow(new string[] {
                        "Trackables",
                        "In Workflow (non-actionable)"});
#line 138
  testRunner.When("I limit the displayed tasks by", ((string)(null)), table8, "When ");
#line 141
  testRunner.Then("The task count is \"0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("FILTER The task table shall show only the tasks associated with the Dev study whe" +
            "n selected as the filter criteria")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_191152_007")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void FILTERTheTaskTableShallShowOnlyTheTasksAssociatedWithTheDevStudyWhenSelectedAsTheFilterCriteria()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("FILTER The task table shall show only the tasks associated with the Dev study whe" +
                    "n selected as the filter criteria", new string[] {
                        "VAL",
                        "PBMCC_191152_007",
                        "Release2015.3.0"});
#line 146
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "SynonymListName",
                        "Dictionary",
                        "Version",
                        "Locale"});
            table9.AddRow(new string[] {
                        "Primary List",
                        "MedDRA",
                        "15.0",
                        "ENG"});
            table9.AddRow(new string[] {
                        "Primary List",
                        "WhoDrugDDEB2",
                        "201503",
                        "ENG"});
#line 148
  testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionaries", ((string)(null)), table9, "Given ");
#line 152
  testRunner.And("coding tasks from CSV file \"Tasks_30_MultiStudy_MultiSup_MultiDict.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Filter Name",
                        "Filter Criteria"});
            table10.AddRow(new string[] {
                        "Studies",
                        "Dev"});
#line 153
  testRunner.When("I limit the displayed tasks by", ((string)(null)), table10, "When ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column Name",
                        "Filter Criteria"});
            table11.AddRow(new string[] {
                        "Priority",
                        "2"});
            table11.AddRow(new string[] {
                        "Dictionary",
                        "WhoDrugDDEB2 - 201503 - Primary List"});
#line 156
  testRunner.Then("the tasks will be filtered by", ((string)(null)), table11, "Then ");
#line 160
  testRunner.And("The task count is \"11\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("FILTER The task table shall show only the tasks in Study Migration when selected " +
            "as the filter criteria")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_191152_008")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.Timeout(3000000)]
        public virtual void FILTERTheTaskTableShallShowOnlyTheTasksInStudyMigrationWhenSelectedAsTheFilterCriteria()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("FILTER The task table shall show only the tasks in Study Migration when selected " +
                    "as the filter criteria", new string[] {
                        "VAL",
                        "PBMCC_191152_008",
                        "Release2015.3.0",
                        "IncreaseTimeout_3000000"});
#line 166
this.ScenarioSetup(scenarioInfo);
#line 168
  testRunner.Given("a \"Basic\" Coder setup with registered synonym list \"MedDRA ENG 14.0 Empty_List\" c" +
                    "ontaining entry \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 169
  testRunner.And("an activated synonym list \"MedDRA ENG 15.0 New_Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 170
  testRunner.And("coding tasks from CSV file \"Tasks_1000_MedDRA_Match_Upload.csv\" and auto-coding i" +
                    "n progress", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Filter Name",
                        "Filter Criteria"});
            table12.AddRow(new string[] {
                        "Trackables",
                        "In Study Migration (non-actionable)"});
#line 171
  testRunner.When("I limit the displayed tasks by", ((string)(null)), table12, "When ");
#line 174
  testRunner.Then("The task count is \"0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 175
  testRunner.When("performing study migration without waiting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 176
  testRunner.Then("The task count is not \"0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("FILTER The task table shall show only the tasks in the Workflow when selected as " +
            "the filter criteria")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_191152_009")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.Timeout(300000)]
        public virtual void FILTERTheTaskTableShallShowOnlyTheTasksInTheWorkflowWhenSelectedAsTheFilterCriteria()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("FILTER The task table shall show only the tasks in the Workflow when selected as " +
                    "the filter criteria", new string[] {
                        "VAL",
                        "PBMCC_191152_009",
                        "Release2015.3.0",
                        "IncreaseTimeout_300000"});
#line 182
this.ScenarioSetup(scenarioInfo);
#line 184
  testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"WhoDrugDDEB2 " +
                    "ENG 201503\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 185
  testRunner.And("coding tasks from CSV file \"Tasks_1500_SingleStudy_NoSup_SingleDict.csv\" and auto" +
                    "-coding in progress", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 186
  testRunner.When("The system \"In Workflow (non-actionable)\" count is at least \"1\" percent of all ta" +
                    "sks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Filter Name",
                        "Filter Criteria"});
            table13.AddRow(new string[] {
                        "Trackables",
                        "In Workflow (non-actionable)"});
#line 187
  testRunner.And("I limit the displayed tasks by", ((string)(null)), table13, "And ");
#line 190
  testRunner.Then("The task count is not \"0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 191
  testRunner.And("Only tasks with \"Status\" of \"Start\" will be displayed and the queue will empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("FILTER The task table shall show only the tasks not in the Workflow when selected" +
            " as the filter criteria")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_191152_010")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.Timeout(300000)]
        public virtual void FILTERTheTaskTableShallShowOnlyTheTasksNotInTheWorkflowWhenSelectedAsTheFilterCriteria()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("FILTER The task table shall show only the tasks not in the Workflow when selected" +
                    " as the filter criteria", new string[] {
                        "VAL",
                        "PBMCC_191152_010",
                        "Release2015.3.0",
                        "IncreaseTimeout_300000"});
#line 197
this.ScenarioSetup(scenarioInfo);
#line 199
  testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"WhoDrugDDEB2 " +
                    "ENG 201503\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 200
  testRunner.And("coding tasks from CSV file \"Tasks_1500_SingleStudy_NoSup_SingleDict.csv\" and auto" +
                    "-coding in progress", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 201
  testRunner.When("The system \"Not In Workflow (non-actionable)\" count is at least \"1\" percent of al" +
                    "l tasks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Filter Name",
                        "Filter Criteria"});
            table14.AddRow(new string[] {
                        "Trackables",
                        "Not In Workflow (non-actionable)"});
#line 202
  testRunner.And("I limit the displayed tasks by", ((string)(null)), table14, "And ");
#line 205
  testRunner.Then("The task count is not \"0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 206
  testRunner.And("Only tasks with \"Status\" of \"Start\" will be displayed and the queue will empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("FILTER HEADER The task table shall filter by priority")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_191152_011")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void FILTERHEADERTheTaskTableShallFilterByPriority()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("FILTER HEADER The task table shall filter by priority", new string[] {
                        "VAL",
                        "PBMCC_191152_011",
                        "Release2015.3.0"});
#line 211
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "SynonymListName",
                        "Dictionary",
                        "Version",
                        "Locale"});
            table15.AddRow(new string[] {
                        "Primary List",
                        "MedDRA",
                        "15.0",
                        "ENG"});
            table15.AddRow(new string[] {
                        "Primary List",
                        "WhoDrugDDEB2",
                        "201503",
                        "ENG"});
#line 213
  testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionaries", ((string)(null)), table15, "Given ");
#line 217
  testRunner.And("coding tasks from CSV file \"Tasks_30_MultiStudy_MultiSup_MultiDict.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 218
  testRunner.When("I filter for tasks with \"Priority\" of \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 219
  testRunner.Then("Only tasks with \"Priority\" of \"2\" will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("FILTER HEADER The task table shall filter by status")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_191152_012")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.Timeout(300000)]
        public virtual void FILTERHEADERTheTaskTableShallFilterByStatus()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("FILTER HEADER The task table shall filter by status", new string[] {
                        "VAL",
                        "PBMCC_191152_012",
                        "Release2015.3.0",
                        "IncreaseTimeout_300000"});
#line 225
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "SynonymListName",
                        "Dictionary",
                        "Version",
                        "Locale"});
            table16.AddRow(new string[] {
                        "Primary List",
                        "MedDRA",
                        "15.0",
                        "ENG"});
            table16.AddRow(new string[] {
                        "Primary List",
                        "WhoDrugDDEB2",
                        "201503",
                        "ENG"});
#line 227
  testRunner.Given("a \"Waiting Approval\" Coder setup with no tasks and no synonyms and dictionaries", ((string)(null)), table16, "Given ");
#line 231
  testRunner.And("coding tasks from CSV file \"Tasks_30_MultiStudy_MultiSup_MultiDict.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 232
  testRunner.When("task \"ECHO\" is coded to term \"Echo virus infection NOS\" at search level \"Low Leve" +
                    "l Term\" with code \"10014112\" at level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 233
  testRunner.And("task \"GULF\" is coded to term \"Gulf war syndrome\" at search level \"Low Level Term\"" +
                    " with code \"10056557\" at level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 234
  testRunner.And("task \"SIERRA\" is coded to term \"Feeling of residual sleepiness\" at search level \"" +
                    "Low Level Term\" with code \"10016353\" at level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 235
  testRunner.And("reclassifying task \"ECHO\" with a comment \"Reclassify ECHO to populate Assigned Te" +
                    "rm column.\" and Include Autocoded Items set to \"True\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 236
  testRunner.And("reclassifying task \"GULF\" with a comment \"Reclassify GULF to populate Assigned Te" +
                    "rm column.\" and Include Autocoded Items set to \"True\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 237
  testRunner.And("reclassifying task \"SIERRA\" with a comment \"Reclassify SIERRA to populate Assigne" +
                    "d Term column.\" and Include Autocoded Items set to \"True\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 238
  testRunner.And("all task filters are cleared", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 239
  testRunner.And("I filter for tasks with \"Status\" of \"Reconsider\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 240
  testRunner.Then("Only tasks with \"Status\" of \"Reconsider\" will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("FILTER HEADER The task table shall filter by Dictionary MedDRA")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_191152_013")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void FILTERHEADERTheTaskTableShallFilterByDictionaryMedDRA()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("FILTER HEADER The task table shall filter by Dictionary MedDRA", new string[] {
                        "VAL",
                        "PBMCC_191152_013",
                        "Release2015.3.0"});
#line 245
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "SynonymListName",
                        "Dictionary",
                        "Version",
                        "Locale"});
            table17.AddRow(new string[] {
                        "Primary List",
                        "MedDRA",
                        "15.0",
                        "ENG"});
            table17.AddRow(new string[] {
                        "Primary List",
                        "WhoDrugDDEB2",
                        "201503",
                        "ENG"});
#line 247
  testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionaries", ((string)(null)), table17, "Given ");
#line 251
  testRunner.And("coding tasks from CSV file \"Tasks_30_MultiStudy_MultiSup_MultiDict.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 252
  testRunner.When("I filter for tasks with \"Dictionary\" of \"MedDRA - 15.0 - Primary List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 253
  testRunner.Then("Only tasks with \"Dictionary\" of \"MedDRA - 15.0 - Primary List\" will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("FILTER HEADER The task table shall filter by Dictionary WhoDrugDDEB2")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_191152_014")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void FILTERHEADERTheTaskTableShallFilterByDictionaryWhoDrugDDEB2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("FILTER HEADER The task table shall filter by Dictionary WhoDrugDDEB2", new string[] {
                        "VAL",
                        "PBMCC_191152_014",
                        "Release2015.3.0"});
#line 259
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "SynonymListName",
                        "Dictionary",
                        "Version",
                        "Locale"});
            table18.AddRow(new string[] {
                        "Primary List",
                        "MedDRA",
                        "15.0",
                        "ENG"});
            table18.AddRow(new string[] {
                        "Primary List",
                        "WhoDrugDDEB2",
                        "201503",
                        "ENG"});
#line 261
  testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionaries", ((string)(null)), table18, "Given ");
#line 265
  testRunner.And("coding tasks from CSV file \"Tasks_30_MultiStudy_MultiSup_MultiDict.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 266
  testRunner.When("I filter for tasks with \"Dictionary\" of \"WhoDrugDDEB2 - 201503 - Primary List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 267
  testRunner.Then("Only tasks with \"Dictionary\" of \"WhoDrugDDEB2 - 201503 - Primary List\" will be di" +
                    "splayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("FILTER HEADER The task table shall filter by Queries")]
        [NUnit.Framework.IgnoreAttribute()]
        [NUnit.Framework.CategoryAttribute("DFT")]
        [NUnit.Framework.CategoryAttribute("PBMCC_191152_015")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.Timeout(300000)]
        public virtual void FILTERHEADERTheTaskTableShallFilterByQueries()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("FILTER HEADER The task table shall filter by Queries", new string[] {
                        "DFT",
                        "PBMCC_191152_015",
                        "Release2015.3.0",
                        "IncreaseTimeout_300000",
                        "ignore"});
#line 275
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "SynonymListName",
                        "Dictionary",
                        "Version",
                        "Locale"});
            table19.AddRow(new string[] {
                        "Primary List",
                        "MedDRA",
                        "15.0",
                        "ENG"});
            table19.AddRow(new string[] {
                        "Primary List",
                        "WhoDrugDDEB2",
                        "201503",
                        "ENG"});
#line 277
  testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionaries", ((string)(null)), table19, "Given ");
#line 281
  testRunner.And("coding tasks from CSV file \"Tasks_30_MultiStudy_MultiSup_MultiDict.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 282
  testRunner.When("I open a query for task \"CHARLIE\" with comment \"Query Sort Test Alpha\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 283
  testRunner.And("I open a query for task \"HOTEL\" with comment \"Query Sort Test Alpha\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 284
  testRunner.And("I open a query for task \"YANKEE\" with comment \"Query Sort Test Alpha\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 285
  testRunner.And("I open a query for task \"DELTA\" with comment \"Query Sort Test Alpha\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 286
  testRunner.And("I open a query for task \"ALPHA AMBER\" with comment \"Query Sort Test Bravo\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 287
  testRunner.And("I open a query for task \"SIERRA\" with comment \"Query Sort Test Bravo\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 288
  testRunner.And("all task filters are cleared", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 289
  testRunner.And("I filter for tasks with \"Queries\" of \"Queued\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 290
  testRunner.Then("Only tasks with \"Queries\" of \"Queued\" will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("FILTER HEADER The task table shall filter by Time Elapsed")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_159410_001")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.Timeout(300000)]
        public virtual void FILTERHEADERTheTaskTableShallFilterByTimeElapsed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("FILTER HEADER The task table shall filter by Time Elapsed", new string[] {
                        "VAL",
                        "PBMCC_159410_001",
                        "Release2015.3.0",
                        "IncreaseTimeout_300000"});
#line 296
this.ScenarioSetup(scenarioInfo);
#line 298
  testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 299
  testRunner.And("coding tasks \"ALPHA, BRAVO, CHARLIE, DELTA, ECHO, FOXTROT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 300
  testRunner.When("the time elapsed since task \"BRAVO\" was created is \"0\" days and \"15\" hours", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 301
  testRunner.And("the time elapsed since task \"CHARLIE\" was created is \"1\" days and \"1\" hours", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 302
  testRunner.And("the time elapsed since task \"DELTA\" was created is \"3\" days and \"0\" hours", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 303
  testRunner.And("the time elapsed since task \"ECHO\" was created is \"7\" days and \"0\" hours", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 304
  testRunner.And("I filter for tasks with \"Time Elapsed\" of \"0.5 days\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 305
  testRunner.Then("Only tasks with \"Time Elapsed\" of \"0.5 days\" will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 306
  testRunner.When("I filter for tasks with \"Time Elapsed\" of \"0.5 to 1 day\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 307
  testRunner.Then("Only tasks with \"Time Elapsed\" of \"0.5 to 1 day\" will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 308
  testRunner.When("I filter for tasks with \"Time Elapsed\" of \"1 to 2 days\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 309
  testRunner.Then("Only tasks with \"Time Elapsed\" of \"1 to 2 days\" will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 310
  testRunner.When("I filter for tasks with \"Time Elapsed\" of \"2 to 5 days\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 311
  testRunner.Then("Only tasks with \"Time Elapsed\" of \"2 to 5 days\" will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 312
  testRunner.When("I filter for tasks with \"Time Elapsed\" of \"5 days or greater\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 313
  testRunner.Then("Only tasks with \"Time Elapsed\" of \"5 days or greater\" will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 314
  testRunner.When("I filter for tasks with \"Time Elapsed\" of \"All\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Time Elapsed"});
            table20.AddRow(new string[] {
                        "ALPHA",
                        "0.5 days"});
            table20.AddRow(new string[] {
                        "BRAVO",
                        "0.5 to 1 day"});
            table20.AddRow(new string[] {
                        "CHARLIE",
                        "1 to 2 days"});
            table20.AddRow(new string[] {
                        "DELTA",
                        "2 to 5 days"});
            table20.AddRow(new string[] {
                        "ECHO",
                        "5 days or greater"});
            table20.AddRow(new string[] {
                        "FOXTROT",
                        "0.5 days"});
#line 315
  testRunner.Then("the coding task table has the following ordered information", ((string)(null)), table20, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("FILTER HEADER The Group shall display the filtered count when grouped verbatims a" +
            "re filtered by priority")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_159410_002")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void FILTERHEADERTheGroupShallDisplayTheFilteredCountWhenGroupedVerbatimsAreFilteredByPriority()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("FILTER HEADER The Group shall display the filtered count when grouped verbatims a" +
                    "re filtered by priority", new string[] {
                        "VAL",
                        "PBMCC_159410_002",
                        "Release2015.3.0"});
#line 327
this.ScenarioSetup(scenarioInfo);
#line 329
  testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 330
  testRunner.And("coding tasks from CSV file \"Tasks_21_GroupedVerbatimsOfVaryingPriority.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 331
  testRunner.When("I filter for tasks with \"Priority\" of \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Group",
                        "Priority"});
            table21.AddRow(new string[] {
                        "ALPHA",
                        "2 of 6",
                        "1"});
            table21.AddRow(new string[] {
                        "BRAVO",
                        "2 of 5",
                        "1"});
            table21.AddRow(new string[] {
                        "CHARLIE",
                        "2 of 4",
                        "1"});
            table21.AddRow(new string[] {
                        "DELTA",
                        "1 of 3",
                        "1"});
            table21.AddRow(new string[] {
                        "FOXTROT",
                        "1",
                        "1"});
#line 332
  testRunner.Then("the coding task table has the following ordered information", ((string)(null)), table21, "Then ");
#line 339
  testRunner.And("the group view of the coding task table for task \"ALPHA\" differentiates the tasks" +
                    " with \"Priority\" of \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The task table shall filter when sorted")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_191152_016")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void TheTaskTableShallFilterWhenSorted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The task table shall filter when sorted", new string[] {
                        "VAL",
                        "PBMCC_191152_016",
                        "Release2015.3.0"});
#line 344
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "SynonymListName",
                        "Dictionary",
                        "Version",
                        "Locale"});
            table22.AddRow(new string[] {
                        "Primary List",
                        "MedDRA",
                        "15.0",
                        "ENG"});
            table22.AddRow(new string[] {
                        "Primary List",
                        "WhoDrugDDEB2",
                        "201503",
                        "ENG"});
#line 346
  testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionaries", ((string)(null)), table22, "Given ");
#line 350
  testRunner.And("coding tasks from CSV file \"Tasks_30_MultiStudy_MultiSup_MultiDict.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 351
  testRunner.When("I sort the tasks by \"Verbatim Term\" \"descending\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column Name",
                        "Filter Criteria"});
            table23.AddRow(new string[] {
                        "Priority",
                        "2"});
            table23.AddRow(new string[] {
                        "Status",
                        "Waiting Manual Code"});
            table23.AddRow(new string[] {
                        "Dictionary",
                        "All"});
            table23.AddRow(new string[] {
                        "Queries",
                        "All"});
            table23.AddRow(new string[] {
                        "Time Elapsed",
                        "0.5 days"});
#line 352
  testRunner.And("I filter the tasks by", ((string)(null)), table23, "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column Name",
                        "Filter Criteria"});
            table24.AddRow(new string[] {
                        "Priority",
                        "2"});
            table24.AddRow(new string[] {
                        "Status",
                        "Waiting Manual Code"});
            table24.AddRow(new string[] {
                        "Time Elapsed",
                        "0.5 days"});
#line 359
  testRunner.Then("the tasks will be filtered by", ((string)(null)), table24, "Then ");
#line 364
  testRunner.And("the tasks will be sorted by \"Verbatim Term\" \"descending\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The task table shall sort when a filter is applied")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_191152_017")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void TheTaskTableShallSortWhenAFilterIsApplied()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The task table shall sort when a filter is applied", new string[] {
                        "VAL",
                        "PBMCC_191152_017",
                        "Release2015.3.0"});
#line 369
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "SynonymListName",
                        "Dictionary",
                        "Version",
                        "Locale"});
            table25.AddRow(new string[] {
                        "Primary List",
                        "MedDRA",
                        "15.0",
                        "ENG"});
            table25.AddRow(new string[] {
                        "Primary List",
                        "WhoDrugDDEB2",
                        "201503",
                        "ENG"});
#line 371
  testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionaries", ((string)(null)), table25, "Given ");
#line 375
  testRunner.And("coding tasks from CSV file \"Tasks_30_MultiStudy_MultiSup_MultiDict.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column Name",
                        "Filter Criteria"});
            table26.AddRow(new string[] {
                        "Priority",
                        "2"});
            table26.AddRow(new string[] {
                        "Status",
                        "Waiting Manual Code"});
            table26.AddRow(new string[] {
                        "Dictionary",
                        "All"});
            table26.AddRow(new string[] {
                        "Queries",
                        "All"});
            table26.AddRow(new string[] {
                        "Time Elapsed",
                        "0.5 days"});
#line 376
  testRunner.When("I filter the tasks by", ((string)(null)), table26, "When ");
#line 383
  testRunner.And("I sort the tasks by \"Verbatim Term\" \"descending\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column Name",
                        "Filter Criteria"});
            table27.AddRow(new string[] {
                        "Priority",
                        "2"});
            table27.AddRow(new string[] {
                        "Status",
                        "Waiting Manual Code"});
            table27.AddRow(new string[] {
                        "Time Elapsed",
                        "0.5 days"});
#line 384
  testRunner.Then("the tasks will be filtered by", ((string)(null)), table27, "Then ");
#line 389
  testRunner.And("the tasks will be sorted by \"Verbatim Term\" \"descending\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PAGINATION The First page link shall go to the first page")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_191152_018")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void PAGINATIONTheFirstPageLinkShallGoToTheFirstPage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PAGINATION The First page link shall go to the first page", new string[] {
                        "VAL",
                        "PBMCC_191152_018",
                        "Release2015.3.0"});
#line 394
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "SynonymListName",
                        "Dictionary",
                        "Version",
                        "Locale"});
            table28.AddRow(new string[] {
                        "Primary List",
                        "MedDRA",
                        "15.0",
                        "ENG"});
            table28.AddRow(new string[] {
                        "Primary List",
                        "WhoDrugDDEB2",
                        "201503",
                        "ENG"});
#line 396
  testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionaries", ((string)(null)), table28, "Given ");
#line 400
  testRunner.And("coding tasks from CSV file \"Tasks_30_MultiStudy_MultiSup_MultiDict.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 401
  testRunner.When("I go to page \"Next\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 402
  testRunner.Then("The current page is \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 403
  testRunner.When("I go to page \"First\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 404
  testRunner.Then("The current page is \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PAGINATION The Previous page link shall go to the Previous page")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_191152_019")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void PAGINATIONThePreviousPageLinkShallGoToThePreviousPage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PAGINATION The Previous page link shall go to the Previous page", new string[] {
                        "VAL",
                        "PBMCC_191152_019",
                        "Release2015.3.0"});
#line 409
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "SynonymListName",
                        "Dictionary",
                        "Version",
                        "Locale"});
            table29.AddRow(new string[] {
                        "Primary List",
                        "MedDRA",
                        "15.0",
                        "ENG"});
            table29.AddRow(new string[] {
                        "Primary List",
                        "WhoDrugDDEB2",
                        "201503",
                        "ENG"});
#line 411
  testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionaries", ((string)(null)), table29, "Given ");
#line 415
  testRunner.And("coding tasks from CSV file \"Tasks_30_MultiStudy_MultiSup_MultiDict.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 416
  testRunner.When("I go to page \"Last\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 417
  testRunner.Then("The current page is \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 418
  testRunner.When("I go to page \"Previous\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 419
  testRunner.Then("The current page is \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PAGINATION The Next page link shall go to the next page")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_191152_020")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void PAGINATIONTheNextPageLinkShallGoToTheNextPage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PAGINATION The Next page link shall go to the next page", new string[] {
                        "VAL",
                        "PBMCC_191152_020",
                        "Release2015.3.0"});
#line 424
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "SynonymListName",
                        "Dictionary",
                        "Version",
                        "Locale"});
            table30.AddRow(new string[] {
                        "Primary List",
                        "MedDRA",
                        "15.0",
                        "ENG"});
            table30.AddRow(new string[] {
                        "Primary List",
                        "WhoDrugDDEB2",
                        "201503",
                        "ENG"});
#line 426
  testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionaries", ((string)(null)), table30, "Given ");
#line 430
  testRunner.And("coding tasks from CSV file \"Tasks_30_MultiStudy_MultiSup_MultiDict.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 431
  testRunner.When("I go to page \"Next\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 432
  testRunner.Then("The current page is \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PAGINATION The Last page link shall go to the last page")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_191152_021")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void PAGINATIONTheLastPageLinkShallGoToTheLastPage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PAGINATION The Last page link shall go to the last page", new string[] {
                        "VAL",
                        "PBMCC_191152_021",
                        "Release2015.3.0"});
#line 437
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "SynonymListName",
                        "Dictionary",
                        "Version",
                        "Locale"});
            table31.AddRow(new string[] {
                        "Primary List",
                        "MedDRA",
                        "15.0",
                        "ENG"});
            table31.AddRow(new string[] {
                        "Primary List",
                        "WhoDrugDDEB2",
                        "201503",
                        "ENG"});
#line 439
  testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionaries", ((string)(null)), table31, "Given ");
#line 443
  testRunner.And("coding tasks from CSV file \"Tasks_30_MultiStudy_MultiSup_MultiDict.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 444
  testRunner.When("I go to page \"Last\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 445
  testRunner.Then("The current page is \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PAGINATION The numeric page links shall go to the corresponding pages")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_191152_022")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void PAGINATIONTheNumericPageLinksShallGoToTheCorrespondingPages()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PAGINATION The numeric page links shall go to the corresponding pages", new string[] {
                        "VAL",
                        "PBMCC_191152_022",
                        "Release2015.3.0"});
#line 450
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "SynonymListName",
                        "Dictionary",
                        "Version",
                        "Locale"});
            table32.AddRow(new string[] {
                        "Primary List",
                        "MedDRA",
                        "15.0",
                        "ENG"});
            table32.AddRow(new string[] {
                        "Primary List",
                        "WhoDrugDDEB2",
                        "201503",
                        "ENG"});
#line 452
  testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionaries", ((string)(null)), table32, "Given ");
#line 456
  testRunner.And("coding tasks from CSV file \"Tasks_30_MultiStudy_MultiSup_MultiDict.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 457
  testRunner.When("I go to page \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 458
  testRunner.Then("The current page is \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 459
  testRunner.When("I go to page \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 460
  testRunner.Then("The current page is \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 461
  testRunner.When("I go to page \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 462
  testRunner.Then("The current page is \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PAGINATION The numeric page links shall go to the corresponding pages when more t" +
            "han twelve pages are generated")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_191152_023")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.Timeout(300000)]
        public virtual void PAGINATIONTheNumericPageLinksShallGoToTheCorrespondingPagesWhenMoreThanTwelvePagesAreGenerated()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PAGINATION The numeric page links shall go to the corresponding pages when more t" +
                    "han twelve pages are generated", new string[] {
                        "VAL",
                        "PBMCC_191152_023",
                        "Release2015.3.0",
                        "IncreaseTimeout_300000"});
#line 468
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "SynonymListName",
                        "Dictionary",
                        "Version",
                        "Locale"});
            table33.AddRow(new string[] {
                        "Primary List",
                        "MedDRA",
                        "15.0",
                        "ENG"});
            table33.AddRow(new string[] {
                        "Primary List",
                        "WhoDrugDDEB2",
                        "201503",
                        "ENG"});
#line 470
  testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionaries", ((string)(null)), table33, "Given ");
#line 474
  testRunner.And("coding tasks from CSV file \"Tasks_520_MultiStudy_MultiSup_MultiDict.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 475
  testRunner.When("I go to page \"7\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 476
  testRunner.Then("The current page is \"7\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 477
  testRunner.When("I go to page \"9\t\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 478
  testRunner.Then("The current page is \"9\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 479
  testRunner.When("I go to page \"49\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 480
  testRunner.Then("The current page is \"49\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 481
  testRunner.When("I go to page \"44\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 482
  testRunner.Then("The current page is \"44\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("COUNT The number of tasks shall be available to the client when I load 520 from C" +
            "SV")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_191152_024")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.Timeout(300000)]
        public virtual void COUNTTheNumberOfTasksShallBeAvailableToTheClientWhenILoad520FromCSV()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("COUNT The number of tasks shall be available to the client when I load 520 from C" +
                    "SV", new string[] {
                        "VAL",
                        "PBMCC_191152_024",
                        "Release2015.3.0",
                        "IncreaseTimeout_300000"});
#line 488
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "SynonymListName",
                        "Dictionary",
                        "Version",
                        "Locale"});
            table34.AddRow(new string[] {
                        "Primary List",
                        "MedDRA",
                        "15.0",
                        "ENG"});
            table34.AddRow(new string[] {
                        "Primary List",
                        "WhoDrugDDEB2",
                        "201503",
                        "ENG"});
#line 490
  testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionaries", ((string)(null)), table34, "Given ");
#line 494
  testRunner.And("coding tasks from CSV file \"Tasks_520_MultiStudy_MultiSup_MultiDict.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 495
  testRunner.Then("The task count is \"520\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("COUNT The number of tasks shall be available to the client when I load 30 from CS" +
            "V and the display limit is 50")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_191152_025")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void COUNTTheNumberOfTasksShallBeAvailableToTheClientWhenILoad30FromCSVAndTheDisplayLimitIs50()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("COUNT The number of tasks shall be available to the client when I load 30 from CS" +
                    "V and the display limit is 50", new string[] {
                        "VAL",
                        "PBMCC_191152_025",
                        "Release2015.3.0"});
#line 500
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "SynonymListName",
                        "Dictionary",
                        "Version",
                        "Locale"});
            table35.AddRow(new string[] {
                        "Primary List",
                        "MedDRA",
                        "15.0",
                        "ENG"});
            table35.AddRow(new string[] {
                        "Primary List",
                        "WhoDrugDDEB2",
                        "201503",
                        "ENG"});
#line 502
  testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionaries", ((string)(null)), table35, "Given ");
#line 506
  testRunner.And("coding tasks from CSV file \"Tasks_30_MultiStudy_MultiSup_MultiDict.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 507
  testRunner.When("entering value \"50\" for Configuration \"Coding Task Page Size\" and save", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 508
  testRunner.Then("The task count is \"30\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The ODBFileBuilder will be backwards compatible with existing CSV files")]
        [NUnit.Framework.IgnoreAttribute()]
        [NUnit.Framework.CategoryAttribute("DFT")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_191152_026")]
        [NUnit.Framework.Timeout(3000000)]
        public virtual void TheODBFileBuilderWillBeBackwardsCompatibleWithExistingCSVFiles()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The ODBFileBuilder will be backwards compatible with existing CSV files", new string[] {
                        "DFT",
                        "Release2015.3.0",
                        "PBMCC_191152_026",
                        "IncreaseTimeout_3000000",
                        "ignore"});
#line 515
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "SynonymListName",
                        "Dictionary",
                        "Version",
                        "Locale"});
            table36.AddRow(new string[] {
                        "Primary List",
                        "MedDRA",
                        "15.0",
                        "ENG"});
            table36.AddRow(new string[] {
                        "Primary List",
                        "WhoDrugDDEB2",
                        "201503",
                        "ENG"});
#line 517
  testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionaries", ((string)(null)), table36, "Given ");
#line 521
  testRunner.And("coding tasks from CSV file \"Tasks_30_MultiStudy_MultiSup_MultiDict.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 522
  testRunner.And("coding tasks from CSV file \"Tasks_520_MultiStudy_MultiSup_MultiDict.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 523
  testRunner.And("coding tasks from CSV file \"Tasks_1000_MedDRA_Match_Upload.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 524
  testRunner.And("coding tasks from CSV file \"Tasks_1500_SingleStudy_NoSup_SingleDict.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 525
  testRunner.And("coding tasks from CSV file \"AutoApproveSynonymApprovalMedDRA.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 526
  testRunner.And("coding tasks from CSV file \"AutoApproveSynonymApprovalWhoDrugDDEB2.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 527
  testRunner.Then("The task count is not \"0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("New tasks shall not be accepted while the target study is being migrated")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_193388_001")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void NewTasksShallNotBeAcceptedWhileTheTargetStudyIsBeingMigrated()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("New tasks shall not be accepted while the target study is being migrated", new string[] {
                        "VAL",
                        "PBMCC_193388_001",
                        "Release2015.3.0",
                        "IncreaseTimeout_600000"});
#line 533
this.ScenarioSetup(scenarioInfo);
#line 535
  testRunner.Given("a \"Basic\" Coder setup with registered synonym list \"MedDRA ENG 14.0 Empty_List\" c" +
                    "ontaining entry \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 536
  testRunner.And("an activated synonym list \"MedDRA ENG 15.0 New_Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 537
  testRunner.And("coding tasks from CSV file \"Tasks_1000_MedDRA_Match_Upload.csv\" and auto-coding i" +
                    "n progress", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 538
  testRunner.When("performing study migration without waiting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 539
  testRunner.Then("new coding task \"AARDWOLF\" is not be accepted until the study migration completes" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
