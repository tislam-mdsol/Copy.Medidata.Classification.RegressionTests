// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Coder.RegressionTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Verify study migration up-versioning")]
    [NUnit.Framework.CategoryAttribute("specStudyMigration.feature")]
    [NUnit.Framework.CategoryAttribute("CoderCore")]
    public partial class VerifyStudyMigrationUp_VersioningFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "specStudyMigration.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Verify study migration up-versioning", "", ProgrammingLanguage.CSharp, new string[] {
                        "specStudyMigration.feature",
                        "CoderCore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify there are no incorrect categorizations for Reinstated instead of Node path" +
            " changed for MedDRA ENG")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_185551_001")]
        [NUnit.Framework.Timeout(1800000)]
        public virtual void VerifyThereAreNoIncorrectCategorizationsForReinstatedInsteadOfNodePathChangedForMedDRAENG()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify there are no incorrect categorizations for Reinstated instead of Node path" +
                    " changed for MedDRA ENG", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_185551_001",
                        "IncreaseTimeout_1800000"});
#line 9
this.ScenarioSetup(scenarioInfo);
#line 10
 testRunner.Given("a \"Basic\" Coder setup with registered synonym list \"MedDRA ENG 15.0 Empty_List\" c" +
                    "ontaining entry \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 11
 testRunner.And("an unactivated synonym list \"MedDRA ENG 18.0 New_Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary",
                        "Dictionary Level",
                        "Is Approval Required",
                        "Is Auto Approval"});
            table1.AddRow(new string[] {
                        "Adverse Event 1",
                        "MedDRA",
                        "LLT",
                        "TRUE",
                        "FALSE"});
            table1.AddRow(new string[] {
                        "Tapas Rash",
                        "MedDRA",
                        "LLT",
                        "TRUE",
                        "FALSE"});
#line 12
 testRunner.When("uploading MEV content", ((string)(null)), table1, "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim",
                        "Dictionary Level",
                        "Search Text",
                        "Search Level",
                        "Synonym Term",
                        "Synonym Code",
                        "Add Synonym"});
            table2.AddRow(new string[] {
                        "Adverse Event 1",
                        "LLT",
                        "Hernia abdominal wall",
                        "Low Level Term",
                        "Hernia abdominal wall",
                        "10019911",
                        "True"});
            table2.AddRow(new string[] {
                        "Tapas Rash",
                        "LLT",
                        "Disbacteriosis",
                        "Low Level Term",
                        "Disbacteriosis",
                        "10064389",
                        "True"});
#line 16
    testRunner.And("coding the tasks", ((string)(null)), table2, "And ");
#line 20
 testRunner.And("starting synonym list migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
 testRunner.And("accepting the reconciliation suggestion for the synonym \"Adverse Event 1\" under t" +
                    "he category \"Path Does Not Exist\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
 testRunner.And("dropping the reconciliation suggestion for the synonym \"Tapas Rash\" under the cat" +
                    "egory \"No Clear Match\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.And("completing synonym migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
 testRunner.And("performing Study Impact Analysis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
 testRunner.Then("the verbatim term \"Adverse Event 1\" exists under Path Changed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 26
 testRunner.And("the verbatim term \"Tapas Rash\" exists under Term Not Found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
    testRunner.When("performing study migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
 testRunner.Then("study migration is complete for the latest version", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim",
                        "Category",
                        "Workflow Status"});
            table3.AddRow(new string[] {
                        "Adverse Event 1",
                        "Coded but not Completed",
                        "Waiting Approval"});
            table3.AddRow(new string[] {
                        "Tapas Rash",
                        "Not Coded",
                        "Waiting Manual Code"});
#line 29
 testRunner.And("the following study report information exists", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim",
                        "Comment",
                        "Workflow Status"});
            table4.AddRow(new string[] {
                        "Adverse Event 1",
                        "Version Change - From MedDRA-15_0-English To MedDRA-18_0-English. Recoded due to " +
                            "synonym change across versions",
                        "Waiting Approval"});
            table4.AddRow(new string[] {
                        "Tapas Rash",
                        "Version Change - From MedDRA-15_0-English To MedDRA-18_0-English",
                        "Waiting Manual Code"});
#line 33
 testRunner.And("the term has the following coding history comments", ((string)(null)), table4, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Any verbatim term with a direct dictionary match that has been re-coded to a non " +
            "direct match term should auto code to a better match during up-versioning")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_185551_002")]
        [NUnit.Framework.Timeout(1800000)]
        public virtual void AnyVerbatimTermWithADirectDictionaryMatchThatHasBeenRe_CodedToANonDirectMatchTermShouldAutoCodeToABetterMatchDuringUp_Versioning()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Any verbatim term with a direct dictionary match that has been re-coded to a non " +
                    "direct match term should auto code to a better match during up-versioning", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_185551_002",
                        "IncreaseTimeout_1800000"});
#line 43
this.ScenarioSetup(scenarioInfo);
#line 44
 testRunner.Given("a \"Waiting Approval\" Coder setup with registered synonym list \"MedDRA ENG 15.0 Em" +
                    "pty_List\" containing entry \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 45
 testRunner.And("an unactivated synonym list \"MedDRA ENG 18.0 New_Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary",
                        "Dictionary Level",
                        "Is Approval Required",
                        "Is Auto Approval"});
            table5.AddRow(new string[] {
                        "Headache",
                        "MedDRA",
                        "LLT",
                        "TRUE",
                        "FALSE"});
#line 46
 testRunner.When("uploading MEV content", ((string)(null)), table5, "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim",
                        "Dictionary Level",
                        "Search Text",
                        "Search Level",
                        "Synonym Term",
                        "Synonym Code",
                        "Add Synonym",
                        "Comment"});
            table6.AddRow(new string[] {
                        "Headache",
                        "LLT",
                        "Migraine",
                        "Low Level Term",
                        "Migraine",
                        "10027599",
                        "False",
                        "Recoding task"});
#line 49
    testRunner.And("re-coding the tasks", ((string)(null)), table6, "And ");
#line 52
 testRunner.And("starting synonym list migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
 testRunner.And("performing Study Impact Analysis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
 testRunner.Then("the study has \"1\" task(s) that is not affected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 55
    testRunner.When("performing study migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 56
 testRunner.Then("study migration is complete for the latest version", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim",
                        "Category",
                        "Workflow Status"});
            table7.AddRow(new string[] {
                        "Headache",
                        "Coded but not Completed",
                        "Waiting Approval"});
#line 57
 testRunner.And("the following study report information exists", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim",
                        "Comment",
                        "Workflow Status"});
            table8.AddRow(new string[] {
                        "Headache",
                        "Version Change - From MedDRA-15_0-English To MedDRA-18_0-English. Recoded due to " +
                            "better match",
                        "Waiting Approval"});
#line 60
 testRunner.And("the term has the following coding history comments", ((string)(null)), table8, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify study up-versioning across all study impact analysis categories")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_174921_001")]
        [NUnit.Framework.Timeout(1800000)]
        public virtual void VerifyStudyUp_VersioningAcrossAllStudyImpactAnalysisCategories()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify study up-versioning across all study impact analysis categories", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_174921_001",
                        "IncreaseTimeout_1800000"});
#line 69
this.ScenarioSetup(scenarioInfo);
#line 70
 testRunner.Given("a \"Basic\" Coder setup with registered synonym list \"MedDRA ENG 9.0 Empty_List\" co" +
                    "ntaining entry \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 71
 testRunner.And("an unactivated synonym list \"MedDRA ENG 12.0 New_Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary",
                        "Dictionary Level",
                        "Is Approval Required",
                        "Is Auto Approval"});
            table9.AddRow(new string[] {
                        "Adverse Event 1",
                        "MedDRA",
                        "LLT",
                        "TRUE",
                        "FALSE"});
            table9.AddRow(new string[] {
                        "Tapas Rash",
                        "MedDRA",
                        "LLT",
                        "TRUE",
                        "FALSE"});
            table9.AddRow(new string[] {
                        "Blood Splatter 1",
                        "MedDRA",
                        "LLT",
                        "TRUE",
                        "FALSE"});
            table9.AddRow(new string[] {
                        "Human Error",
                        "MedDRA",
                        "LLT",
                        "TRUE",
                        "FALSE"});
            table9.AddRow(new string[] {
                        "Television Eyes",
                        "MedDRA",
                        "LLT",
                        "TRUE",
                        "FALSE"});
            table9.AddRow(new string[] {
                        "Blue Whale Legs",
                        "MedDRA",
                        "LLT",
                        "TRUE",
                        "FALSE"});
            table9.AddRow(new string[] {
                        "Foot Inflammation",
                        "MedDRA",
                        "LLT",
                        "TRUE",
                        "FALSE"});
            table9.AddRow(new string[] {
                        "Box Cut",
                        "MedDRA",
                        "LLT",
                        "TRUE",
                        "FALSE"});
            table9.AddRow(new string[] {
                        "Headache",
                        "MedDRA",
                        "LLT",
                        "FALSE",
                        "FALSE"});
            table9.AddRow(new string[] {
                        "Blotchy rash",
                        "MedDRA",
                        "LLT",
                        "FALSE",
                        "FALSE"});
            table9.AddRow(new string[] {
                        "Case Changed Term",
                        "MedDRA",
                        "LLT",
                        "TRUE",
                        "FALSE"});
#line 72
 testRunner.When("uploading MEV content", ((string)(null)), table9, "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim",
                        "Dictionary Level",
                        "Search Text",
                        "Search Level",
                        "Synonym Term",
                        "Synonym Code",
                        "Add Synonym"});
            table10.AddRow(new string[] {
                        "Adverse Event 1",
                        "LLT",
                        "Parathyrn",
                        "Low Level Term",
                        "Parathyrn",
                        "10033933",
                        "false"});
            table10.AddRow(new string[] {
                        "Tapas Rash",
                        "LLT",
                        "Broken leg",
                        "Low Level Term",
                        "Broken leg",
                        "10006391",
                        "false"});
            table10.AddRow(new string[] {
                        "Blood Splatter 1",
                        "LLT",
                        "Drug exposure prior and during pregnancy via father",
                        "Low Level Term",
                        "Drug exposure prior and during pregnancy via father",
                        "10061359",
                        "false"});
            table10.AddRow(new string[] {
                        "Human Error",
                        "LLT",
                        "Optic neuritis",
                        "Low Level Term",
                        "Optic neuritis",
                        "10030942",
                        "false"});
            table10.AddRow(new string[] {
                        "Television Eyes",
                        "LLT",
                        "Coronary artery restenosis",
                        "Low Level Term",
                        "Coronary artery restenosis",
                        "10056489",
                        "false"});
            table10.AddRow(new string[] {
                        "Blue Whale Legs",
                        "LLT",
                        "Oxalosis",
                        "Low Level Term",
                        "Oxalosis",
                        "10049226",
                        "false"});
            table10.AddRow(new string[] {
                        "Foot Inflammation",
                        "LLT",
                        "Echolalia",
                        "Low Level Term",
                        "Echolalia",
                        "10014127",
                        "false"});
            table10.AddRow(new string[] {
                        "Box Cut",
                        "LLT",
                        "Angiofibroma",
                        "Low Level Term",
                        "Angiofibroma",
                        "10002429",
                        "false"});
            table10.AddRow(new string[] {
                        "Case Changed Term",
                        "LLT",
                        "Parkinsonism",
                        "Low Level Term",
                        "Parkinsonism",
                        "10034010",
                        "true"});
#line 85
 testRunner.And("coding the tasks", ((string)(null)), table10, "And ");
#line 96
 testRunner.And("starting synonym list migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 97
 testRunner.And("performing Study Impact Analysis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
 testRunner.Then("the verbatim term \"Case Changed Term\" exists under Casing Changed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 99
 testRunner.When("performing study migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 100
 testRunner.Then("study migration is complete for the latest version", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim",
                        "Category",
                        "Workflow Status"});
            table11.AddRow(new string[] {
                        "Adverse Event 1",
                        "Not Coded",
                        "Waiting Manual Code"});
            table11.AddRow(new string[] {
                        "Blood Splatter 1",
                        "Not Coded",
                        "Waiting Manual Code"});
            table11.AddRow(new string[] {
                        "Human Error",
                        "Not Coded",
                        "Waiting Manual Code"});
            table11.AddRow(new string[] {
                        "Television Eyes",
                        "Not Coded",
                        "Waiting Manual Code"});
            table11.AddRow(new string[] {
                        "Blue Whale Legs",
                        "Not Coded",
                        "Waiting Manual Code"});
            table11.AddRow(new string[] {
                        "Foot Inflammation",
                        "Not Coded",
                        "Waiting Manual Code"});
            table11.AddRow(new string[] {
                        "Box Cut",
                        "Not Coded",
                        "Waiting Manual Code"});
            table11.AddRow(new string[] {
                        "Tapas Rash",
                        "Coded but not Completed",
                        "Waiting Approval"});
            table11.AddRow(new string[] {
                        "Case Changed Term",
                        "Coded but not Completed",
                        "Waiting Approval"});
            table11.AddRow(new string[] {
                        "Headache",
                        "Completed",
                        "Completed"});
            table11.AddRow(new string[] {
                        "Blotchy rash",
                        "Completed",
                        "Completed"});
#line 101
 testRunner.And("the following study report information exists", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim",
                        "Comment",
                        "Workflow Status"});
            table12.AddRow(new string[] {
                        "Adverse Event 1",
                        "Version Change - From MedDRA-9_0-English To MedDRA-12_0-English",
                        "Waiting Manual Code"});
            table12.AddRow(new string[] {
                        "Blood Splatter 1",
                        "Version Change - From MedDRA-9_0-English To MedDRA-12_0-English",
                        "Waiting Manual Code"});
            table12.AddRow(new string[] {
                        "Human Error",
                        "Version Change - From MedDRA-9_0-English To MedDRA-12_0-English",
                        "Waiting Manual Code"});
            table12.AddRow(new string[] {
                        "Television Eyes",
                        "Version Change - From MedDRA-9_0-English To MedDRA-12_0-English",
                        "Waiting Manual Code"});
            table12.AddRow(new string[] {
                        "Blue Whale Legs",
                        "Version Change - From MedDRA-9_0-English To MedDRA-12_0-English",
                        "Waiting Manual Code"});
            table12.AddRow(new string[] {
                        "Foot Inflammation",
                        "Version Change - From MedDRA-9_0-English To MedDRA-12_0-English",
                        "Waiting Manual Code"});
            table12.AddRow(new string[] {
                        "Box Cut",
                        "Version Change - From MedDRA-9_0-English To MedDRA-12_0-English",
                        "Waiting Manual Code"});
            table12.AddRow(new string[] {
                        "Tapas Rash",
                        "Version Change - From MedDRA-9_0-English To MedDRA-12_0-English",
                        "Waiting Approval"});
            table12.AddRow(new string[] {
                        "Case Changed Term",
                        "Version Change - From MedDRA-9_0-English To MedDRA-12_0-English. Recoded due to s" +
                            "ynonym change across versions",
                        "Waiting Approval"});
#line 114
 testRunner.And("the term has the following coding history comments", ((string)(null)), table12, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify case sensitiveness during study up-versioning")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_174921_002")]
        [NUnit.Framework.Timeout(1800000)]
        public virtual void VerifyCaseSensitivenessDuringStudyUp_Versioning()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify case sensitiveness during study up-versioning", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_174921_002",
                        "IncreaseTimeout_1800000"});
#line 131
this.ScenarioSetup(scenarioInfo);
#line 132
 testRunner.Given("a \"Basic\" Coder setup with registered synonym list \"MedDRA ENG 9.0 Empty_List\" co" +
                    "ntaining entry \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 133
 testRunner.And("an unactivated synonym list \"MedDRA ENG 12.0 New_Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary",
                        "Dictionary Level",
                        "Is Approval Required",
                        "Is Auto Approval"});
            table13.AddRow(new string[] {
                        "Case Changed Term",
                        "MedDRA",
                        "LLT",
                        "TRUE",
                        "FALSE"});
#line 134
 testRunner.When("uploading MEV content", ((string)(null)), table13, "When ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim",
                        "Dictionary Level",
                        "Search Text",
                        "Search Level",
                        "Synonym Term",
                        "Synonym Code",
                        "Add Synonym"});
            table14.AddRow(new string[] {
                        "Case Changed Term",
                        "LLT",
                        "Parkinsonism",
                        "Low Level Term",
                        "Parkinsonism",
                        "10034010",
                        "true"});
#line 137
 testRunner.And("coding the tasks", ((string)(null)), table14, "And ");
#line 140
 testRunner.And("starting synonym list migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 141
 testRunner.And("performing Study Impact Analysis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 142
 testRunner.Then("the verbatim term \"Case Changed Term\" exists under Casing Changed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 143
 testRunner.When("performing study migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 144
 testRunner.Then("study migration is complete for the latest version", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim",
                        "Category",
                        "Workflow Status"});
            table15.AddRow(new string[] {
                        "Case Changed Term",
                        "Coded but not Completed",
                        "Waiting Approval"});
#line 145
 testRunner.And("the following study report information exists", ((string)(null)), table15, "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim",
                        "Comment",
                        "Workflow Status"});
            table16.AddRow(new string[] {
                        "Case Changed Term",
                        "Version Change - From MedDRA-9_0-English To MedDRA-12_0-English. Recoded due to s" +
                            "ynonym change across versions",
                        "Waiting Approval"});
#line 148
 testRunner.And("the term has the following coding history comments", ((string)(null)), table16, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Tasks in \"Waiting Manual Code\" status shall be affected and completed by a Study " +
            "Migration with a synonym for the verbatim term.")]
        [NUnit.Framework.IgnoreAttribute()]
        [NUnit.Framework.CategoryAttribute("DFT")]
        [NUnit.Framework.CategoryAttribute("PBMCC_205138_001")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.Timeout(300000)]
        public virtual void TasksInWaitingManualCodeStatusShallBeAffectedAndCompletedByAStudyMigrationWithASynonymForTheVerbatimTerm_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tasks in \"Waiting Manual Code\" status shall be affected and completed by a Study " +
                    "Migration with a synonym for the verbatim term.", new string[] {
                        "DFT",
                        "PBMCC_205138_001",
                        "Release2015.3.0",
                        "IncreaseTimeout_300000",
                        "ignore"});
#line 158
this.ScenarioSetup(scenarioInfo);
#line 160
   testRunner.Given("a \"Basic\" Coder setup with registered synonym list \"MedDRA ENG 16.0 Empty_List\" c" +
                    "ontaining entry \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 161
   testRunner.And("a populated activated synonym list \"MedDRA ENG 16.1 New_Primary_List\" containing " +
                    "entry \"HEADACHES|10000396|LLT|LLT:10000396;PT:10073767;HLT:10028381;HLGT:1002839" +
                    "6;SOC:10010331|True|||\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 162
   testRunner.And("coding tasks \"HEADACHES\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 163
   testRunner.When("performing Study Impact Analysis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 164
   testRunner.Then("the verbatim term \"HEADACHES\" exists under Path Changed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 165
   testRunner.When("performing study migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 166
   testRunner.And("reclassifying task \"HEADACHES\" with comment \"Reconfirm\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Action",
                        "Status",
                        "Verbatim Term",
                        "Comment",
                        "Time Stamp"});
            table17.AddRow(new string[] {
                        "<User>",
                        "Reclassify",
                        "Waiting Manual Code",
                        "HEADACHES",
                        "Reconfirm",
                        "<TimeStamp>"});
            table17.AddRow(new string[] {
                        "<User>",
                        "",
                        "Completed",
                        "HEADACHES",
                        "Version Change - From MedDRA-16_0-English To MedDRA-16_1-English. Recoded due to " +
                            "synonym change across versions",
                        "<TimeStamp>"});
            table17.AddRow(new string[] {
                        "<User>",
                        "Open Query",
                        "Waiting Manual Code",
                        "HEADACHES",
                        "",
                        "<TimeStamp>"});
#line 167
   testRunner.Then("the Coding History contains following information", ((string)(null)), table17, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Manually coded tasks in \"Waiting Approval\" status shall be affected and completed" +
            " by a Study Migration with a same term synonym for the verbatim term.")]
        [NUnit.Framework.IgnoreAttribute()]
        [NUnit.Framework.CategoryAttribute("DFT")]
        [NUnit.Framework.CategoryAttribute("PBMCC_205138_002")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.Timeout(300000)]
        public virtual void ManuallyCodedTasksInWaitingApprovalStatusShallBeAffectedAndCompletedByAStudyMigrationWithASameTermSynonymForTheVerbatimTerm_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Manually coded tasks in \"Waiting Approval\" status shall be affected and completed" +
                    " by a Study Migration with a same term synonym for the verbatim term.", new string[] {
                        "DFT",
                        "PBMCC_205138_002",
                        "Release2015.3.0",
                        "IncreaseTimeout_300000",
                        "ignore"});
#line 179
this.ScenarioSetup(scenarioInfo);
#line 181
   testRunner.Given("a \"Basic\" Coder setup with registered synonym list \"MedDRA ENG 16.0 Empty_List\" c" +
                    "ontaining entry \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 182
   testRunner.And("a populated activated synonym list \"MedDRA ENG 16.1 New_Primary_List\" containing " +
                    "entry \"HEADACHES|10000396|LLT|LLT:10000396;PT:10073767;HLT:10028381;HLGT:1002839" +
                    "6;SOC:10010331|True|||\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 183
   testRunner.And("coding tasks \"HEADACHES\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 184
   testRunner.When("task \"HEADACHES\" is coded to term \"Acetabular dysplasia\" at search level \"Low Lev" +
                    "el Term\" with code \"10000396\" at level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 185
   testRunner.And("performing Study Impact Analysis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 186
   testRunner.Then("the verbatim term \"HEADACHES\" exists under Path Changed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 187
   testRunner.When("performing study migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 188
   testRunner.And("reclassifying task \"HEADACHES\" with comment \"Reconfirm\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Action",
                        "Status",
                        "Verbatim Term",
                        "Comment",
                        "Time Stamp"});
            table18.AddRow(new string[] {
                        "<User>",
                        "Reclassify",
                        "Waiting Manual Code",
                        "HEADACHES",
                        "Reconfirm",
                        "<TimeStamp>"});
            table18.AddRow(new string[] {
                        "<User>",
                        "",
                        "Completed",
                        "HEADACHES",
                        "Version Change - From MedDRA-16_0-English To MedDRA-16_1-English. Recoded due to " +
                            "synonym change across versions",
                        "<TimeStamp>"});
            table18.AddRow(new string[] {
                        "<User>",
                        "Browse And Code",
                        "Waiting Approval",
                        "HEADACHES",
                        "",
                        "<TimeStamp>"});
            table18.AddRow(new string[] {
                        "<User>",
                        "Open Query",
                        "Waiting Manual Code",
                        "HEADACHES",
                        "",
                        "<TimeStamp>"});
#line 189
   testRunner.Then("the Coding History contains following information", ((string)(null)), table18, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Manually coded tasks requiring approval in \"Waiting Approval\" status shall be aff" +
            "ected by a Study Migration with a different term synonym for the verbatim term")]
        [NUnit.Framework.IgnoreAttribute()]
        [NUnit.Framework.CategoryAttribute("DFT")]
        [NUnit.Framework.CategoryAttribute("PBMCC_205138_003")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.Timeout(300000)]
        public virtual void ManuallyCodedTasksRequiringApprovalInWaitingApprovalStatusShallBeAffectedByAStudyMigrationWithADifferentTermSynonymForTheVerbatimTerm()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Manually coded tasks requiring approval in \"Waiting Approval\" status shall be aff" +
                    "ected by a Study Migration with a different term synonym for the verbatim term", new string[] {
                        "DFT",
                        "PBMCC_205138_003",
                        "Release2015.3.0",
                        "IncreaseTimeout_300000",
                        "ignore"});
#line 203
this.ScenarioSetup(scenarioInfo);
#line 205
   testRunner.Given("a \"Waiting Approval\" Coder setup with registered synonym list \"MedDRA ENG 16.0 Em" +
                    "pty_List\" containing entry \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 206
   testRunner.And("a populated activated synonym list \"MedDRA ENG 16.1 New_Primary_List\" containing " +
                    "entry \"HEADACHES|10000396|LLT|LLT:10000396;PT:10073767;HLT:10028381;HLGT:1002839" +
                    "6;SOC:10010331|True|||\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 207
   testRunner.And("coding tasks \"HEADACHES\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 208
   testRunner.When("task \"HEADACHES\" is coded to term \"Haemoglobinuria\" at search level \"Low Level Te" +
                    "rm\" with code \"10018906\" at level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 209
   testRunner.And("performing Study Impact Analysis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 210
   testRunner.Then("the verbatim term \"HEADACHES\" exists under Path Changed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 211
   testRunner.When("performing study migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Action",
                        "Status",
                        "Verbatim Term",
                        "Comment",
                        "Time Stamp"});
            table19.AddRow(new string[] {
                        "<User>",
                        "",
                        "Waiting Approval",
                        "HEADACHES",
                        "Version Change - From MedDRA-16_0-English To MedDRA-16_1-English. Recoded due to " +
                            "synonym change across versions",
                        "<TimeStamp>"});
            table19.AddRow(new string[] {
                        "<User>",
                        "Browse And Code",
                        "Waiting Approval",
                        "HEADACHES",
                        "",
                        "<TimeStamp>"});
            table19.AddRow(new string[] {
                        "<User>",
                        "Open Query",
                        "Waiting Manual Code",
                        "HEADACHES",
                        "",
                        "<TimeStamp>"});
#line 212
   testRunner.Then("the Coding History contains following information", ((string)(null)), table19, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Manually coded tasks in \"Waiting Approval\" status shall be affected and completed" +
            " by a Study Migration with a different term synonym for the verbatim term")]
        [NUnit.Framework.IgnoreAttribute()]
        [NUnit.Framework.CategoryAttribute("DFT")]
        [NUnit.Framework.CategoryAttribute("PBMCC_205138_004")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.Timeout(300000)]
        public virtual void ManuallyCodedTasksInWaitingApprovalStatusShallBeAffectedAndCompletedByAStudyMigrationWithADifferentTermSynonymForTheVerbatimTerm()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Manually coded tasks in \"Waiting Approval\" status shall be affected and completed" +
                    " by a Study Migration with a different term synonym for the verbatim term", new string[] {
                        "DFT",
                        "PBMCC_205138_004",
                        "Release2015.3.0",
                        "IncreaseTimeout_300000",
                        "ignore"});
#line 225
this.ScenarioSetup(scenarioInfo);
#line 227
   testRunner.Given("a \"Basic\" Coder setup with registered synonym list \"MedDRA ENG 16.0 Empty_List\" c" +
                    "ontaining entry \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 228
   testRunner.And("a populated activated synonym list \"MedDRA ENG 16.1 New_Primary_List\" containing " +
                    "entry \"HEADACHES|10000396|LLT|LLT:10000396;PT:10073767;HLT:10028381;HLGT:1002839" +
                    "6;SOC:10010331|True|||\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 229
   testRunner.And("coding tasks \"HEADACHES\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 230
   testRunner.When("task \"HEADACHES\" is coded to term \"Haemoglobinuria\" at search level \"Low Level Te" +
                    "rm\" with code \"10018906\" at level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 231
   testRunner.And("performing Study Impact Analysis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 232
   testRunner.Then("the verbatim term \"HEADACHES\" exists under Path Changed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 233
   testRunner.When("performing study migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 234
   testRunner.And("reclassifying task \"HEADACHES\" with comment \"Reconfirm\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Action",
                        "Status",
                        "Verbatim Term",
                        "Comment",
                        "Time Stamp"});
            table20.AddRow(new string[] {
                        "<User>",
                        "Reclassify",
                        "Waiting Manual Code",
                        "HEADACHES",
                        "Reconfirm",
                        "<TimeStamp>"});
            table20.AddRow(new string[] {
                        "<User>",
                        "",
                        "Completed",
                        "HEADACHES",
                        "Version Change - From MedDRA-16_0-English To MedDRA-16_1-English. Recoded due to " +
                            "synonym change across versions",
                        "<TimeStamp>"});
            table20.AddRow(new string[] {
                        "<User>",
                        "Browse And Code",
                        "Waiting Approval",
                        "HEADACHES",
                        "",
                        "<TimeStamp>"});
            table20.AddRow(new string[] {
                        "<User>",
                        "Open Query",
                        "Waiting Manual Code",
                        "HEADACHES",
                        "",
                        "<TimeStamp>"});
#line 235
   testRunner.Then("the Coding History contains following information", ((string)(null)), table20, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
