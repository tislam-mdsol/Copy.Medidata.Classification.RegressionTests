// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Coder.RegressionTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("This feature file will verify the basic synonym migration features for suggestion" +
        " generation and reconciliation")]
    [NUnit.Framework.CategoryAttribute("specSynonymMigrationReconciliation.feature")]
    [NUnit.Framework.CategoryAttribute("CoderCore")]
    public partial class ThisFeatureFileWillVerifyTheBasicSynonymMigrationFeaturesForSuggestionGenerationAndReconciliationFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "specSynonymMigrationReconciliation.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "This feature file will verify the basic synonym migration features for suggestion" +
                    " generation and reconciliation", "\r\nWhenever you upgrade synonym lists and there is a change between the source and" +
                    " target dictionary versions, you have to use the Reconcile page to specify\r\nhow " +
                    "you want to manage the differences. You must do this even if the differences do " +
                    "not affect the current verbatim/dictionary mapping. You must reconcile\r\nall issu" +
                    "es before you can complete the synonym migration process\r\n\r\nhttps://learn.mdsol." +
                    "com/display/CODERstg/Migrating+and+Managing+Synonym+Lists?lang=en\r\n\r\nSynonym Mig" +
                    "ration Categories:\r\n\r\n1] Clear Match: The synonym will automatically be migrated" +
                    ", given there was no change to the synonym or its alternative coding paths. Clea" +
                    "r matches will not appear to be reconciled.\r\n\r\n2] Multi Axiality Change: The syn" +
                    "onym will require manual reconciliation, given the term has more than 1 path and" +
                    " the alternative paths have changed yet not the main path\r\n\r\n3] Primary SOC Path" +
                    " Change: The synonym will require manual reconciliation, given (only applicable " +
                    "to MedDRA) the Primary path has changed.\r\n\r\n4] Path Does Not Exist: Synonym will" +
                    " require manual reconciliation, given the code path of a term has changed.\r\n\r\n5]" +
                    " No Match: The synonym will require manual reconciliation, given there is not ma" +
                    "tching path or (only applicable to MedDRA) the Lowest Level Term code changed fr" +
                    "om Current Term to a Non-Current Term\r\n\r\n6] No Clear Match: The synonym will req" +
                    "uire manual reconciliation, given Term text has changed or (only applicable to M" +
                    "edDRA) changed from Non-Current Term to Current Term.\r\n\r\n\r\nThe following environ" +
                    "ment configuration settings were enabled:\r\n\r\n Common Configurations:\r\n   Configu" +
                    "ration Name       | Force Primary Path Selection (MedDRA) | Synonym Creation Pol" +
                    "icy Flag | Bypass Reconsider Upon Reclassify | Default Select Threshold | Defaul" +
                    "t Suggest Threshold | Auto Add Synonyms | Auto Approve | Term Requires Approval " +
                    "(IsApprovalRequired )  | Term Auto Approve with synonym (IsAutoApproval)   |\r\n  " +
                    " Basic                    | TRUE                                  | Always Activ" +
                    "e                | TRUE                              | 100                      " +
                    "| 70                        | TRUE              | FALSE        | TRUE           " +
                    "                               | TRUE                                           " +
                    "   |\r\n   No Enforced Primary Path | FALSE                                 | Alwa" +
                    "ys Active                | TRUE                              | 100              " +
                    "        | 70                        | TRUE              | FALSE        | TRUE   " +
                    "                                       | TRUE                                   " +
                    "           |", ProgrammingLanguage.CSharp, new string[] {
                        "specSynonymMigrationReconciliation.feature",
                        "CoderCore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A synonym migration for a new dictionary version can be migrated from an empty ne" +
            "w synonym list")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_168577_001")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void ASynonymMigrationForANewDictionaryVersionCanBeMigratedFromAnEmptyNewSynonymList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A synonym migration for a new dictionary version can be migrated from an empty ne" +
                    "w synonym list", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_168577_001",
                        "IncreaseTimeout"});
#line 38
this.ScenarioSetup(scenarioInfo);
#line 40
  testRunner.Given("a \"Basic\" Coder setup with an empty registered synonym list \"MedDRA ENG 11.0 Empt" +
                    "y_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 41
  testRunner.And("an unactivated synonym list \"MedDRA ENG 12.0 New_Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
  testRunner.When("starting synonym list migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 43
  testRunner.Then("synonym list migration is completed with \"0\" synonym and no reconciliation is nee" +
                    "ded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A synonym migration with a Clear Match synonym will automatically be migrated, gi" +
            "ven there was no change to the synonym or its alternative coding paths")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_168577_002")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void ASynonymMigrationWithAClearMatchSynonymWillAutomaticallyBeMigratedGivenThereWasNoChangeToTheSynonymOrItsAlternativeCodingPaths()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A synonym migration with a Clear Match synonym will automatically be migrated, gi" +
                    "ven there was no change to the synonym or its alternative coding paths", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_168577_002",
                        "IncreaseTimeout"});
#line 50
this.ScenarioSetup(scenarioInfo);
#line 52
  testRunner.Given("a \"Basic\" Coder setup with registered synonym list \"MedDRA ENG 11.0 Clear_Match\" " +
                    "containing entry \"HEADACHE|10019211|LLT|LLT:10019211;PT:10019211;HLT:10019233;HL" +
                    "GT:10019231;SOC:10029205|True|AE.AECAT:OTHER|Approved|Headache\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 53
  testRunner.And("an unactivated synonym list \"MedDRA ENG 12.0 New_Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
  testRunner.When("starting synonym list migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 55
  testRunner.Then("synonym list migration is completed with \"1\" synonym and no reconciliation is nee" +
                    "ded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A synonym migration with a Primary SOC Path Change synonym will require manual re" +
            "conciliation, given (only applicable to MedDRA) the Primary path has changed.")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_168577_003")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void ASynonymMigrationWithAPrimarySOCPathChangeSynonymWillRequireManualReconciliationGivenOnlyApplicableToMedDRAThePrimaryPathHasChanged_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A synonym migration with a Primary SOC Path Change synonym will require manual re" +
                    "conciliation, given (only applicable to MedDRA) the Primary path has changed.", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_168577_003",
                        "IncreaseTimeout"});
#line 62
this.ScenarioSetup(scenarioInfo);
#line 64
  testRunner.Given("a \"Basic\" Coder setup with registered synonym list \"MedDRA ENG 15.0 Path Does Not" +
                    " Exist_MedDRA\" containing entry \"Hypo Activity|10020934|LLT|LLT:10020934;PT:1001" +
                    "1953;HLT:10011975;HLGT:10008401;SOC:10037175|True||Approved|HYPOACTIVITY\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 65
  testRunner.And("an unactivated synonym list \"MedDRA ENG 18.0 New_Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
  testRunner.When("starting synonym list migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 67
  testRunner.Then("reconciliation is needed for the synonym \"Hypo Activity\" under the category \"Prim" +
                    "ary SOC Change\" with \"1\" synonym(s) not migrated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A synonym migration with a No Clear Match synonym will require manual reconciliat" +
            "ion, when the code term text has changed.")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_168577_004")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void ASynonymMigrationWithANoClearMatchSynonymWillRequireManualReconciliationWhenTheCodeTermTextHasChanged_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A synonym migration with a No Clear Match synonym will require manual reconciliat" +
                    "ion, when the code term text has changed.", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_168577_004",
                        "IncreaseTimeout"});
#line 74
this.ScenarioSetup(scenarioInfo);
#line 76
  testRunner.Given(@"a ""Basic"" Coder setup with registered synonym list ""WhoDrugDDEB2 ENG 200703 No Clear Match_WhoDrug"" containing entry ""Core Drug 01|012848 01 007|PRODUCTSYNONYM|PRODUCTSYNONYM:012848 01 007;PRODUCT:012848 01 001;ATC:C09DA;ATC:C09D;ATC:C09;ATC:C|False||Approved|COZAAREX D""", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 77
  testRunner.And("an unactivated synonym list \"WhoDrugDDEB2 ENG 200709 New_Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
  testRunner.When("starting synonym list migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 79
  testRunner.Then("reconciliation is needed for the synonym \"Core Drug 01\" under the category \"No Cl" +
                    "ear Match\" with \"1\" synonym(s) not migrated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A synonym migration with a Path Does Not Exist synonym will require manual reconc" +
            "iliation, given the code path of a term has changed.")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_168577_004b")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void ASynonymMigrationWithAPathDoesNotExistSynonymWillRequireManualReconciliationGivenTheCodePathOfATermHasChanged_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A synonym migration with a Path Does Not Exist synonym will require manual reconc" +
                    "iliation, given the code path of a term has changed.", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_168577_004b",
                        "IncreaseTimeout"});
#line 85
this.ScenarioSetup(scenarioInfo);
#line 87
  testRunner.Given("a \"Basic\" Coder setup with registered synonym list \"MedDRA ENG 11.0 Path Does Not" +
                    " Exist_MedDRA\" containing entry \"PAIN WHILE WALKING|10014860|LLT|LLT:10014860;PT" +
                    ":10014860;HLT:10018013;HLGT:10017998;SOC:10042613|True||Approved|Enterectomy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 88
  testRunner.And("an unactivated synonym list \"MedDRA ENG 12.0 New_Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
  testRunner.When("starting synonym list migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 90
  testRunner.Then("reconciliation is needed for the synonym \"PAIN WHILE WALKING\" under the category " +
                    "\"Path Does Not Exist\" with \"1\" synonym(s) not migrated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute(@"A synonym migration with a No Match synonym will require manual reconciliation, given (only applicable to MedDRA) the Lowest Level Term code changed from Current Term to a Non-Current Term, and Coder will display no data for synonym migration term change details and suggestions given the is no matching current entries.")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_168577_005")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void ASynonymMigrationWithANoMatchSynonymWillRequireManualReconciliationGivenOnlyApplicableToMedDRATheLowestLevelTermCodeChangedFromCurrentTermToANon_CurrentTermAndCoderWillDisplayNoDataForSynonymMigrationTermChangeDetailsAndSuggestionsGivenTheIsNoMatchingCurrentEntries_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"A synonym migration with a No Match synonym will require manual reconciliation, given (only applicable to MedDRA) the Lowest Level Term code changed from Current Term to a Non-Current Term, and Coder will display no data for synonym migration term change details and suggestions given the is no matching current entries.", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_168577_005",
                        "IncreaseTimeout"});
#line 97
this.ScenarioSetup(scenarioInfo);
#line 99
  testRunner.Given("a \"Basic\" Coder setup with registered synonym list \"MedDRA ENG 15.0 No_Match\" con" +
                    "taining entry \"ARMS TINGLE|10000378|PT|PT:10000378;HLT:10064292;HLGT:10064289;SO" +
                    "C:10022117|True||Approved|Extensive limb swelling\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 100
  testRunner.And("an unactivated synonym list \"MedDRA ENG 18.0 New_Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
  testRunner.When("starting synonym list migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 102
  testRunner.Then("reconciliation is needed for the synonym \"ARMS TINGLE\" under the category \"No Mat" +
                    "ch\" with \"1\" synonym(s) declined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 103
  testRunner.And("the No Match synonym \"ARMS TINGLE\" has no suggested term data present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A synonym migration with a Primary SOC Path Change synonym will require manual re" +
            "conciliation, given (only applicable to MedDRA) all alternative paths of a dicti" +
            "onary term are the same, yet its primary path indication has changed.")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_168577_006")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void ASynonymMigrationWithAPrimarySOCPathChangeSynonymWillRequireManualReconciliationGivenOnlyApplicableToMedDRAAllAlternativePathsOfADictionaryTermAreTheSameYetItsPrimaryPathIndicationHasChanged_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A synonym migration with a Primary SOC Path Change synonym will require manual re" +
                    "conciliation, given (only applicable to MedDRA) all alternative paths of a dicti" +
                    "onary term are the same, yet its primary path indication has changed.", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_168577_006",
                        "IncreaseTimeout"});
#line 110
this.ScenarioSetup(scenarioInfo);
#line 112
  testRunner.Given("a \"Basic\" Coder setup with registered synonym list \"MedDRA ENG 15.0 Primary_SOC\" " +
                    "containing entry \"Eyelid Problems|10064976|LLT|LLT:10064976;PT:10034544;HLT:1002" +
                    "7674;HLGT:10022114;SOC:10022117|True||Approved|EYELID HAEMATOMA\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 113
  testRunner.And("an unactivated synonym list \"MedDRA ENG 18.0 New_Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 114
  testRunner.When("starting synonym list migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 115
  testRunner.Then("reconciliation is needed for the synonym \"Eyelid Problems\" under the category \"Pr" +
                    "imary SOC Change\" with \"1\" synonym(s) not migrated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A synonym migration with a Multi Axiality Change synonym will require manual reco" +
            "nciliation, given the term has more than 1 path and the alternative paths have c" +
            "hanged but not the main path")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_168577_007")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void ASynonymMigrationWithAMultiAxialityChangeSynonymWillRequireManualReconciliationGivenTheTermHasMoreThan1PathAndTheAlternativePathsHaveChangedButNotTheMainPath()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A synonym migration with a Multi Axiality Change synonym will require manual reco" +
                    "nciliation, given the term has more than 1 path and the alternative paths have c" +
                    "hanged but not the main path", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_168577_007",
                        "IncreaseTimeout"});
#line 122
this.ScenarioSetup(scenarioInfo);
#line 124
  testRunner.Given("a \"Basic\" Coder setup with registered synonym list \"MedDRA ENG 15.0 Multi_Axialit" +
                    "y\" containing entry \"Broken Face Bone|10006388|LLT|LLT:10006388;PT:10023149;HLT:" +
                    "10040961;HLGT:10005942;SOC:10022117|True||Approved|Broken jaw\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 125
  testRunner.And("an unactivated synonym list \"MedDRA ENG 16.0 New_Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 126
  testRunner.When("starting synonym list migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 127
  testRunner.Then("reconciliation is needed for the synonym \"Broken Face Bone\" under the category \"M" +
                    "ulti Axiality Change\" with \"1\" synonym(s) not migrated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A synonym migration with a No Clear Match synonym will require manual reconciliat" +
            "ion, given Term text has changed.")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_168577_008")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void ASynonymMigrationWithANoClearMatchSynonymWillRequireManualReconciliationGivenTermTextHasChanged_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A synonym migration with a No Clear Match synonym will require manual reconciliat" +
                    "ion, given Term text has changed.", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_168577_008",
                        "IncreaseTimeout"});
#line 134
this.ScenarioSetup(scenarioInfo);
#line 136
  testRunner.Given("a \"Basic\" Coder setup with registered synonym list \"MedDRA JPN 15.1 No_Clear_Matc" +
                    "h\" containing entry \"社会不安障害|10041242|LLT|LLT:10041242;PT:10041250;HLT:10068299;H" +
                    "LGT:10002861;SOC:10037175|True||Approved|社会不安障害\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 137
  testRunner.And("an unactivated synonym list \"MedDRA JPN 16.0 New_Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 138
  testRunner.When("starting synonym list migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 139
  testRunner.Then("reconciliation is needed for the synonym \"社会不安障害\" under the category \"No Clear Ma" +
                    "tch\" with \"1\" synonym(s) not migrated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A synonym migration with a Path Does Not Exist synonym can have a suggestion acce" +
            "pted for migration due to a primary path change")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_168577_009")]
        [NUnit.Framework.Timeout(360000)]
        public virtual void ASynonymMigrationWithAPathDoesNotExistSynonymCanHaveASuggestionAcceptedForMigrationDueToAPrimaryPathChange()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A synonym migration with a Path Does Not Exist synonym can have a suggestion acce" +
                    "pted for migration due to a primary path change", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_168577_009",
                        "IncreaseTimeout_360000"});
#line 146
this.ScenarioSetup(scenarioInfo);
#line 148
  testRunner.Given("a \"Basic\" Coder setup with registered synonym list \"MedDRA ENG 11.0 Path Does Not" +
                    " Exist_MedDRA\" containing entry \"PAIN WHILE WALKING|10014860|LLT|LLT:10014860;PT" +
                    ":10014860;HLT:10018013;HLGT:10017998;SOC:10042613|True||Approved|Enterectomy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 149
  testRunner.And("an unactivated synonym list \"MedDRA ENG 12.0 New_Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
  testRunner.When("starting synonym list migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 151
  testRunner.And("accepting the reconciliation suggestion for the synonym \"PAIN WHILE WALKING\" unde" +
                    "r the category \"Path Does Not Exist\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 152
  testRunner.And("completing synonym migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 153
  testRunner.Then("the synonym \"PAIN WHILE WALKING\" with code \"10014860\" exists after synonym migrat" +
                    "ion is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A synonym migration with a Path Does Not Exist synonym can have a suggestion acce" +
            "pted for migration due to single path change")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_168577_010")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void ASynonymMigrationWithAPathDoesNotExistSynonymCanHaveASuggestionAcceptedForMigrationDueToSinglePathChange()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A synonym migration with a Path Does Not Exist synonym can have a suggestion acce" +
                    "pted for migration due to single path change", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_168577_010",
                        "IncreaseTimeout"});
#line 160
this.ScenarioSetup(scenarioInfo);
#line 162
  testRunner.Given("a \"Basic\" Coder setup with registered synonym list \"WhoDrugDDEB2 ENG 201309 Path " +
                    "Does Not Exist_WhoDrug\" containing entry \"Core Drug 01|009177 01 001|PRODUCT|PRO" +
                    "DUCT:009177 01 001;ATC:V03AX;ATC:V03A;ATC:V03;ATC:V|False||Approved|COZAAREX D\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 163
  testRunner.And("an unactivated synonym list \"WhoDrugDDEB2 ENG 201403 New_Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 164
  testRunner.When("starting synonym list migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 165
  testRunner.And("accepting the reconciliation suggestion for the synonym \"Core Drug 01\" under the " +
                    "category \"Path Does Not Exist\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 166
  testRunner.And("completing synonym migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 167
  testRunner.Then("the synonym \"Core Drug 01\" with code \"009177 01 001\" exists after synonym migrati" +
                    "on is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A synonym migration with a No Match synonym will not keep the synonym after migra" +
            "tion.")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_168577_011")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void ASynonymMigrationWithANoMatchSynonymWillNotKeepTheSynonymAfterMigration_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A synonym migration with a No Match synonym will not keep the synonym after migra" +
                    "tion.", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_168577_011",
                        "IncreaseTimeout"});
#line 174
this.ScenarioSetup(scenarioInfo);
#line 176
  testRunner.Given("a \"Basic\" Coder setup with registered synonym list \"MedDRA ENG 15.0 No_Match\" con" +
                    "taining entry \"ARMS TINGLE|10000378|PT|PT:10000378;HLT:10064292;HLGT:10064289;SO" +
                    "C:10022117|True||Approved|Extensive limb swelling\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 177
  testRunner.And("an unactivated synonym list \"MedDRA ENG 18.0 New_Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 178
  testRunner.When("starting synonym list migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 179
  testRunner.And("completing synonym migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 180
  testRunner.Then("the synonym \"ARMS TINGLE\" does not exist after synonym migration is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A synonym migration with a Primary SOC Change synonym can have a suggestion accep" +
            "ted for migration")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_168577_012")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void ASynonymMigrationWithAPrimarySOCChangeSynonymCanHaveASuggestionAcceptedForMigration()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A synonym migration with a Primary SOC Change synonym can have a suggestion accep" +
                    "ted for migration", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_168577_012",
                        "IncreaseTimeout"});
#line 187
this.ScenarioSetup(scenarioInfo);
#line 189
  testRunner.Given("a \"Basic\" Coder setup with registered synonym list \"MedDRA ENG 15.0 Primary_SOC\" " +
                    "containing entry \"Tear Term|10014472|LLT|LLT:10014472;PT:10016674;HLT:10028914;H" +
                    "LGT:10019381;SOC:10021881|True||Approved|Meniscus tear\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 190
  testRunner.And("an unactivated synonym list \"MedDRA ENG 18.0 New_Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 191
  testRunner.When("starting synonym list migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 192
  testRunner.And("accepting the reconciliation suggestion for the synonym \"Tear Term\" under the cat" +
                    "egory \"Primary SOC Change\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 193
  testRunner.And("completing synonym migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 194
  testRunner.Then("the synonym \"Tear Term\" with code \"10014472\" exists after synonym migration is co" +
                    "mpleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A synonym migration with a Multi Axiality Change synonym can have a suggestion ac" +
            "cepted for migration")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_168577_013")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void ASynonymMigrationWithAMultiAxialityChangeSynonymCanHaveASuggestionAcceptedForMigration()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A synonym migration with a Multi Axiality Change synonym can have a suggestion ac" +
                    "cepted for migration", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_168577_013",
                        "IncreaseTimeout"});
#line 201
this.ScenarioSetup(scenarioInfo);
#line 203
  testRunner.Given("a \"Basic\" Coder setup with registered synonym list \"MedDRA ENG 15.0 Multi_Axialit" +
                    "y\" containing entry \"Broken Face Bone|10006388|LLT|LLT:10006388;PT:10023149;HLT:" +
                    "10040961;HLGT:10005942;SOC:10022117|True||Approved|Broken jaw\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 204
  testRunner.And("an unactivated synonym list \"MedDRA ENG 16.0 New_Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 205
  testRunner.When("starting synonym list migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 206
  testRunner.And("accepting the reconciliation suggestion for the synonym \"Broken Face Bone\" under " +
                    "the category \"Multi Axiality Change\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 207
  testRunner.And("completing synonym migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 208
  testRunner.Then("the synonym \"Broken Face Bone\" with code \"10006388\" exists after synonym migratio" +
                    "n is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A synonym migration with a No Clear Match synonym can have a suggestion accepted " +
            "for migration")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_168577_014")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void ASynonymMigrationWithANoClearMatchSynonymCanHaveASuggestionAcceptedForMigration()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A synonym migration with a No Clear Match synonym can have a suggestion accepted " +
                    "for migration", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_168577_014",
                        "IncreaseTimeout"});
#line 215
this.ScenarioSetup(scenarioInfo);
#line 217
  testRunner.Given("a \"Basic\" Coder setup with registered synonym list \"MedDRA JPN 15.1 No_Clear_Matc" +
                    "h\" containing entry \"社会不安障害|10041242|LLT|LLT:10041242;PT:10041250;HLT:10068299;H" +
                    "LGT:10002861;SOC:10037175|True||Approved|社会不安障害\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 218
  testRunner.And("an unactivated synonym list \"MedDRA JPN 16.0 New_Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 219
  testRunner.When("starting synonym list migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 220
  testRunner.And("accepting the reconciliation suggestion for the synonym \"社会不安障害\" under the catego" +
                    "ry \"No Clear Match\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 221
  testRunner.And("completing synonym migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 222
  testRunner.Then("the synonym \"社会不安障害\" with code \"10041242\" exists after synonym migration is compl" +
                    "eted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("During synonym reconciliation a synonym can be dropped from Not Migrated section " +
            "and declined")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_168577_015")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void DuringSynonymReconciliationASynonymCanBeDroppedFromNotMigratedSectionAndDeclined()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("During synonym reconciliation a synonym can be dropped from Not Migrated section " +
                    "and declined", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_168577_015",
                        "IncreaseTimeout"});
#line 229
this.ScenarioSetup(scenarioInfo);
#line 231
  testRunner.Given("a \"Basic\" Coder setup with registered synonym list \"MedDRA ENG 15.0 With_Synonym\"" +
                    " containing entry \"Tear Term|10072105|LLT|LLT:10072105;PT:10053777;HLT:10027686;" +
                    "HLGT:10005942;SOC:10022117|True||Approved|Meniscus tear\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 232
  testRunner.And("an unactivated synonym list \"MedDRA ENG 16.0 New_Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 233
  testRunner.When("starting synonym list migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 234
  testRunner.And("dropping the reconciliation suggestion for the synonym \"Tear Term\" under the cate" +
                    "gory \"Path Does Not Exist\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 235
  testRunner.Then("the synonym \"Tear Term\" falls under the category \"Path Does Not Exist\" with \"1\" s" +
                    "ynonym(s) declined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 236
  testRunner.When("completing synonym migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 237
  testRunner.Then("the synonym \"Tear Term\" does not exist after synonym migration is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("During synonym reconciliation a synonym that was dropped can still be accepted fo" +
            "r migration")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_168577_016")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void DuringSynonymReconciliationASynonymThatWasDroppedCanStillBeAcceptedForMigration()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("During synonym reconciliation a synonym that was dropped can still be accepted fo" +
                    "r migration", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_168577_016",
                        "IncreaseTimeout"});
#line 244
this.ScenarioSetup(scenarioInfo);
#line 246
  testRunner.Given("a \"Basic\" Coder setup with registered synonym list \"MedDRA ENG 15.0 With_Synonym\"" +
                    " containing entry \"Tear Term|10072105|LLT|LLT:10072105;PT:10053777;HLT:10027686;" +
                    "HLGT:10005942;SOC:10022117|True||Approved|Meniscus tear\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 247
  testRunner.And("an unactivated synonym list \"MedDRA ENG 16.0 New_Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 248
  testRunner.When("starting synonym list migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 249
  testRunner.And("dropping the reconciliation suggestion for the synonym \"Tear Term\" under the cate" +
                    "gory \"Path Does Not Exist\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 250
  testRunner.And("accepting the declined synonym \"Tear Term\" under the category \"Path Does Not Exis" +
                    "t\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 251
  testRunner.Then("the synonym \"Tear Term\" falls under the category \"Path Does Not Exist\" with \"1\" s" +
                    "ynonym(s) migrated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 252
  testRunner.When("completing synonym migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 253
  testRunner.Then("the synonym \"Tear Term\" with code \"10072105\" exists after synonym migration is co" +
                    "mpleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("During synonym reconciliation, containing a category with multiple synonyms, when" +
            " a synonym is dropped only 1 synonym is declined")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_168577_017")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void DuringSynonymReconciliationContainingACategoryWithMultipleSynonymsWhenASynonymIsDroppedOnly1SynonymIsDeclined()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("During synonym reconciliation, containing a category with multiple synonyms, when" +
                    " a synonym is dropped only 1 synonym is declined", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_168577_017",
                        "IncreaseTimeout"});
#line 260
this.ScenarioSetup(scenarioInfo);
#line 262
  testRunner.Given(@"a ""Basic"" Coder setup with registered synonym list ""MedDRA ENG 15.0 With_Multiple_Synonyms"" containing entry ""Tear Term|10072105|LLT|LLT:10072105;PT:10053777;HLT:10027686;HLGT:10005942;SOC:10022117|True||Approved|Meniscus tear~Broken Face Bone|10006388|LLT|LLT:10006388;PT:10023149;HLT:10040961;HLGT:10005942;SOC:10022117|True||Approved|Broken jaw""", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 263
  testRunner.And("an unactivated synonym list \"MedDRA ENG 16.0 New_Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 264
  testRunner.When("starting synonym list migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 265
  testRunner.And("dropping the reconciliation suggestion for the synonym \"Tear Term\" under the cate" +
                    "gory \"Path Does Not Exist\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 266
  testRunner.Then("the synonym \"Tear Term\" falls under the category \"Path Does Not Exist\" with \"1\" s" +
                    "ynonym(s) declined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 267
  testRunner.And("the synonym \"Broken Face Bone\" falls under the category \"Multi Axiality Change\" w" +
                    "ith \"1\" synonym(s) not migrated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("During synonym reconciliation, containing a category with multiple synonyms with " +
            "the configuration option Force Primary Path enabled, a user can select Accept Ne" +
            "w Version For All to accept all primary path suggestions")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_168577_020")]
        [NUnit.Framework.Timeout(900000)]
        public virtual void DuringSynonymReconciliationContainingACategoryWithMultipleSynonymsWithTheConfigurationOptionForcePrimaryPathEnabledAUserCanSelectAcceptNewVersionForAllToAcceptAllPrimaryPathSuggestions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("During synonym reconciliation, containing a category with multiple synonyms with " +
                    "the configuration option Force Primary Path enabled, a user can select Accept Ne" +
                    "w Version For All to accept all primary path suggestions", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_168577_020",
                        "IncreaseTimeout_900000"});
#line 274
this.ScenarioSetup(scenarioInfo);
#line 276
  testRunner.Given(@"a ""Basic"" Coder setup with registered synonym list ""MedDRA ENG 15.0 With_Multiple_Synonyms"" containing entry ""Tear Term|10072105|LLT|LLT:10072105;PT:10053777;HLT:10027686;HLGT:10005942;SOC:10022117|True||Approved|Meniscus tear~Broken Face Bone|10017097|LLT|LLT:10017097;PT:10016450;HLT:10024957;HLGT:10005942;SOC:10022117|True||Approved|Broken jaw""", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 277
  testRunner.And("an unactivated synonym list \"MedDRA ENG 18.0 New_Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 278
  testRunner.When("starting synonym list migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 279
  testRunner.And("accepting the reconciliation suggestions for all the new synonym versions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 280
  testRunner.Then("all synonyms are ready for migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("During synonym reconciliation, containing a category with multiple synonyms with " +
            "the configuration option Force Primary Path disabled, a user can select Accept A" +
            "ll Suggestions to accept only single path suggestions")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_168577_021")]
        [NUnit.Framework.Timeout(900000)]
        public virtual void DuringSynonymReconciliationContainingACategoryWithMultipleSynonymsWithTheConfigurationOptionForcePrimaryPathDisabledAUserCanSelectAcceptAllSuggestionsToAcceptOnlySinglePathSuggestions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("During synonym reconciliation, containing a category with multiple synonyms with " +
                    "the configuration option Force Primary Path disabled, a user can select Accept A" +
                    "ll Suggestions to accept only single path suggestions", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_168577_021",
                        "IncreaseTimeout_900000"});
#line 287
this.ScenarioSetup(scenarioInfo);
#line 289
  testRunner.Given(@"a ""No Enforced Primary Path"" Coder setup with registered synonym list ""MedDRA ENG 15.0 With_Multiple_Synonyms"" containing entry ""Tear Term|10019911|LLT|LLT:10019911;PT:10060954;HLT:10000072;HLGT:10000073;SOC:10017947|True||Approved|Meniscus tear~Broken Face Bone|10009588|LLT|LLT:10009588;PT:10039579;HLT:10046293;HLGT:10005942;SOC:10022117|True||Approved|Broken jaw""", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 290
  testRunner.And("an unactivated synonym list \"MedDRA ENG 18.0 New_Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 291
  testRunner.When("starting synonym list migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 292
  testRunner.And("accepting the reconciliation suggestions for all the new synonym versions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 293
  testRunner.Then("the single path synonym \"Tear Term\" under the category \"Path Does Not Exist\" is r" +
                    "eady for migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 294
  testRunner.And("the non-single path synonym \"Broken Face Bone\" under the category \"Path Does Not " +
                    "Exist\" is not ready for migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("During synonym reconciliation, containing a category with multiple synonyms with " +
            "the configuration option, a user can select Accept All Suggestions to accept onl" +
            "y single path suggestions")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_168577_021b")]
        [NUnit.Framework.Timeout(900000)]
        public virtual void DuringSynonymReconciliationContainingACategoryWithMultipleSynonymsWithTheConfigurationOptionAUserCanSelectAcceptAllSuggestionsToAcceptOnlySinglePathSuggestions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("During synonym reconciliation, containing a category with multiple synonyms with " +
                    "the configuration option, a user can select Accept All Suggestions to accept onl" +
                    "y single path suggestions", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_168577_021b",
                        "IncreaseTimeout_900000"});
#line 301
this.ScenarioSetup(scenarioInfo);
#line 303
  testRunner.Given(@"a ""Basic"" Coder setup with registered synonym list ""WhoDrugDDEB2 ENG 201309 MultipleSynonyms"" containing entry ""Tear Term|009177 01 001|PRODUCT|PRODUCT:009177 01 001;ATC:V03AX;ATC:V03A;ATC:V03;ATC:V|False||Approved|COZAAREX D~Broken Face Bone|000217 01 001|PRODUCT|PRODUCT:000217 01 001;ATC:N02CA;ATC:N02C;ATC:N02;ATC:N|False||Approved|COZAAREX D""", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 304
  testRunner.And("an unactivated synonym list \"WhoDrugDDEB2 ENG 201403 NewList\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 305
  testRunner.When("starting synonym list migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 306
  testRunner.And("accepting the reconciliation suggestions for all the new synonym versions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 307
  testRunner.Then("the single path synonym \"Tear Term\" under the category \"Path Does Not Exist\" is r" +
                    "eady for migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 308
  testRunner.And("the non-single path synonym \"Broken Face Bone\" under the category \"Multi Axiality" +
                    " Change\" is not ready for migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("During synonym reconciliation, a synonym that has multiple level changes, the sys" +
            "tem will display each line difference in the Prior Term Path, Upgraded Term Path" +
            ", and Suggested Term Path")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_168577_022")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void DuringSynonymReconciliationASynonymThatHasMultipleLevelChangesTheSystemWillDisplayEachLineDifferenceInThePriorTermPathUpgradedTermPathAndSuggestedTermPath()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("During synonym reconciliation, a synonym that has multiple level changes, the sys" +
                    "tem will display each line difference in the Prior Term Path, Upgraded Term Path" +
                    ", and Suggested Term Path", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_168577_022",
                        "IncreaseTimeout"});
#line 315
this.ScenarioSetup(scenarioInfo);
#line 317
  testRunner.Given("a \"Basic\" Coder setup with registered synonym list \"MedDRA ENG 15.0 With_Synonym\"" +
                    " containing entry \"Tear Term|10029922|LLT|LLT:10029922;PT:10056390;HLT:10026907;" +
                    "HLGT:10026906;SOC:10036585|True||Approved|Meniscus tear\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 318
  testRunner.And("an unactivated synonym list \"MedDRA ENG 18.0 New_Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 319
  testRunner.When("starting synonym list migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 320
  testRunner.Then("the synonym \"Tear Term\" under the category \"Primary SOC Change\" has a line differ" +
                    "ence for each changed level in the Prior Term and Upgraded Term Path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 321
  testRunner.And("the synonym \"Tear Term\" under the category \"Primary SOC Change\" has a line differ" +
                    "ence for each changed level in the Prior Term and Suggested Term Path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("During synonym reconciliation, containing a category with twenty synonyms, a user" +
            " can Accept fifteen synonym suggestions, drop five suggestions, and the system w" +
            "ill display each in the migration column")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_74551_023_a")]
        [NUnit.Framework.Timeout(900000)]
        public virtual void DuringSynonymReconciliationContainingACategoryWithTwentySynonymsAUserCanAcceptFifteenSynonymSuggestionsDropFiveSuggestionsAndTheSystemWillDisplayEachInTheMigrationColumn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("During synonym reconciliation, containing a category with twenty synonyms, a user" +
                    " can Accept fifteen synonym suggestions, drop five suggestions, and the system w" +
                    "ill display each in the migration column", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_74551_023_a",
                        "IncreaseTimeout_900000"});
#line 327
this.ScenarioSetup(scenarioInfo);
#line 329
  testRunner.Given("a \"Basic\" Coder setup with registered synonym list \"MedDRA ENG 15.0 With_Synonym\"" +
                    " containing entry \"Tear Term|10058730|LLT|LLT:10058730;PT:10058730;HLT:10003057;" +
                    "HLGT:10001316;SOC:10018065|True||Approved|Meniscus tear~Broken Face Bone|1000958" +
                    "9|LLT|LLT:10009589;PT:10049946;HLT:10041574;HLGT:10005942;SOC:10022117|True||App" +
                    "roved|Meniscus tear~Tired Eyes|10059450|LLT|LLT:10059450;PT:10059450;HLT:1006291" +
                    "6;HLGT:10046828;SOC:10038604|True||Approved|Meniscus tear~Liver Damage|10016475|" +
                    "LLT|LLT:10016475;PT:10016845;HLT:10008429;HLGT:10027664;SOC:10010331|True||Appro" +
                    "ved|Meniscus tear~Fractured Collarbone|10049164|LLT|LLT:10049164;PT:10049164;HLT" +
                    ":10041574;HLGT:10005942;SOC:10022117|True||Approved|Meniscus tear~Stomach Issues" +
                    "|10028248|LLT|LLT:10028248;PT:10028245;HLT:10052785;HLGT:10012303;SOC:10029205|T" +
                    "rue||Approved|Meniscus tear~Hunger Pains|10003025|LLT|LLT:10003025;PT:10061428;H" +
                    "LT:10003022;HLGT:10003018;SOC:10027433|True||Approved|Meniscus tear~Speaking Pro" +
                    "blems|10041471|LLT|LLT:10041471;PT:10041466;HLT:10041460;HLGT:10029305;SOC:10029" +
                    "205|True||Approved|Meniscus tear~Foot Problems|10000596|LLT|LLT:10000596;PT:1000" +
                    "0596;HLT:10040834;HLGT:10040789;SOC:10010331|True||Approved|Meniscus tear~Seeing" +
                    " Stars|10003052|LLT|LLT:10003052;PT:10059005;HLT:10003057;HLGT:10001316;SOC:1001" +
                    "8065|True||Approved|Meniscus tear~Back Pains|10049953|LLT|LLT:10049953;PT:100499" +
                    "46;HLT:10041574;HLGT:10005942;SOC:10022117|True||Approved|Meniscus tear~Stomach " +
                    "Tear|10034430|LLT|LLT:10034430;PT:10017815;HLT:10017847;HLGT:10018027;SOC:100179" +
                    "47|True||Approved|Meniscus tear~Rib Fracture|10050149|LLT|LLT:10050149;PT:100391" +
                    "17;HLT:10043467;HLGT:10005942;SOC:10022117|True||Approved|Meniscus tear~Sore Ton" +
                    "gue|10043989|LLT|LLT:10043989;PT:10057371;HLT:10031021;HLGT:10031013;SOC:1001794" +
                    "7|True||Approved|Meniscus tear~Bone Bruise|10064210|LLT|LLT:10064210;PT:10064210" +
                    ";HLT:10027677;HLGT:10005942;SOC:10022117|True||Approved|Meniscus tear~Adverse Ev" +
                    "ent|10009591|LLT|LLT:10009591;PT:10049946;HLT:10041574;HLGT:10005942;SOC:1002211" +
                    "7|True||Approved|Meniscus tear~Jaw Shattered|10028249|LLT|LLT:10028249;PT:100231" +
                    "49;HLT:10040961;HLGT:10005942;SOC:10022117|True||Approved|Meniscus tear~Eyes Rol" +
                    "ling|10066681|LLT|LLT:10066681;PT:10046851;HLT:10022953;HLGT:10021877;SOC:100159" +
                    "19|True||Approved|Meniscus tear~Collapsed Lung|10022612|LLT|LLT:10022612;PT:1002" +
                    "2611;HLT:10033979;HLGT:10024967;SOC:10038738|True||Approved|Meniscus tear~Fungus" +
                    " Appearing|10066200|LLT|LLT:10066200;PT:10060876;HLT:10038431;HLGT:10038360;SOC:" +
                    "10010331|True||Approved|Meniscus tear\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 330
  testRunner.And("an unactivated synonym list \"MedDRA ENG 18.0 New_Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 331
  testRunner.When("starting synonym list migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 332
  testRunner.And("accepting the reconciliation suggestion for \"15\" synonyms under the category \"Mul" +
                    "ti Axiality Change\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 333
  testRunner.And("dropping the reconciliation suggestion for \"5\" synonyms under the category \"Multi" +
                    " Axiality Change\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 334
  testRunner.Then("the synonyms fall under the category \"Multi Axiality Change\" with \"15\" synonym(s)" +
                    " migrated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 335
  testRunner.And("the synonyms fall under the category \"Multi Axiality Change\" with \"5\" synonym(s) " +
                    "declined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("During synonym reconciliation, containing a category with twenty synonyms, a user" +
            " can drop fifteen synonyms that are ready for migration")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_74551_023_b")]
        [NUnit.Framework.Timeout(900000)]
        public virtual void DuringSynonymReconciliationContainingACategoryWithTwentySynonymsAUserCanDropFifteenSynonymsThatAreReadyForMigration()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("During synonym reconciliation, containing a category with twenty synonyms, a user" +
                    " can drop fifteen synonyms that are ready for migration", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_74551_023_b",
                        "IncreaseTimeout_900000"});
#line 341
this.ScenarioSetup(scenarioInfo);
#line 343
  testRunner.Given("a \"Basic\" Coder setup with registered synonym list \"MedDRA ENG 15.0 With_Synonym\"" +
                    " containing entry \"Tear Term|10058730|LLT|LLT:10058730;PT:10058730;HLT:10003057;" +
                    "HLGT:10001316;SOC:10018065|True||Approved|Meniscus tear~Broken Face Bone|1000958" +
                    "9|LLT|LLT:10009589;PT:10049946;HLT:10041574;HLGT:10005942;SOC:10022117|True||App" +
                    "roved|Meniscus tear~Tired Eyes|10059450|LLT|LLT:10059450;PT:10059450;HLT:1006291" +
                    "6;HLGT:10046828;SOC:10038604|True||Approved|Meniscus tear~Liver Damage|10016475|" +
                    "LLT|LLT:10016475;PT:10016845;HLT:10008429;HLGT:10027664;SOC:10010331|True||Appro" +
                    "ved|Meniscus tear~Fractured Collarbone|10049164|LLT|LLT:10049164;PT:10049164;HLT" +
                    ":10041574;HLGT:10005942;SOC:10022117|True||Approved|Meniscus tear~Stomach Issues" +
                    "|10028248|LLT|LLT:10028248;PT:10028245;HLT:10052785;HLGT:10012303;SOC:10029205|T" +
                    "rue||Approved|Meniscus tear~Hunger Pains|10003025|LLT|LLT:10003025;PT:10061428;H" +
                    "LT:10003022;HLGT:10003018;SOC:10027433|True||Approved|Meniscus tear~Speaking Pro" +
                    "blems|10041471|LLT|LLT:10041471;PT:10041466;HLT:10041460;HLGT:10029305;SOC:10029" +
                    "205|True||Approved|Meniscus tear~Foot Problems|10000596|LLT|LLT:10000596;PT:1000" +
                    "0596;HLT:10040834;HLGT:10040789;SOC:10010331|True||Approved|Meniscus tear~Seeing" +
                    " Stars|10003052|LLT|LLT:10003052;PT:10059005;HLT:10003057;HLGT:10001316;SOC:1001" +
                    "8065|True||Approved|Meniscus tear~Back Pains|10049953|LLT|LLT:10049953;PT:100499" +
                    "46;HLT:10041574;HLGT:10005942;SOC:10022117|True||Approved|Meniscus tear~Stomach " +
                    "Tear|10034430|LLT|LLT:10034430;PT:10017815;HLT:10017847;HLGT:10018027;SOC:100179" +
                    "47|True||Approved|Meniscus tear~Rib Fracture|10050149|LLT|LLT:10050149;PT:100391" +
                    "17;HLT:10043467;HLGT:10005942;SOC:10022117|True||Approved|Meniscus tear~Sore Ton" +
                    "gue|10043989|LLT|LLT:10043989;PT:10057371;HLT:10031021;HLGT:10031013;SOC:1001794" +
                    "7|True||Approved|Meniscus tear~Bone Bruise|10064210|LLT|LLT:10064210;PT:10064210" +
                    ";HLT:10027677;HLGT:10005942;SOC:10022117|True||Approved|Meniscus tear~Adverse Ev" +
                    "ent|10009591|LLT|LLT:10009591;PT:10049946;HLT:10041574;HLGT:10005942;SOC:1002211" +
                    "7|True||Approved|Meniscus tear~Jaw Shattered|10028249|LLT|LLT:10028249;PT:100231" +
                    "49;HLT:10040961;HLGT:10005942;SOC:10022117|True||Approved|Meniscus tear~Eyes Rol" +
                    "ling|10066681|LLT|LLT:10066681;PT:10046851;HLT:10022953;HLGT:10021877;SOC:100159" +
                    "19|True||Approved|Meniscus tear~Collapsed Lung|10022612|LLT|LLT:10022612;PT:1002" +
                    "2611;HLT:10033979;HLGT:10024967;SOC:10038738|True||Approved|Meniscus tear~Fungus" +
                    " Appearing|10066200|LLT|LLT:10066200;PT:10060876;HLT:10038431;HLGT:10038360;SOC:" +
                    "10010331|True||Approved|Meniscus tear\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 344
  testRunner.And("an unactivated synonym list \"MedDRA ENG 18.0 New_Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 345
  testRunner.When("starting synonym list migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 346
  testRunner.And("accepting the reconciliation suggestions for all the new synonym versions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 347
  testRunner.And("dropping \"15\" migrated synonyms under the category \"Multi Axiality Change\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 348
  testRunner.Then("the synonyms fall under the category \"Multi Axiality Change\" with \"15\" synonym(s)" +
                    " declined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 349
  testRunner.And("the synonyms fall under the category \"Multi Axiality Change\" with \"5\" synonym(s) " +
                    "migrated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("During synonym reconciliation, containing a category with twenty synonyms, a user" +
            " can accept fifteen synonyms that were dropped")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_74551_023_c")]
        [NUnit.Framework.Timeout(900000)]
        public virtual void DuringSynonymReconciliationContainingACategoryWithTwentySynonymsAUserCanAcceptFifteenSynonymsThatWereDropped()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("During synonym reconciliation, containing a category with twenty synonyms, a user" +
                    " can accept fifteen synonyms that were dropped", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_74551_023_c",
                        "IncreaseTimeout_900000"});
#line 355
this.ScenarioSetup(scenarioInfo);
#line 357
  testRunner.Given("a \"Basic\" Coder setup with registered synonym list \"MedDRA ENG 15.0 With_Synonym\"" +
                    " containing entry \"Tear Term|10058730|LLT|LLT:10058730;PT:10058730;HLT:10003057;" +
                    "HLGT:10001316;SOC:10018065|True||Approved|Meniscus tear~Broken Face Bone|1000958" +
                    "9|LLT|LLT:10009589;PT:10049946;HLT:10041574;HLGT:10005942;SOC:10022117|True||App" +
                    "roved|Meniscus tear~Tired Eyes|10059450|LLT|LLT:10059450;PT:10059450;HLT:1006291" +
                    "6;HLGT:10046828;SOC:10038604|True||Approved|Meniscus tear~Liver Damage|10016475|" +
                    "LLT|LLT:10016475;PT:10016845;HLT:10008429;HLGT:10027664;SOC:10010331|True||Appro" +
                    "ved|Meniscus tear~Fractured Collarbone|10049164|LLT|LLT:10049164;PT:10049164;HLT" +
                    ":10041574;HLGT:10005942;SOC:10022117|True||Approved|Meniscus tear~Stomach Issues" +
                    "|10028248|LLT|LLT:10028248;PT:10028245;HLT:10052785;HLGT:10012303;SOC:10029205|T" +
                    "rue||Approved|Meniscus tear~Hunger Pains|10003025|LLT|LLT:10003025;PT:10061428;H" +
                    "LT:10003022;HLGT:10003018;SOC:10027433|True||Approved|Meniscus tear~Speaking Pro" +
                    "blems|10041471|LLT|LLT:10041471;PT:10041466;HLT:10041460;HLGT:10029305;SOC:10029" +
                    "205|True||Approved|Meniscus tear~Foot Problems|10000596|LLT|LLT:10000596;PT:1000" +
                    "0596;HLT:10040834;HLGT:10040789;SOC:10010331|True||Approved|Meniscus tear~Seeing" +
                    " Stars|10003052|LLT|LLT:10003052;PT:10059005;HLT:10003057;HLGT:10001316;SOC:1001" +
                    "8065|True||Approved|Meniscus tear~Back Pains|10049953|LLT|LLT:10049953;PT:100499" +
                    "46;HLT:10041574;HLGT:10005942;SOC:10022117|True||Approved|Meniscus tear~Stomach " +
                    "Tear|10034430|LLT|LLT:10034430;PT:10017815;HLT:10017847;HLGT:10018027;SOC:100179" +
                    "47|True||Approved|Meniscus tear~Rib Fracture|10050149|LLT|LLT:10050149;PT:100391" +
                    "17;HLT:10043467;HLGT:10005942;SOC:10022117|True||Approved|Meniscus tear~Sore Ton" +
                    "gue|10043989|LLT|LLT:10043989;PT:10057371;HLT:10031021;HLGT:10031013;SOC:1001794" +
                    "7|True||Approved|Meniscus tear~Bone Bruise|10064210|LLT|LLT:10064210;PT:10064210" +
                    ";HLT:10027677;HLGT:10005942;SOC:10022117|True||Approved|Meniscus tear~Adverse Ev" +
                    "ent|10009591|LLT|LLT:10009591;PT:10049946;HLT:10041574;HLGT:10005942;SOC:1002211" +
                    "7|True||Approved|Meniscus tear~Jaw Shattered|10028249|LLT|LLT:10028249;PT:100231" +
                    "49;HLT:10040961;HLGT:10005942;SOC:10022117|True||Approved|Meniscus tear~Eyes Rol" +
                    "ling|10066681|LLT|LLT:10066681;PT:10046851;HLT:10022953;HLGT:10021877;SOC:100159" +
                    "19|True||Approved|Meniscus tear~Collapsed Lung|10022612|LLT|LLT:10022612;PT:1002" +
                    "2611;HLT:10033979;HLGT:10024967;SOC:10038738|True||Approved|Meniscus tear~Fungus" +
                    " Appearing|10066200|LLT|LLT:10066200;PT:10060876;HLT:10038431;HLGT:10038360;SOC:" +
                    "10010331|True||Approved|Meniscus tear\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 358
  testRunner.And("an unactivated synonym list \"MedDRA ENG 18.0 New_Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 359
  testRunner.When("starting synonym list migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 360
  testRunner.And("accepting the reconciliation suggestions for all the new synonym versions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 361
  testRunner.And("dropping \"20\" migrated synonyms under the category \"Multi Axiality Change\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 362
  testRunner.And("accepting \"15\" declined synonyms under the category \"Multi Axiality Change\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 363
  testRunner.Then("the synonyms fall under the category \"Multi Axiality Change\" with \"15\" synonym(s)" +
                    " migrated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 364
  testRunner.And("the synonyms fall under the category \"Multi Axiality Change\" with \"5\" synonym(s) " +
                    "declined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("During synonym reconciliation for JDrug english, a term during synonym migration " +
            "will reconcile to the No Clear Match category")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_37232_001_a")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void DuringSynonymReconciliationForJDrugEnglishATermDuringSynonymMigrationWillReconcileToTheNoClearMatchCategory()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("During synonym reconciliation for JDrug english, a term during synonym migration " +
                    "will reconcile to the No Clear Match category", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_37232_001_a",
                        "IncreaseTimeout"});
#line 371
this.ScenarioSetup(scenarioInfo);
#line 373
  testRunner.Given(@"a ""Basic"" Coder setup with registered synonym list ""JDrug ENG 2011H2 With_Synonym"" containing entry ""Adverse Event 1|2649717|DrugName|DrugName:2649717;Category:6;PreferredName:2649717;DetailedClass:2649;LowLevelClass:264;MidLevelClass:26;HighLevelClass:2|False||Approved|Adverse Event 1""", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 374
  testRunner.And("an unactivated synonym list \"JDrug ENG 2014H2 New_Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 375
  testRunner.When("starting synonym list migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 376
  testRunner.Then("the synonym \"Adverse Event 1\" falls under the category \"No Clear Match\" with \"1\" " +
                    "synonym(s) not migrated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("During synonym reconciliation for JDrug japanese, a term during synonym migration" +
            " will not need reconiliation")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_37232_001_b")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void DuringSynonymReconciliationForJDrugJapaneseATermDuringSynonymMigrationWillNotNeedReconiliation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("During synonym reconciliation for JDrug japanese, a term during synonym migration" +
                    " will not need reconiliation", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_37232_001_b",
                        "IncreaseTimeout"});
#line 383
this.ScenarioSetup(scenarioInfo);
#line 385
  testRunner.Given(@"a ""Basic"" Coder setup with registered synonym list ""JDrug JPN 2011H2 With_Synonym"" containing entry ""んの咳|2649717|DrugName|DrugName:2649717;Category:6;PreferredName:2649717;DetailedClass:2649;LowLevelClass:264;MidLevelClass:26;HighLevelClass:2|False||Approved|んの咳""", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 386
  testRunner.And("an unactivated synonym list \"JDrug JPN 2014H2 New_Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 387
  testRunner.When("starting synonym list migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 388
  testRunner.Then("synonym list migration is completed with \"1\" synonym and no reconciliation is nee" +
                    "ded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
