// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Coder.RegressionTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("This feature will verify that Coder will display Task Property & Assignments info" +
        "rmation for a term.")]
    [NUnit.Framework.CategoryAttribute("specTaskProperties.feature")]
    [NUnit.Framework.CategoryAttribute("CoderCore")]
    public partial class ThisFeatureWillVerifyThatCoderWillDisplayTaskPropertyAssignmentsInformationForATerm_Feature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "specTaskProperties.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "This feature will verify that Coder will display Task Property & Assignments info" +
                    "rmation for a term.", "\r\n_ The following Task Property attributes are needed to be available to the clie" +
                    "nt in order to obtain information about a term:\r\n\r\n Dictionary Property informat" +
                    "ion   Source System Property information   Coding Status Property information\r\n " +
                    "_______________________________   __________________________________   _________" +
                    "_________________________\r\n Medical Dictionary                Source System     " +
                    "                   Coding Status\r\n Segment                           Locale     " +
                    "                          Workflow\r\n Dictionary Level                  Study Nam" +
                    "e                           Creation Date\r\n Verbatim Term                     Co" +
                    "nnection URI                       Auto Code Date\r\n Priority                    " +
                    "      File OID\r\n Locale                            Protocol Number\r\n UUID       " +
                    "                       Protocol Name\r\n\r\nSegment: This refers to the client divis" +
                    "ion/segment that contains coding data from a collection of studies; a Segment ca" +
                    "n be equated to an iMedidata Study Group which contains these studies.\r\nDictiona" +
                    "ry Level: The level of the verbatim or EDC task submission.\r\nVerbatim Term: The " +
                    "verbatim text.\r\nPriority: [1_255] Priority is defined in Rave and can represent " +
                    "a \"true\" priority or can be a way to subset source data types. Priority is defin" +
                    "ed on the form level. For example, all Rave Adverse Events (AE) forms can be set" +
                    " to Priority 2, Rave Conmeds Priority 3, and Rave Medical History Terms Priority" +
                    " 4. You can also have all AEs, Conmeds, and Medical History Terms for one study " +
                    "set to Priority 1, and all AEs, Conmeds, and Medical History Terms for another s" +
                    "tudy set to Priority 2. This number displays in the Task page in Coder for any v" +
                    "erbatim term entered in this form. For example, if AE form =1, and the verbatim " +
                    "term \"headache\" is entered in this form, this number displays in the Task page f" +
                    "or this verbatim term. Tip: The Priority field can be used to search for a form " +
                    "in Coder. This is a good way to determine what form the data is from. Make sure " +
                    "you are consistent with your numbering.\r\nUUID: A unique identifier for each verb" +
                    "atim task; only present for verbatim submitted from Rave 2013.4.0 sites and abov" +
                    "e.\r\n\r\nStudy Name: The name of the verbatim term\'s study.\r\nConnection URI: The ba" +
                    "se url for source system.\r\nFile OID: A source system submits terms to Coder thro" +
                    "ugh the transmission of ODM_XML formatted files, which contain the verbatim info" +
                    "rmation. The File OID is the unique identifier for the request.\r\nProtocol Number" +
                    ": Maps to the iMedidata Protocol Number field. _ Coder 2015.1.0 does not sync th" +
                    "is data after the initial data sync. *Coder DB _> ExternalObjectOID\r\nProtocol Na" +
                    "me: Maps to the iMedidata field Protocol.          _ Coder 2015.1.0 does not syn" +
                    "c this data after the initial data sync. *Coder DB _> ProtocolName\r\n\r\nWorkflow: " +
                    "This is the configured Workflow of the system that determines system actions for" +
                    " verbatim terms. There is currently only one Workflow named default.\r\nCreation D" +
                    "ate: Time term was sent from Rave. This time is slightly off from what the Rave " +
                    "Audit trail sent time, due to processing time.\r\nAuto Code Date: Time in which a " +
                    "verbatim task was coded.\r\n\r\n\r\n_ Reference the coding help information residing i" +
                    "n:\r\n https://learn.mdsol.com/display/CODERstg/Viewing+Coder+Transaction+Details+" +
                    "While+Coding?lang=en#ViewingCoderTransactionDetailsWhileCoding_ViewTaskPropertie" +
                    "s\r\n https://learn.mdsol.com/display/CODERstg/Viewing+Coder+Transaction+Details+W" +
                    "hile+Coding?lang=en#ViewingCoderTransactionDetailsWhileCoding_ViewTaskAssignment" +
                    "s\r\n\r\n\r\n_ The following environment configuration settings were enabled:\r\n\r\n Empt" +
                    "y Synonym Lists Registered:\r\n Synonym List 1: MedDRA       (ENG) 15.0   Primary " +
                    "List\r\n\r\n Common Configurations:\r\n Configuration Name       | Force Primary Path " +
                    "Selection (MedDRA) | Synonym Creation Policy Flag | Bypass Reconsider Upon Recla" +
                    "ssify | Default Select Threshold | Default Suggest Threshold | Auto Add Synonyms" +
                    " | Auto Approve | Term Requires Approval (IsApprovalRequired )  | Term Auto Appr" +
                    "ove with synonym (IsAutoApproval)   |\r\n Basic                    | TRUE         " +
                    "                         | Always Active                | TRUE                  " +
                    "            | 100                      | 70                        | TRUE       " +
                    "       | FALSE        | TRUE                                          | TRUE    " +
                    "                                          |\r\n No Approval              | TRUE   " +
                    "                               | Always Active                | TRUE            " +
                    "                  | 100                      | 70                        | TRUE " +
                    "             | FALSE        | FALSE                                         | TR" +
                    "UE                                              |\r\n Reconsider               | T" +
                    "RUE                                  | Always Active                | FALSE     " +
                    "                        | 100                      | 70                        |" +
                    " TRUE              | FALSE        | TRUE                                        " +
                    "  | TRUE                                              |", ProgrammingLanguage.CSharp, new string[] {
                        "specTaskProperties.feature",
                        "CoderCore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The following information will be available to the client as a term\'s Dictionary " +
            "Property information:   Medical Dictionary, Segment, Priority, Locale, UUID")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_157109_001")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void TheFollowingInformationWillBeAvailableToTheClientAsATermSDictionaryPropertyInformationMedicalDictionarySegmentPriorityLocaleUUID()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The following information will be available to the client as a term\'s Dictionary " +
                    "Property information:   Medical Dictionary, Segment, Priority, Locale, UUID", new string[] {
                        "VAL",
                        "PBMCC_157109_001",
                        "Release2015.3.0"});
#line 54
this.ScenarioSetup(scenarioInfo);
#line 56
  testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 57
  testRunner.And("coding task \"Adverse Event Term 1\" for dictionary level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
  testRunner.When("I view task \"Adverse Event Term 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Medical Dictionary",
                        "Segment",
                        "Dictionary Level",
                        "Verbatim Term",
                        "Priority",
                        "Locale",
                        "UUID"});
            table1.AddRow(new string[] {
                        "MedDRA - 15.0",
                        "<Segment>",
                        "Low Level Term",
                        "Adverse Event Term 1",
                        "1",
                        "<Locale>",
                        "<CodingTermUuid>"});
#line 59
  testRunner.Then("I verify the following Medical Dictionary Property information is displayed", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The following information will be available to the client as a term\'s Dictionary " +
            "Property information:   Locale, Study Name, Connection URI, File OID, Protocol N" +
            "umber, Protocol Name")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_157109_002")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void TheFollowingInformationWillBeAvailableToTheClientAsATermSDictionaryPropertyInformationLocaleStudyNameConnectionURIFileOIDProtocolNumberProtocolName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The following information will be available to the client as a term\'s Dictionary " +
                    "Property information:   Locale, Study Name, Connection URI, File OID, Protocol N" +
                    "umber, Protocol Name", new string[] {
                        "VAL",
                        "PBMCC_157109_002",
                        "Release2015.3.0"});
#line 67
this.ScenarioSetup(scenarioInfo);
#line 69
  testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 70
  testRunner.And("coding task \"Adverse Event Term 1\" for dictionary level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
  testRunner.When("I view task \"Adverse Event Term 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source System",
                        "Locale",
                        "Study Name",
                        "Connection URI",
                        "File OID",
                        "Protocol Number",
                        "Protocol Name"});
            table2.AddRow(new string[] {
                        "<SourceSystem>",
                        "<SourceSystemLocale>",
                        "<SourceSystemStudyName>",
                        "<ConnectionUri>",
                        "<FileOid>",
                        "<ProtocolNumber>",
                        ""});
#line 72
  testRunner.Then("I verify the following Source System Property information is displayed", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Dictionary Property information will display the following options for a coding s" +
            "tatus:   Coding Status, Workflow, Creation Date, Auto Code Date")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_157109_003")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void DictionaryPropertyInformationWillDisplayTheFollowingOptionsForACodingStatusCodingStatusWorkflowCreationDateAutoCodeDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dictionary Property information will display the following options for a coding s" +
                    "tatus:   Coding Status, Workflow, Creation Date, Auto Code Date", new string[] {
                        "VAL",
                        "PBMCC_157109_003",
                        "Release2015.3.0"});
#line 80
this.ScenarioSetup(scenarioInfo);
#line 82
  testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 83
  testRunner.And("coding task \"Adverse Event Term 1\" for dictionary level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
  testRunner.When("I view task \"Adverse Event Term 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Coding Status",
                        "Workflow",
                        "Creation Date",
                        "Auto Code Date"});
            table3.AddRow(new string[] {
                        "Waiting Manual Code",
                        "Default",
                        "<CreationDate>",
                        ""});
#line 85
  testRunner.Then("I verify the following Coding Status Property information is displayed", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The following information will be available to the client as a term\'s Dictionary " +
            "Property information for a status of Waiting Approval")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_157109_004")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void TheFollowingInformationWillBeAvailableToTheClientAsATermSDictionaryPropertyInformationForAStatusOfWaitingApproval()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The following information will be available to the client as a term\'s Dictionary " +
                    "Property information for a status of Waiting Approval", new string[] {
                        "VAL",
                        "PBMCC_157109_004",
                        "Release2015.3.0"});
#line 93
this.ScenarioSetup(scenarioInfo);
#line 95
  testRunner.Given("a \"Waiting Approval\" Coder setup with no tasks and no synonyms and dictionary \"Me" +
                    "dDRA ENG 15.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 96
  testRunner.And("coding task \"Toxic effect of venom\" for dictionary level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 97
  testRunner.When("I view task \"Toxic effect of venom\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Coding Status",
                        "Workflow",
                        "Creation Date",
                        "Auto Code Date"});
            table4.AddRow(new string[] {
                        "Waiting Approval",
                        "Default",
                        "<CreationDate>",
                        "<AutoCodeDate>"});
#line 98
  testRunner.Then("I verify the following Coding Status Property information is displayed", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The following information will be available to the client as a term\'s Dictionary " +
            "Property information for a status of Reconsider")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_157109_005")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void TheFollowingInformationWillBeAvailableToTheClientAsATermSDictionaryPropertyInformationForAStatusOfReconsider()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The following information will be available to the client as a term\'s Dictionary " +
                    "Property information for a status of Reconsider", new string[] {
                        "VAL",
                        "PBMCC_157109_005",
                        "Release2015.3.0"});
#line 106
this.ScenarioSetup(scenarioInfo);
#line 108
  testRunner.Given("a \"Reconsider\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA E" +
                    "NG 15.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 109
  testRunner.And("coding task \"Allergy to venom\" for dictionary level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 110
  testRunner.When("reclassifying task \"Allergy to venom\" with a comment \"Regression testing\" and Inc" +
                    "lude Autocoded Items set to \"True\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 111
  testRunner.And("I view task \"Allergy to venom\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Coding Status",
                        "Workflow",
                        "Creation Date",
                        "Auto Code Date"});
            table5.AddRow(new string[] {
                        "Reconsider",
                        "Default",
                        "<CreationDate>",
                        "<AutoCodeDate>"});
#line 112
  testRunner.Then("I verify the following Coding Status Property information is displayed", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
