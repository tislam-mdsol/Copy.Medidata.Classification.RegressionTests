// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Coder.RegressionTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ConfigurationsFunctionality verifies the behaviour of Coder configurations option" +
        "s")]
    [NUnit.Framework.CategoryAttribute("specAdminConfigurationFunctionality.feature")]
    [NUnit.Framework.CategoryAttribute("CoderCore")]
    public partial class ConfigurationsFunctionalityVerifiesTheBehaviourOfCoderConfigurationsOptionsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "specAdminConfigurationFunctionality.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ConfigurationsFunctionality verifies the behaviour of Coder configurations option" +
                    "s", "\r\nCommon Configurations:\r\nConfiguration Name | Force Primary Path Selection (MedD" +
                    "RA) | Synonym Creation Policy Flag | Bypass Reconsider Upon Reclassify | Default" +
                    " Select Threshold  | Default Suggest Threshold | Auto Add Synonyms | Auto Approv" +
                    "e  | Term Requires Approval (IsApprovalRequired )  | Term Auto Approve with syno" +
                    "nym (IsAutoApproval) |\r\nBasic              | TRUE                               " +
                    "   | Always Active                | TRUE                              | 100     " +
                    "                  | 70                        | TRUE              | FALSE       " +
                    "  | TRUE                                          | TRUE                        " +
                    "                    |\r\nNo Approval        | TRUE                                " +
                    "  | Always Active                | TRUE                              | 100      " +
                    "                 | 70                        | TRUE              | FALSE        " +
                    " | FALSE                                         | TRUE                         " +
                    "                   |\r\nReconsider         | TRUE                                 " +
                    " | Always Active                | FALSE                             | 100       " +
                    "                | 70                        | TRUE              | FALSE         " +
                    "| TRUE                                          | TRUE                          " +
                    "                  |\r\nApproval           | TRUE                                  " +
                    "| Always Active                | FALSE                             | 100        " +
                    "               | 70                        | FALSE             | FALSE         |" +
                    " TRUE                                          | FALSE                          " +
                    "                 |", ProgrammingLanguage.CSharp, new string[] {
                        "specAdminConfigurationFunctionality.feature",
                        "CoderCore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Coder prevents setting configuration values outside of configuration option\'s lim" +
            "its")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC166013_05")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.TestCaseAttribute("101", "Coding Task Page Size", "[10 - 100]", null)]
        [NUnit.Framework.TestCaseAttribute("9", "Coding Task Page Size", "[10 - 100]", null)]
        [NUnit.Framework.TestCaseAttribute("1001", "Search Limit Reclassification Results", "[10 - 1000]", null)]
        [NUnit.Framework.TestCaseAttribute("9", "Search Limit Reclassification Results", "[10 - 1000]", null)]
        public virtual void CoderPreventsSettingConfigurationValuesOutsideOfConfigurationOptionSLimits(string entryValue, string textBoxName, string limitValue, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "VAL",
                    "PBMCC166013_05",
                    "Release2015.3.0"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Coder prevents setting configuration values outside of configuration option\'s lim" +
                    "its", @__tags);
#line 16
this.ScenarioSetup(scenarioInfo);
#line 18
   testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 19
   testRunner.When(string.Format("entering value \"{0}\" for Configuration \"{1}\" and save", entryValue, textBoxName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
   testRunner.Then("I should see a warning message of \"Invalid Entries\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 21
   testRunner.And(string.Format("I should see a limit value of \"{0}\" for \"{1}\"", limitValue, textBoxName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Coder configuration \"Search Limit Reclassification Results\" allows user to contro" +
            "l the number of results displayed on the Reclassification Page")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC166013_06")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void CoderConfigurationSearchLimitReclassificationResultsAllowsUserToControlTheNumberOfResultsDisplayedOnTheReclassificationPage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Coder configuration \"Search Limit Reclassification Results\" allows user to contro" +
                    "l the number of results displayed on the Reclassification Page", new string[] {
                        "VAL",
                        "PBMCC166013_06",
                        "Release2015.3.0"});
#line 34
this.ScenarioSetup(scenarioInfo);
#line 35
   testRunner.Given("a \"Completed Reconsider\" Coder setup with no tasks and no synonyms and dictionary" +
                    " \"MedDRA ENG 15.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 36
   testRunner.When("uploading \"30\" MedDRA direct dictionary matches", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
   testRunner.And("entering value \"15\" for Configuration \"Search Limit Reclassification Results\" and" +
                    " save", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
   testRunner.And("setting reclassification search value \"True\" for \"IncludeAutocodedItems\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
   testRunner.And("performing reclassification search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Paging Label",
                        "Results Label"});
            table1.AddRow(new string[] {
                        "Page 1 of 2 (15 Items)",
                        "Showing 15 of 30 Results"});
#line 40
   testRunner.Then("the reclassification results page summary should contain", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Coder configuration \"Coding Task Page Size Text field\" allows user to control the" +
            " number of tasks displayed on the Coder Task Page")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC166013_07")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void CoderConfigurationCodingTaskPageSizeTextFieldAllowsUserToControlTheNumberOfTasksDisplayedOnTheCoderTaskPage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Coder configuration \"Coding Task Page Size Text field\" allows user to control the" +
                    " number of tasks displayed on the Coder Task Page", new string[] {
                        "VAL",
                        "PBMCC166013_07",
                        "Release2015.3.0"});
#line 47
this.ScenarioSetup(scenarioInfo);
#line 48
   testRunner.Given("a \"Waiting Approval\" Coder setup with no tasks and no synonyms and dictionary \"Me" +
                    "dDRA ENG 15.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 49
   testRunner.When("uploading \"30\" MedDRA direct dictionary matches", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 50
   testRunner.And("entering value \"10\" for Configuration \"Coding Task Page Size\" and save", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
   testRunner.Then("The task count is \"30\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 52
   testRunner.And("the tasks results should contain page summary \"Page 1 of 3 (30 Items)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Coder allows users to code non-primary paths when \"Force Primary Path Selection\" " +
            "is set to \"False\"")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC166013_08")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.Timeout(360000)]
        public virtual void CoderAllowsUsersToCodeNon_PrimaryPathsWhenForcePrimaryPathSelectionIsSetToFalse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Coder allows users to code non-primary paths when \"Force Primary Path Selection\" " +
                    "is set to \"False\"", new string[] {
                        "VAL",
                        "PBMCC166013_08",
                        "Release2015.3.0",
                        "IncreaseTimeout_360000"});
#line 59
this.ScenarioSetup(scenarioInfo);
#line 60
   testRunner.Given("a \"No Enforced Primary Path\" Coder setup with no tasks and no synonyms and dictio" +
                    "nary \"MedDRA ENG 15.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary Level"});
            table2.AddRow(new string[] {
                        "Adverse Event 1",
                        "LLT"});
#line 61
   testRunner.When("the following externally managed verbatim requests are made", ((string)(null)), table2, "When ");
#line 64
   testRunner.When("a browse and code for task \"Adverse Event 1\" is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 65
   testRunner.And("including non primary paths in the dictionary search criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
   testRunner.And("the browse and code search is done for \"Heart attack\" against \"Text\" at Level \"Lo" +
                    "w Level Term\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
   testRunner.And("selecting the primary path \"false\" dictionary result for term \"Heart attack\" code" +
                    " \"10019250\" level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Term Path",
                        "Code",
                        "Level"});
            table3.AddRow(new string[] {
                        "Heart attack",
                        "10019250",
                        "LLT"});
#line 68
   testRunner.Then("the task should be able to be coded to the following terms", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Coder does not allow users to code non-primary paths when \"Force Primary Path Sel" +
            "ection\" is set to \"True\"")]
        [NUnit.Framework.CategoryAttribute("DFT")]
        [NUnit.Framework.CategoryAttribute("PBMCC166013_09")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.Timeout(360000)]
        public virtual void CoderDoesNotAllowUsersToCodeNon_PrimaryPathsWhenForcePrimaryPathSelectionIsSetToTrue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Coder does not allow users to code non-primary paths when \"Force Primary Path Sel" +
                    "ection\" is set to \"True\"", new string[] {
                        "DFT",
                        "PBMCC166013_09",
                        "Release2015.3.0",
                        "IncreaseTimeout_360000"});
#line 77
this.ScenarioSetup(scenarioInfo);
#line 78
   testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary Level"});
            table4.AddRow(new string[] {
                        "Adverse Event 1",
                        "LLT"});
#line 79
   testRunner.When("the following externally managed verbatim requests are made", ((string)(null)), table4, "When ");
#line 82
   testRunner.When("a browse and code for task \"Adverse Event 1\" is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 83
   testRunner.And("the browse and code search is done for \"Heart attack\" against \"Text\" at Level \"Lo" +
                    "w Level Term\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
   testRunner.And("selecting the primary path \"false\" dictionary result for term \"Heart attack\" code" +
                    " \"10019250\" level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Term Path",
                        "Code",
                        "Level"});
            table5.AddRow(new string[] {
                        "Heart attack",
                        "10019250",
                        "LLT"});
#line 85
   testRunner.Then("the task should not be able to be coded to the following terms", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Coder allows users to code primary paths when \"Force Primary Path Selection\" is s" +
            "et to \"False\"")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC166013_10")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.Timeout(360000)]
        public virtual void CoderAllowsUsersToCodePrimaryPathsWhenForcePrimaryPathSelectionIsSetToFalse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Coder allows users to code primary paths when \"Force Primary Path Selection\" is s" +
                    "et to \"False\"", new string[] {
                        "VAL",
                        "PBMCC166013_10",
                        "Release2015.3.0",
                        "IncreaseTimeout_360000"});
#line 93
this.ScenarioSetup(scenarioInfo);
#line 94
   testRunner.Given("a \"No Enforced Primary Path\" Coder setup with no tasks and no synonyms and dictio" +
                    "nary \"MedDRA ENG 15.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary Level"});
            table6.AddRow(new string[] {
                        "Adverse Event 1",
                        "LLT"});
#line 95
   testRunner.When("the following externally managed verbatim requests are made", ((string)(null)), table6, "When ");
#line 98
   testRunner.When("a browse and code for task \"Adverse Event 1\" is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 99
   testRunner.And("including non primary paths in the dictionary search criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 100
   testRunner.And("the browse and code search is done for \"Heart attack\" against \"Text\" at Level \"Lo" +
                    "w Level Term\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
   testRunner.And("selecting the primary path \"true\" dictionary result for term \"Heart attack\" code " +
                    "\"10019250\" level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Term Path",
                        "Code",
                        "Level"});
            table7.AddRow(new string[] {
                        "Heart attack",
                        "10019250",
                        "LLT"});
#line 102
   testRunner.Then("the task should be able to be coded to the following terms", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Coder allows users to code primary paths when \"Force Primary Path Selection\" is s" +
            "et to \"True\"")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC166013_11")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.Timeout(360000)]
        public virtual void CoderAllowsUsersToCodePrimaryPathsWhenForcePrimaryPathSelectionIsSetToTrue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Coder allows users to code primary paths when \"Force Primary Path Selection\" is s" +
                    "et to \"True\"", new string[] {
                        "VAL",
                        "PBMCC166013_11",
                        "Release2015.3.0",
                        "IncreaseTimeout_360000"});
#line 111
this.ScenarioSetup(scenarioInfo);
#line 112
   testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary Level"});
            table8.AddRow(new string[] {
                        "Adverse Event 1",
                        "LLT"});
#line 113
   testRunner.When("the following externally managed verbatim requests are made", ((string)(null)), table8, "When ");
#line 116
   testRunner.When("a browse and code for task \"Adverse Event 1\" is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 117
   testRunner.And("the browse and code search is done for \"Heart attack\" against \"Text\" at Level \"Lo" +
                    "w Level Term\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 118
   testRunner.And("selecting the primary path \"true\" dictionary result for term \"Heart attack\" code " +
                    "\"10019250\" level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Term Path",
                        "Code",
                        "Level"});
            table9.AddRow(new string[] {
                        "Heart attack",
                        "10019250",
                        "LLT"});
#line 119
   testRunner.Then("the task should be able to be coded to the following terms", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Coder does not allow auto-coding when \"Force Primary Path Selection\" is set to \"F" +
            "alse\"")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC166013_12")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void CoderDoesNotAllowAuto_CodingWhenForcePrimaryPathSelectionIsSetToFalse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Coder does not allow auto-coding when \"Force Primary Path Selection\" is set to \"F" +
                    "alse\"", new string[] {
                        "VAL",
                        "PBMCC166013_12",
                        "Release2015.3.0"});
#line 126
this.ScenarioSetup(scenarioInfo);
#line 127
   testRunner.Given("a \"No Enforced Primary Path\" Coder setup with no tasks and no synonyms and dictio" +
                    "nary \"MedDRA ENG 15.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary Level"});
            table10.AddRow(new string[] {
                        "Heart Attack",
                        "LLT"});
#line 128
   testRunner.When("the following externally managed verbatim requests are made", ((string)(null)), table10, "When ");
#line 131
   testRunner.Then("the task \"Heart Attack\" should have a status of \"Waiting Manual Code\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
