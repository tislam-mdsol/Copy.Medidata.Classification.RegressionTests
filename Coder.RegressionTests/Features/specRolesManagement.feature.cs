// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Coder.RegressionTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("RolesManagement Illustrates the functional behavior of \"Action Options\" associate" +
        "d with: Create WorkFlow Role, Assign WorkFlow Role, Create General Role and Assi" +
        "gn General Role")]
    [NUnit.Framework.CategoryAttribute("specRolesManagement.feature")]
    [NUnit.Framework.CategoryAttribute("CoderCore")]
    public partial class RolesManagementIllustratesTheFunctionalBehaviorOfActionOptionsAssociatedWithCreateWorkFlowRoleAssignWorkFlowRoleCreateGeneralRoleAndAssignGeneralRoleFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "specRolesManagement.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "RolesManagement Illustrates the functional behavior of \"Action Options\" associate" +
                    "d with: Create WorkFlow Role, Assign WorkFlow Role, Create General Role and Assi" +
                    "gn General Role", @"
Common Configurations:
Configuration Name | Force Primary Path Selection (MedDRA) | Synonym Creation Policy Flag | Bypass Reconsider Upon Reclassify | Default Select Threshold  | Default Suggest Threshold | Auto Add Synonyms | Auto Approve  | Term Requires Approval (IsApprovalRequired )  | Term Auto Approve with synonym (IsAutoApproval) | Page Study Security| Page Dictionary Security |
Basic              | TRUE                                  | Always Active                | TRUE                              | 100                       | 70                        | TRUE              | FALSE         | TRUE                                          | TRUE                                            | All                | All                      |
No Approval        | TRUE                                  | Always Active                | TRUE                              | 100                       | 70                        | TRUE              | FALSE         | FALSE                                         | TRUE                                            | All                | All                      |", ProgrammingLanguage.CSharp, new string[] {
                        "specRolesManagement.feature",
                        "CoderCore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Coder Admin is able to create a workflow role, activate it and assign all role " +
            "actions to it.")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC168582_01")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void ACoderAdminIsAbleToCreateAWorkflowRoleActivateItAndAssignAllRoleActionsToIt_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Coder Admin is able to create a workflow role, activate it and assign all role " +
                    "actions to it.", new string[] {
                        "VAL",
                        "PBMCC168582_01",
                        "Release2015.3.0"});
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
   testRunner.Given("an admin user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 18
   testRunner.When("creating and activating a new workflow role called \"RolesAdmin\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
   testRunner.Then("the workflow role \"RolesAdmin\" is active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Coder Admin is able to assign workflow role to a user")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC168582_02")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void ACoderAdminIsAbleToAssignWorkflowRoleToAUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Coder Admin is able to assign workflow role to a user", new string[] {
                        "VAL",
                        "PBMCC168582_02",
                        "Release2015.3.0"});
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
   testRunner.Given("an admin user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
   testRunner.When("creating and activating a new workflow role called \"RolesAdmin\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
   testRunner.And("assigning workflow role \"RolesAdmin\" for \"All\" study", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
   testRunner.Then("the workflow role \"RolesAdmin\" for study \"All\" is assigned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Coder Admin is able remove Role Actions associated with a Workflow Role")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC168582_03")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.TestCaseAttribute("Add Comment", null)]
        [NUnit.Framework.TestCaseAttribute("Approve", null)]
        [NUnit.Framework.TestCaseAttribute("Browse And Code", null)]
        [NUnit.Framework.TestCaseAttribute("ReCode", null)]
        public virtual void ACoderAdminIsAbleRemoveRoleActionsAssociatedWithAWorkflowRole(string actions, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "VAL",
                    "PBMCC168582_03",
                    "Release2015.3.0"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Coder Admin is able remove Role Actions associated with a Workflow Role", @__tags);
#line 35
this.ScenarioSetup(scenarioInfo);
#line 36
   testRunner.Given("an admin user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 37
   testRunner.When(string.Format("removing the assigned action \"{0}\" from Workflow Role \"WorkflowRole\"", actions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
   testRunner.Then(string.Format("the following \"{0}\" are not assigned to \"WorkflowRole\"", actions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Coder Admin is able to deactivate a Workflow Role")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC168582_04")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void ACoderAdminIsAbleToDeactivateAWorkflowRole()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Coder Admin is able to deactivate a Workflow Role", new string[] {
                        "VAL",
                        "PBMCC168582_04",
                        "Release2015.3.0"});
#line 50
this.ScenarioSetup(scenarioInfo);
#line 51
   testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary Level"});
            table1.AddRow(new string[] {
                        "Adverse Event 1",
                        "LLT"});
#line 52
  testRunner.When("the following externally managed verbatim requests are made", ((string)(null)), table1, "When ");
#line 55
   testRunner.When("deactivating Workflow Role \"WorkflowRole\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 56
   testRunner.Then("The task count is \"0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A coder user\'s ability to perform the following actions on a task, can be restric" +
            "ted: \"Approve, RecCode or Open Query\"")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC168582_05")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void ACoderUserSAbilityToPerformTheFollowingActionsOnATaskCanBeRestrictedApproveRecCodeOrOpenQuery()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A coder user\'s ability to perform the following actions on a task, can be restric" +
                    "ted: \"Approve, RecCode or Open Query\"", new string[] {
                        "VAL",
                        "PBMCC168582_05",
                        "Release2015.3.0",
                        "IncreaseTimeout"});
#line 63
this.ScenarioSetup(scenarioInfo);
#line 64
   testRunner.Given("a \"Waiting Approval\" Coder setup with no tasks and no synonyms and dictionary \"Me" +
                    "dDRA ENG 15.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary Level"});
            table2.AddRow(new string[] {
                        "HEADACHE",
                        "LLT"});
#line 65
   testRunner.When("the following externally managed verbatim requests are made", ((string)(null)), table2, "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Actions"});
            table3.AddRow(new string[] {
                        "Approve"});
            table3.AddRow(new string[] {
                        "ReCode"});
            table3.AddRow(new string[] {
                        "Open Query"});
#line 68
   testRunner.When("removing the assigned Actions from workflow role \"WorkflowRole\"", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Actions"});
            table4.AddRow(new string[] {
                        "Approve"});
            table4.AddRow(new string[] {
                        "ReCode"});
            table4.AddRow(new string[] {
                        "Open Query"});
#line 73
   testRunner.Then("the user is unable to perform the following Task Actions for the task \"Headache\"", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A coder user\'s ability to perform the following actions on a task, can be restric" +
            "ted: \"Code and Add Comment\"")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC168582_06")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void ACoderUserSAbilityToPerformTheFollowingActionsOnATaskCanBeRestrictedCodeAndAddComment()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A coder user\'s ability to perform the following actions on a task, can be restric" +
                    "ted: \"Code and Add Comment\"", new string[] {
                        "VAL",
                        "PBMCC168582_06",
                        "Release2015.3.0"});
#line 83
this.ScenarioSetup(scenarioInfo);
#line 84
   testRunner.Given("a \"Approval\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG" +
                    " 15.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary Level"});
            table5.AddRow(new string[] {
                        "Heart Burn",
                        "LLT"});
#line 85
   testRunner.When("the following externally managed verbatim requests are made", ((string)(null)), table5, "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Actions"});
            table6.AddRow(new string[] {
                        "Add Comment"});
            table6.AddRow(new string[] {
                        "Browse And Code"});
#line 88
   testRunner.When("removing the assigned Actions from workflow role \"WorkflowRole\"", ((string)(null)), table6, "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Actions"});
            table7.AddRow(new string[] {
                        "Add Comment"});
            table7.AddRow(new string[] {
                        "Code"});
#line 92
   testRunner.Then("the user is unable to perform the following Task Actions for the task \"Heart Burn" +
                    "\"", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A coder user\'s ability to perform the following actions on a task, can be restric" +
            "ted: \"Leave As Is or Reject Coding Decision\"")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC168582_07")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void ACoderUserSAbilityToPerformTheFollowingActionsOnATaskCanBeRestrictedLeaveAsIsOrRejectCodingDecision()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A coder user\'s ability to perform the following actions on a task, can be restric" +
                    "ted: \"Leave As Is or Reject Coding Decision\"", new string[] {
                        "VAL",
                        "PBMCC168582_07",
                        "Release2015.3.0",
                        "IncreaseTimeout"});
#line 102
this.ScenarioSetup(scenarioInfo);
#line 103
   testRunner.Given("a \"Approval\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG" +
                    " 15.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary Level"});
            table8.AddRow(new string[] {
                        "HEADACHE",
                        "LLT"});
#line 104
   testRunner.When("the following externally managed verbatim requests are made", ((string)(null)), table8, "When ");
#line 107
   testRunner.When("reclassifying task \"Headache\" with Include Autocoded Items set to \"True\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Actions"});
            table9.AddRow(new string[] {
                        "Leave As Is"});
            table9.AddRow(new string[] {
                        "Reject Coding Decision"});
#line 108
   testRunner.And("removing the assigned Actions from workflow role \"WorkflowRole\"", ((string)(null)), table9, "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Actions"});
            table10.AddRow(new string[] {
                        "Leave As Is"});
            table10.AddRow(new string[] {
                        "Reject Coding Decision"});
#line 112
   testRunner.Then("the user is unable to perform the following Task Actions for the task \"Headache\"", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Coder Admin can revoke a user\'s access to a workflow role")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC168582_08")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void ACoderAdminCanRevokeAUserSAccessToAWorkflowRole()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Coder Admin can revoke a user\'s access to a workflow role", new string[] {
                        "VAL",
                        "PBMCC168582_08",
                        "Release2015.3.0"});
#line 120
   this.ScenarioSetup(scenarioInfo);
#line 121
   testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary Level"});
            table11.AddRow(new string[] {
                        "Adverse Event 1",
                        "LLT"});
#line 122
   testRunner.When("the following externally managed verbatim requests are made", ((string)(null)), table11, "When ");
#line 125
   testRunner.When("denying access to Workflow Role \"WorkflowRole\" for \"All\" study", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 126
   testRunner.Then("The task count is \"0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Study Admin can remove a workflow role from a study")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC168582_09")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void AStudyAdminCanRemoveAWorkflowRoleFromAStudy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Study Admin can remove a workflow role from a study", new string[] {
                        "VAL",
                        "PBMCC168582_09",
                        "Release2015.3.0"});
#line 132
   this.ScenarioSetup(scenarioInfo);
#line 133
   testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary Level"});
            table12.AddRow(new string[] {
                        "Adverse Event 1",
                        "LLT"});
#line 134
   testRunner.When("the following externally managed verbatim requests are made", ((string)(null)), table12, "When ");
#line 137
   testRunner.When("removing Workflow Role \"WorkflowRole\" for \"All\" study", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 138
   testRunner.Then("The task count is \"0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A CoderAmin is able to create and activate \"Page Study Security\" role")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC168593_01")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void ACoderAminIsAbleToCreateAndActivatePageStudySecurityRole()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A CoderAmin is able to create and activate \"Page Study Security\" role", new string[] {
                        "VAL",
                        "PBMCC168593_01",
                        "Release2015.3.0"});
#line 144
this.ScenarioSetup(scenarioInfo);
#line 145
   testRunner.Given("an admin user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 146
   testRunner.When("creating and activating a \"Page Study Security\" role called \"GeneralRole\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 147
   testRunner.Then("the \"Page Study Security\" role \"StudyAdmin\" is active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A CoderAmin is able to create and activate \"Page Dictionary Security\" role")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC168593_02")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void ACoderAminIsAbleToCreateAndActivatePageDictionarySecurityRole()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A CoderAmin is able to create and activate \"Page Dictionary Security\" role", new string[] {
                        "VAL",
                        "PBMCC168593_02",
                        "Release2015.3.0"});
#line 153
this.ScenarioSetup(scenarioInfo);
#line 154
   testRunner.Given("an admin user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 155
   testRunner.When("creating and activating a \"Page Dictionary Security\" role called \"GeneralRole\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 156
   testRunner.Then("the \"Page Dictionary Security\" role \"DictionaryAdmin\" is active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A CoderAmin is able assign General role \"Page Study Security\" a Coder User")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC168593_03")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void ACoderAminIsAbleAssignGeneralRolePageStudySecurityACoderUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A CoderAmin is able assign General role \"Page Study Security\" a Coder User", new string[] {
                        "VAL",
                        "PBMCC168593_03",
                        "Release2015.3.0"});
#line 162
this.ScenarioSetup(scenarioInfo);
#line 163
   testRunner.Given("an admin user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 164
   testRunner.When("creating and activating a \"Page Study Security\" role called \"GeneralRole\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 165
   testRunner.And("assigning \"Page Study Security\" General Role \"GeneralRole\" for \"All\" type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 166
   testRunner.Then("the \"Page Study Security\" General Role \"GeneralRole\" for type \"All\" is assigned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A CoderAmin is able assign General role \"Page Dictionary Security\" a Coder User")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC168593_04")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void ACoderAminIsAbleAssignGeneralRolePageDictionarySecurityACoderUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A CoderAmin is able assign General role \"Page Dictionary Security\" a Coder User", new string[] {
                        "VAL",
                        "PBMCC168593_04",
                        "Release2015.3.0"});
#line 172
this.ScenarioSetup(scenarioInfo);
#line 173
   testRunner.Given("an admin user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 174
   testRunner.When("creating and activating a \"Page Dictionary Security\" role called \"GeneralRole\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 175
   testRunner.And("assigning \"Page Dictionary Security\" General Role \"GeneralRole\" for \"All\" type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 176
   testRunner.Then("the \"Page Dictionary Security\" General Role \"GeneralRole\" for type \"All\" is assig" +
                    "ned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A CoderAdmin is able to restrict access to the following Coder reports \"Coding Hi" +
            "story Report, Ingredient Report, Study Report\"")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC168593_05")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void ACoderAdminIsAbleToRestrictAccessToTheFollowingCoderReportsCodingHistoryReportIngredientReportStudyReport()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A CoderAdmin is able to restrict access to the following Coder reports \"Coding Hi" +
                    "story Report, Ingredient Report, Study Report\"", new string[] {
                        "VAL",
                        "PBMCC168593_05",
                        "Release2015.3.0"});
#line 182
this.ScenarioSetup(scenarioInfo);
#line 183
   testRunner.Given("an admin user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Actions"});
            table13.AddRow(new string[] {
                        "Coding History Report"});
            table13.AddRow(new string[] {
                        "Study Report"});
#line 184
   testRunner.When("removing the assigned Actions from \"Page Study Security\" Role \"StudyAdmin\"", ((string)(null)), table13, "When ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Reports"});
            table14.AddRow(new string[] {
                        "Coding History Report"});
            table14.AddRow(new string[] {
                        "Ingredient Report"});
            table14.AddRow(new string[] {
                        "Study Report"});
#line 188
   testRunner.Then("the user will not have access to the following reports", ((string)(null)), table14, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A CoderAdmin is able to restrict access to the following functions: \"Reclassifica" +
            "tion and View Impact Analysis\"")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC168593_06")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void ACoderAdminIsAbleToRestrictAccessToTheFollowingFunctionsReclassificationAndViewImpactAnalysis()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A CoderAdmin is able to restrict access to the following functions: \"Reclassifica" +
                    "tion and View Impact Analysis\"", new string[] {
                        "VAL",
                        "PBMCC168593_06",
                        "Release2015.3.0"});
#line 198
this.ScenarioSetup(scenarioInfo);
#line 199
   testRunner.Given("an admin user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Actions"});
            table15.AddRow(new string[] {
                        "Reclassification"});
            table15.AddRow(new string[] {
                        "View Impact Analysis"});
#line 200
   testRunner.When("removing the assigned Actions from \"Page Dictionary Security\" Role \"DictionaryAdm" +
                    "in\"", ((string)(null)), table15, "When ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Functions"});
            table16.AddRow(new string[] {
                        "Reclassification"});
            table16.AddRow(new string[] {
                        "Study Impact Analysis"});
#line 204
   testRunner.Then("the user will not have access to the following functions", ((string)(null)), table16, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A CoderAdmin is able to deny access to general role \"SegmentAdmin\" options")]
        [NUnit.Framework.IgnoreAttribute()]
        [NUnit.Framework.CategoryAttribute("DFT")]
        [NUnit.Framework.CategoryAttribute("PBMCC168593_08")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void ACoderAdminIsAbleToDenyAccessToGeneralRoleSegmentAdminOptions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A CoderAdmin is able to deny access to general role \"SegmentAdmin\" options", new string[] {
                        "DFT",
                        "PBMCC168593_08",
                        "Release2015.3.0",
                        "ignore"});
#line 214
this.ScenarioSetup(scenarioInfo);
#line 215
   testRunner.Given("an admin user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 216
   testRunner.When("assigning \"Segment Security\" General Role \"SegmentAdmin\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 217
   testRunner.When("I deny \"Segment Security\" access to \"All\" segments for general role \"SegmentAdmin" +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Function"});
            table17.AddRow(new string[] {
                        "Assign General Role"});
            table17.AddRow(new string[] {
                        "Assign Workflow Role"});
            table17.AddRow(new string[] {
                        "Configuration"});
            table17.AddRow(new string[] {
                        "Create Workflow Role"});
            table17.AddRow(new string[] {
                        "Create General Role"});
            table17.AddRow(new string[] {
                        "Project Registration"});
            table17.AddRow(new string[] {
                        "Do Not Auto Code"});
#line 218
   testRunner.Then("the user will not have access to the following functions", ((string)(null)), table17, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Study Impact Analysis Report can be generated by a user without access to Edit " +
            "Study Migration Report")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_195032_001")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void AStudyImpactAnalysisReportCanBeGeneratedByAUserWithoutAccessToEditStudyMigrationReport()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Study Impact Analysis Report can be generated by a user without access to Edit " +
                    "Study Migration Report", new string[] {
                        "VAL",
                        "PBMCC_195032_001",
                        "Release2015.3.0"});
#line 232
this.ScenarioSetup(scenarioInfo);
#line 233
 testRunner.Given("a \"Waiting Approval\" Coder setup with registered synonym list \"MedDRA ENG 11.0 Ro" +
                    "les_Managment\" containing entry \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary Level"});
            table18.AddRow(new string[] {
                        "Great toe fracture",
                        "LLT"});
#line 234
    testRunner.When("the following externally managed verbatim requests are made", ((string)(null)), table18, "When ");
#line 237
 testRunner.And("an activated synonym list \"MedDRA ENG 12.0 Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Actions"});
            table19.AddRow(new string[] {
                        "Edit StudyIncludeKeep"});
#line 238
 testRunner.When("removing the assigned Actions from \"Page Study Security\" Role \"StudyAdmin\"", ((string)(null)), table19, "When ");
#line 241
    testRunner.And("performing Study Impact Analysis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Generate Report",
                        "Migrate Study",
                        "Edit Study Analysis",
                        "Export Report"});
            table20.AddRow(new string[] {
                        "True",
                        "True",
                        "False",
                        "True"});
#line 242
 testRunner.Then("the following study impact analyis actions will be available", ((string)(null)), table20, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Study Impact Analysis Report can be generated by a user without access to Migra" +
            "te Study")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_195032_002")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void AStudyImpactAnalysisReportCanBeGeneratedByAUserWithoutAccessToMigrateStudy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Study Impact Analysis Report can be generated by a user without access to Migra" +
                    "te Study", new string[] {
                        "VAL",
                        "PBMCC_195032_002",
                        "Release2015.3.0"});
#line 250
this.ScenarioSetup(scenarioInfo);
#line 251
 testRunner.Given("a \"Waiting Approval\" Coder setup with registered synonym list \"MedDRA ENG 11.0 Ro" +
                    "les_Managment\" containing entry \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary Level"});
            table21.AddRow(new string[] {
                        "Great toe fracture",
                        "LLT"});
#line 252
    testRunner.When("the following externally managed verbatim requests are made", ((string)(null)), table21, "When ");
#line 255
 testRunner.And("an activated synonym list \"MedDRA ENG 12.0 Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Actions"});
            table22.AddRow(new string[] {
                        "Migrate Study"});
#line 256
 testRunner.When("removing the assigned Actions from \"Page Study Security\" Role \"StudyAdmin\"", ((string)(null)), table22, "When ");
#line 259
    testRunner.And("performing Study Impact Analysis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Generate Report",
                        "Migrate Study",
                        "Edit Study Analysis",
                        "Export Report"});
            table23.AddRow(new string[] {
                        "True",
                        "False",
                        "True",
                        "True"});
#line 260
 testRunner.Then("the following study impact analyis actions will be available", ((string)(null)), table23, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Study Impact Analysis Report can be generated by a user without access to Edit " +
            "Study Migration Report or Migrate Study")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_195032_003")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void AStudyImpactAnalysisReportCanBeGeneratedByAUserWithoutAccessToEditStudyMigrationReportOrMigrateStudy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Study Impact Analysis Report can be generated by a user without access to Edit " +
                    "Study Migration Report or Migrate Study", new string[] {
                        "VAL",
                        "PBMCC_195032_003",
                        "Release2015.3.0"});
#line 268
this.ScenarioSetup(scenarioInfo);
#line 269
 testRunner.Given("a \"Waiting Approval\" Coder setup with registered synonym list \"MedDRA ENG 11.0 Ro" +
                    "les_Managment\" containing entry \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary Level"});
            table24.AddRow(new string[] {
                        "Great toe fracture",
                        "LLT"});
#line 270
    testRunner.When("the following externally managed verbatim requests are made", ((string)(null)), table24, "When ");
#line 273
 testRunner.And("an activated synonym list \"MedDRA ENG 12.0 Primary_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Actions"});
            table25.AddRow(new string[] {
                        "Edit StudyIncludeKeep"});
            table25.AddRow(new string[] {
                        "Migrate Study"});
#line 274
 testRunner.When("removing the assigned Actions from \"Page Study Security\" Role \"StudyAdmin\"", ((string)(null)), table25, "When ");
#line 278
    testRunner.And("performing Study Impact Analysis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Generate Report",
                        "Migrate Study",
                        "Edit Study Analysis",
                        "Export Report"});
            table26.AddRow(new string[] {
                        "True",
                        "False",
                        "False",
                        "True"});
#line 279
 testRunner.Then("the following study impact analyis actions will be available", ((string)(null)), table26, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
