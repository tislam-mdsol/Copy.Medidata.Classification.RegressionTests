// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Coder.RegressionTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("The Coder system will provide a mechanism by which synonyms created by users can " +
        "be reviewed and approved")]
    [NUnit.Framework.CategoryAttribute("specSynonymApproval.feature")]
    [NUnit.Framework.CategoryAttribute("CoderCore")]
    public partial class TheCoderSystemWillProvideAMechanismByWhichSynonymsCreatedByUsersCanBeReviewedAndApprovedFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "specSynonymApproval.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "The Coder system will provide a mechanism by which synonyms created by users can " +
                    "be reviewed and approved", "", ProgrammingLanguage.CSharp, new string[] {
                        "specSynonymApproval.feature",
                        "CoderCore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When adding a synonym that requires approval the coding system should successfull" +
            "y activate it upon approval")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_164725_001")]
        [NUnit.Framework.TestCaseAttribute("MedDRA ENG 11.0", "A-FIB", "LLT", "Atrial Fibrillation", "Low Level Term", "Atrial Fibrillation", "10003658", null)]
        public virtual void WhenAddingASynonymThatRequiresApprovalTheCodingSystemShouldSuccessfullyActivateItUponApproval(string dictionary, string verbatim, string dictionaryLevel, string searchText, string searchLevel, string synonymTerm, string synonymCode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "VAL",
                    "Release2015.3.0",
                    "PBMCC_164725_001"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When adding a synonym that requires approval the coding system should successfull" +
                    "y activate it upon approval", @__tags);
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given(string.Format("a \"Synonyms Need Approval\" Coder setup with no tasks and no synonyms and dictiona" +
                        "ry \"{0}\"", dictionary), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary Level"});
            table1.AddRow(new string[] {
                        string.Format("{0}", verbatim),
                        string.Format("{0}", dictionaryLevel)});
#line 10
    testRunner.When("the following externally managed verbatim requests are made", ((string)(null)), table1, "When ");
#line 13
 testRunner.When(string.Format("task \"{0}\" is coded to term \"{1}\" at search level \"{2}\" with code \"{3}\" at level " +
                        "\"{4}\" and a synonym is created", verbatim, searchText, searchLevel, synonymCode, dictionaryLevel), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
 testRunner.And(string.Format("the synonym for verbatim \"{0}\" and code \"{1}\" is approved", verbatim, synonymCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.Then(string.Format("the synonym for verbatim \"{0}\" and code \"{1}\" should be active", verbatim, synonymCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The coding system should allow a large number of provisional synonyms to be filte" +
            "red by term during the approval process")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_192362_002")]
        [NUnit.Framework.Timeout(900000)]
        public virtual void TheCodingSystemShouldAllowALargeNumberOfProvisionalSynonymsToBeFilteredByTermDuringTheApprovalProcess()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The coding system should allow a large number of provisional synonyms to be filte" +
                    "red by term during the approval process", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_192362_002",
                        "IncreaseTimeout_900000"});
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
 testRunner.Given("a \"Auto Code Synonyms Need Approval\" Coder setup with no tasks and no synonyms an" +
                    "d dictionary \"MedDRA ENG 15.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 26
 testRunner.When("uploading \"2000\" MedDRA direct dictionary matches", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 27
 testRunner.And("the \"1100\" provisional synonyms are filtered by term \"pain\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
 testRunner.Then("all provisional synonyms should be for a verbatim that contains \"pain\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The coding system should provide a distinct set of provisional synonyms upon requ" +
            "esting the subsequent set")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_194721_003")]
        [NUnit.Framework.Timeout(300000)]
        public virtual void TheCodingSystemShouldProvideADistinctSetOfProvisionalSynonymsUponRequestingTheSubsequentSet()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The coding system should provide a distinct set of provisional synonyms upon requ" +
                    "esting the subsequent set", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_194721_003",
                        "IncreaseTimeout_300000"});
#line 34
this.ScenarioSetup(scenarioInfo);
#line 35
    testRunner.Given("a \"Auto Code Synonyms Need Approval\" Coder setup with no tasks and no synonyms an" +
                    "d dictionary \"MedDRA ENG 15.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 36
 testRunner.When("uploading \"60\" MedDRA direct dictionary matches", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
 testRunner.And("the \"30\" provisional synonyms are requested", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.Then("each provisional synonym should be unique across all sets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The coding system should allow a synonym to be retired")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_171567_001")]
        [NUnit.Framework.Timeout(300000)]
        public virtual void TheCodingSystemShouldAllowASynonymToBeRetired()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The coding system should allow a synonym to be retired", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_171567_001",
                        "IncreaseTimeout_300000"});
#line 45
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "SynonymListName",
                        "Dictionary",
                        "Version",
                        "Locale"});
            table2.AddRow(new string[] {
                        "Retired_List",
                        "MedDRA",
                        "15.0",
                        "ENG"});
#line 46
 testRunner.Given("a \"Synonyms Need Approval\" Coder setup with no tasks and no synonyms and dictiona" +
                    "ries", ((string)(null)), table2, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary Level"});
            table3.AddRow(new string[] {
                        "Adverse Event 1",
                        "LLT"});
#line 49
    testRunner.When("the following externally managed verbatim requests are made", ((string)(null)), table3, "When ");
#line 52
 testRunner.When("task \"Adverse Event 1\" is coded to term \"Reflux gastritis\" at search level \"Low L" +
                    "evel Term\" with code \"10057969\" at level \"LLT\" and a synonym is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim"});
            table4.AddRow(new string[] {
                        "ADVERSE EVENT 1"});
#line 53
 testRunner.Then("the following synonym terms require approval", ((string)(null)), table4, "Then ");
#line 56
 testRunner.When("the synonym for verbatim \"Adverse Event 1\" and code \"10057969\" is retired", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 57
 testRunner.Then("no synonym terms require approval", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 58
    testRunner.And("the number of synonyms for list \"MedDRA ENG 15.0 Retired_List\" is \"0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A user shall be able to retire synonyms from the Synonym Approval page")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_206142_001")]
        [NUnit.Framework.Timeout(300000)]
        public virtual void AUserShallBeAbleToRetireSynonymsFromTheSynonymApprovalPage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A user shall be able to retire synonyms from the Synonym Approval page", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_206142_001",
                        "IncreaseTimeout_300000"});
#line 64
this.ScenarioSetup(scenarioInfo);
#line 66
    testRunner.Given("a \"Auto Code Synonyms Need Approval\" Coder setup with no tasks and no synonyms an" +
                    "d dictionary \"MedDRA ENG 15.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary Level"});
            table5.AddRow(new string[] {
                        "ACHES",
                        "LLT"});
#line 67
 testRunner.When("the following externally managed verbatim requests are made", ((string)(null)), table5, "When ");
#line 70
 testRunner.And("task \"ACHES\" is coded to term \"HEADACHE\" at search level \"Low Level Term\" with co" +
                    "de \"10019211\" at level \"LLT\" and a synonym is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
 testRunner.And("the provisional synonym for verbatim term \"ACHES\" is retired from the Synonym App" +
                    "roval page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
 testRunner.Then("the synonym for verbatim \"ACHES\" and code \"10019211\" should not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary Level"});
            table6.AddRow(new string[] {
                        "ACHES",
                        "LLT"});
#line 73
 testRunner.When("the following externally managed verbatim requests are made", ((string)(null)), table6, "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Action",
                        "Status",
                        "Verbatim Term",
                        "Comment",
                        "Time Stamp"});
            table7.AddRow(new string[] {
                        "<SystemUser>",
                        "Start Auto Code",
                        "Waiting Manual Code",
                        "ACHES",
                        "",
                        "<TimeStamp>"});
#line 76
 testRunner.Then("the Coding History contains following information for task \"ACHES\" in status \"Wai" +
                    "ting Manual Code\"", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Tasks shall remain in the current status when synonyms are retired from the Synon" +
            "ym Approval page")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_206142_002")]
        [NUnit.Framework.Timeout(300000)]
        public virtual void TasksShallRemainInTheCurrentStatusWhenSynonymsAreRetiredFromTheSynonymApprovalPage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tasks shall remain in the current status when synonyms are retired from the Synon" +
                    "ym Approval page", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_206142_002",
                        "IncreaseTimeout_300000"});
#line 84
this.ScenarioSetup(scenarioInfo);
#line 86
    testRunner.Given("a \"Auto Code Synonyms Need Approval\" Coder setup with no tasks and no synonyms an" +
                    "d dictionary \"MedDRA ENG 15.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 87
 testRunner.And("\"2\" manually approved coding tasks with verbatim \"ACHES\" coded to term \"HEADACHE\"" +
                    " code \"10019211\" with a synonym created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
 testRunner.And("\"2\" unapproved coding tasks with verbatim \"ACHES\" coded to term \"HEADACHE\" code \"" +
                    "10019211\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
 testRunner.When("the provisional synonym for verbatim term \"ACHES\" is retired from the Synonym App" +
                    "roval page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 90
 testRunner.Then("the synonym for verbatim \"ACHES\" and code \"10019211\" should not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Group",
                        "Status"});
            table8.AddRow(new string[] {
                        "ACHES",
                        "2",
                        "Waiting Approval"});
#line 91
 testRunner.And("the coding task table has the following ordered information", ((string)(null)), table8, "And ");
#line 94
 testRunner.When("performing reclassification search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Study",
                        "Subject",
                        "Verbatim",
                        "Term",
                        "Code",
                        "Priority",
                        "Form"});
            table9.AddRow(new string[] {
                        "<StudyName>",
                        "Subject 1",
                        "ACHES",
                        "Headache",
                        "10019211",
                        "1",
                        "Form 1"});
            table9.AddRow(new string[] {
                        "<StudyName>",
                        "Subject 1",
                        "ACHES",
                        "Headache",
                        "10019211",
                        "1",
                        "Form 1"});
#line 95
 testRunner.Then("the reclassification search should contain", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Non Single Path DDM tasks with provisional synonyms shall return to manual code s" +
            "tatus when the synonyms are retired from the Synonym Details page and existing t" +
            "asks are reconsidered")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_206142_003")]
        [NUnit.Framework.Timeout(300000)]
        public virtual void NonSinglePathDDMTasksWithProvisionalSynonymsShallReturnToManualCodeStatusWhenTheSynonymsAreRetiredFromTheSynonymDetailsPageAndExistingTasksAreReconsidered()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Non Single Path DDM tasks with provisional synonyms shall return to manual code s" +
                    "tatus when the synonyms are retired from the Synonym Details page and existing t" +
                    "asks are reconsidered", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_206142_003",
                        "IncreaseTimeout_300000"});
#line 104
this.ScenarioSetup(scenarioInfo);
#line 106
    testRunner.Given("a \"Auto Code Synonyms Need Approval\" Coder setup with no tasks and no synonyms an" +
                    "d dictionary \"MedDRA ENG 15.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 107
 testRunner.And("\"2\" manually approved coding tasks with verbatim \"ACHES\" coded to term \"HEADACHE\"" +
                    " code \"10019211\" with a synonym created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 108
 testRunner.And("\"2\" unapproved coding tasks with verbatim \"ACHES\" coded to term \"HEADACHE\" code \"" +
                    "10019211\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 109
 testRunner.When("the provisional synonym for verbatim term \"ACHES\" is retired from the Synonym Det" +
                    "ails page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 110
 testRunner.And("a coding task \"ACHES\" returns to \"Waiting Manual Code\" status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 111
 testRunner.And("a coding task \"ACHES\" returns to \"Reconsider\" status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 112
 testRunner.Then("the synonym for verbatim \"ACHES\" and code \"10019211\" should not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Group",
                        "Status"});
            table10.AddRow(new string[] {
                        "ACHES",
                        "2",
                        "Waiting Manual Code"});
            table10.AddRow(new string[] {
                        "ACHES",
                        "2",
                        "Reconsider"});
#line 113
 testRunner.And("the coding task table has the following ordered information", ((string)(null)), table10, "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Action",
                        "Status",
                        "Verbatim Term",
                        "Comment",
                        "Time Stamp"});
            table11.AddRow(new string[] {
                        "<User>",
                        "Reclassify",
                        "Waiting Manual Code",
                        "ACHES",
                        "Synonym Retired",
                        "<TimeStamp>"});
#line 117
 testRunner.And("the Coding History contains following information for task \"ACHES\" in status \"Wai" +
                    "ting Manual Code\"", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Action",
                        "Status",
                        "Verbatim Term",
                        "Comment",
                        "Time Stamp"});
            table12.AddRow(new string[] {
                        "<User>",
                        "Reclassify",
                        "Reconsider",
                        "ACHES",
                        "Synonym Retired",
                        "<TimeStamp>"});
#line 120
 testRunner.And("the Coding History contains following information for task \"ACHES\" in status \"Rec" +
                    "onsider\"", ((string)(null)), table12, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Single Path DDM tasks with provisional synonyms shall return to the manual code s" +
            "tatus when the synonyms are retired from the Synonym Details page and existing t" +
            "asks are reconsidered")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_206142_004")]
        [NUnit.Framework.Timeout(300000)]
        public virtual void SinglePathDDMTasksWithProvisionalSynonymsShallReturnToTheManualCodeStatusWhenTheSynonymsAreRetiredFromTheSynonymDetailsPageAndExistingTasksAreReconsidered()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Single Path DDM tasks with provisional synonyms shall return to the manual code s" +
                    "tatus when the synonyms are retired from the Synonym Details page and existing t" +
                    "asks are reconsidered", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_206142_004",
                        "IncreaseTimeout_300000"});
#line 128
this.ScenarioSetup(scenarioInfo);
#line 130
    testRunner.Given("a \"Auto Code Synonyms Need Approval\" Coder setup with no tasks and no synonyms an" +
                    "d dictionary \"MedDRA ENG 15.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary Level"});
            table13.AddRow(new string[] {
                        "HEADACHE",
                        "LLT"});
#line 131
 testRunner.When("the following externally managed verbatim requests are made", ((string)(null)), table13, "When ");
#line 134
 testRunner.And("the provisional synonym for verbatim term \"HEADACHE\" is retired from the Synonym " +
                    "Details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 135
 testRunner.And("a coding task \"HEADACHE\" returns to \"Waiting Manual Code\" status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 136
 testRunner.Then("the synonym for verbatim \"HEADACHE\" and code \"10019211\" should not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Status"});
            table14.AddRow(new string[] {
                        "HEADACHE",
                        "Waiting Manual Code"});
#line 137
 testRunner.And("the coding task table has the following ordered information", ((string)(null)), table14, "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Action",
                        "Status",
                        "Verbatim Term",
                        "Comment",
                        "Time Stamp"});
            table15.AddRow(new string[] {
                        "<User>",
                        "Reclassify",
                        "Waiting Manual Code",
                        "HEADACHE",
                        "Synonym Retired",
                        "<TimeStamp>"});
#line 140
 testRunner.And("the Coding History contains following information", ((string)(null)), table15, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Reconsider Dialog shall display the number of coding decisions affected when " +
            "retiring a synonym from the Synonym Details page")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_206142_005")]
        [NUnit.Framework.Timeout(300000)]
        public virtual void TheReconsiderDialogShallDisplayTheNumberOfCodingDecisionsAffectedWhenRetiringASynonymFromTheSynonymDetailsPage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Reconsider Dialog shall display the number of coding decisions affected when " +
                    "retiring a synonym from the Synonym Details page", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_206142_005",
                        "IncreaseTimeout_300000"});
#line 148
this.ScenarioSetup(scenarioInfo);
#line 150
    testRunner.Given("a \"Auto Code Synonyms Need Approval\" Coder setup with no tasks and no synonyms an" +
                    "d dictionary \"MedDRA ENG 15.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 151
 testRunner.And("\"3\" manually approved coding tasks with verbatim \"ACHES\" coded to term \"HEADACHE\"" +
                    " code \"10019211\" with a synonym created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 152
 testRunner.And("\"4\" unapproved coding tasks with verbatim \"ACHES\" coded to term \"HEADACHE\" code \"" +
                    "10019211\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 153
 testRunner.Then("the reconsider dialog displays \"3\" completed and \"4\" in progress coding decisions" +
                    " when retiring the provisional synonym for verbatim term \"ACHES\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Provisional synonyms shall be updated with path changes and remain in the provisi" +
            "onal status after Study Migrations")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_206142_006")]
        [NUnit.Framework.Timeout(420000)]
        public virtual void ProvisionalSynonymsShallBeUpdatedWithPathChangesAndRemainInTheProvisionalStatusAfterStudyMigrations()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Provisional synonyms shall be updated with path changes and remain in the provisi" +
                    "onal status after Study Migrations", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_206142_006",
                        "IncreaseTimeout_420000"});
#line 159
this.ScenarioSetup(scenarioInfo);
#line 161
    testRunner.Given("a \"Auto Code Synonyms Need Approval\" Coder setup with registered synonym list \"Me" +
                    "dDRA ENG 16.0 Current_List\" containing entry \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 162
    testRunner.And("an unactivated synonym list \"MedDRA ENG 16.1 New_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 163
 testRunner.And("\"1\" unapproved coding tasks with verbatim \"ACHES\" coded to term \"Acetabular dyspl" +
                    "asia\" code \"10000396\" with a synonym created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 164
 testRunner.When("I perform a synonym migration accepting the reconciliation suggestion for the syn" +
                    "onym \"ACHES\" under the category \"Path Does Not Exist\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 165
    testRunner.And("performing study migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 166
 testRunner.Then("the synonym \"ACHES\" requires approval after synonym migration is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Term Path",
                        "Code"});
            table16.AddRow(new string[] {
                        "SOC",
                        "Congenital, familial and genetic disorders: 10010331",
                        "10010331"});
            table16.AddRow(new string[] {
                        "HLGT",
                        "Musculoskeletal and connective tissue disorders congenital: 10028396",
                        "10028396"});
            table16.AddRow(new string[] {
                        "HLT",
                        "Musculoskeletal and connective tissue disorders of limbs congenital: 10028381",
                        "10028381"});
            table16.AddRow(new string[] {
                        "PT",
                        "Developmental hip dysplasia: 10073767",
                        "10073767"});
            table16.AddRow(new string[] {
                        "LLT",
                        "Acetabular dysplasia: 10000396",
                        "10000396"});
#line 167
 testRunner.And("the master path for synonym \"ACHES\" after synonym migration is completed is", ((string)(null)), table16, "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Action",
                        "Status",
                        "Verbatim Term",
                        "Comment",
                        "Time Stamp"});
            table17.AddRow(new string[] {
                        "<SystemUser>",
                        "Start Auto Code",
                        "Waiting Manual Code",
                        "ACHES",
                        "Cannot auto code because synonym is provisional",
                        "<TimeStamp>"});
#line 174
 testRunner.Then("the Coding History contains following information", ((string)(null)), table17, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Provisional synonyms unaffected by Study Migrations shall remain in the provision" +
            "al status")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_206142_007")]
        [NUnit.Framework.Timeout(420000)]
        public virtual void ProvisionalSynonymsUnaffectedByStudyMigrationsShallRemainInTheProvisionalStatus()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Provisional synonyms unaffected by Study Migrations shall remain in the provision" +
                    "al status", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_206142_007",
                        "IncreaseTimeout_420000"});
#line 182
this.ScenarioSetup(scenarioInfo);
#line 184
    testRunner.Given("a \"Auto Code Synonyms Need Approval\" Coder setup with registered synonym list \"Me" +
                    "dDRA ENG 15.0 Current_List\" containing entry \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 185
    testRunner.And("an unactivated synonym list \"MedDRA ENG 16.0 New_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 186
 testRunner.And("\"1\" unapproved coding tasks with verbatim \"ACHES\" coded to term \"HEADACHE\" code \"" +
                    "10019211\" with a synonym created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 187
    testRunner.When("starting synonym list migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 188
    testRunner.And("performing study migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 189
 testRunner.Then("the synonym \"ACHES\" requires approval after synonym migration is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Term Path",
                        "Code"});
            table18.AddRow(new string[] {
                        "SOC",
                        "Nervous system disorders: 10029205",
                        "10029205"});
            table18.AddRow(new string[] {
                        "HLGT",
                        "Headaches: 10019231",
                        "10019231"});
            table18.AddRow(new string[] {
                        "HLT",
                        "Headaches NEC: 10019233",
                        "10019233"});
            table18.AddRow(new string[] {
                        "PT",
                        "Headache: 10019211",
                        "10019211"});
            table18.AddRow(new string[] {
                        "LLT",
                        "Headache: 10019211",
                        "10019211"});
#line 190
 testRunner.And("the master path for synonym \"ACHES\" after synonym migration is completed is", ((string)(null)), table18, "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Action",
                        "Status",
                        "Verbatim Term",
                        "Comment",
                        "Time Stamp"});
            table19.AddRow(new string[] {
                        "<User>",
                        "",
                        "Waiting Approval",
                        "ACHES",
                        "Version Change - From MedDRA-15_0-English To MedDRA-16_0-English",
                        "<TimeStamp>"});
#line 197
 testRunner.Then("the Coding History contains following information", ((string)(null)), table19, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Uploaded provisional synonyms shall be added in the provisional status to the tar" +
            "get synonym list during synonym list upgrades")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_206142_008")]
        [NUnit.Framework.Timeout(300000)]
        public virtual void UploadedProvisionalSynonymsShallBeAddedInTheProvisionalStatusToTheTargetSynonymListDuringSynonymListUpgrades()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Uploaded provisional synonyms shall be added in the provisional status to the tar" +
                    "get synonym list during synonym list upgrades", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_206142_008",
                        "IncreaseTimeout_300000"});
#line 205
this.ScenarioSetup(scenarioInfo);
#line 207
     testRunner.Given("a \"Auto Code Synonyms Need Approval\" Coder setup with registered synonym list \"Me" +
                    "dDRA ENG 15.0 Current_List\" containing entry \"ACHES|10019211|LLT|LLT:10019211;PT" +
                    ":10019211;HLT:10019233;HLGT:10019231;SOC:10029205|True||Provisional|Cluster head" +
                    "ache\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 208
     testRunner.And("an unactivated synonym list \"MedDRA ENG 16.0 New_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 209
     testRunner.When("starting synonym list migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 210
  testRunner.Then("the synonym for verbatim \"ACHES\" and code \"10019211\" should be active after synon" +
                    "ym migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Provisional synonyms shall be added in the provisional status to the target synon" +
            "ym list during synonym list upgrades")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_206142_009")]
        [NUnit.Framework.Timeout(300000)]
        public virtual void ProvisionalSynonymsShallBeAddedInTheProvisionalStatusToTheTargetSynonymListDuringSynonymListUpgrades()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Provisional synonyms shall be added in the provisional status to the target synon" +
                    "ym list during synonym list upgrades", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_206142_009",
                        "IncreaseTimeout_300000"});
#line 216
this.ScenarioSetup(scenarioInfo);
#line 218
     testRunner.Given("a \"Auto Code Synonyms Need Approval\" Coder setup with registered synonym list \"Me" +
                    "dDRA ENG 15.0 Current_List\" containing entry \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 219
  testRunner.And("an unactivated synonym list \"MedDRA ENG 16.0 New_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 220
  testRunner.And("\"1\" unapproved coding tasks with verbatim \"ACHES\" coded to term \"HEADACHE\" code \"" +
                    "10019211\" with a synonym created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 221
  testRunner.When("starting synonym list migration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 222
  testRunner.Then("the synonym \"ACHES\" requires approval after synonym migration is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Synonym Approval page shall filter by the Study")]
        [NUnit.Framework.IgnoreAttribute()]
        [NUnit.Framework.CategoryAttribute("DFT")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_206142_010")]
        [NUnit.Framework.Timeout(300000)]
        public virtual void TheSynonymApprovalPageShallFilterByTheStudy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Synonym Approval page shall filter by the Study", new string[] {
                        "DFT",
                        "Release2015.3.0",
                        "PBMCC_206142_010",
                        "IncreaseTimeout_300000",
                        "ignore"});
#line 230
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "SynonymListName",
                        "Dictionary",
                        "Version",
                        "Locale"});
            table20.AddRow(new string[] {
                        "MedDRA_List",
                        "MedDRA",
                        "15.0",
                        "ENG"});
            table20.AddRow(new string[] {
                        "WHODrug_List",
                        "WhoDrugDDEB2",
                        "201503",
                        "ENG"});
#line 232
 testRunner.Given("a \"Auto Code Synonyms Need Approval\" Coder setup with no tasks and no synonyms an" +
                    "d dictionaries", ((string)(null)), table20, "Given ");
#line 236
 testRunner.When("the following externally managed verbatim requests are made \"Tasks_30_MultiStudy_" +
                    "MultiSup_MultiDict.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 237
 testRunner.And("task \"ALPHA\" is coded to term \"HEADACHE\" at search level \"Low Level Term\" with co" +
                    "de \"10019211\" at level \"LLT\" and a synonym is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 238
 testRunner.And("task \"TANGO\" is coded to term \"VITAMIN-C\" at search level \"Trade Name\" with code " +
                    "\"000080 01 517\" at level \"TN\" and a synonym is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim",
                        "DictionaryAndLocale",
                        "ListName"});
            table21.AddRow(new string[] {
                        "ALPHA",
                        "MedDRA (ENG)",
                        "MedDRA_List (15.0)"});
            table21.AddRow(new string[] {
                        "TANGO",
                        "WhoDrugDDEB2 (ENG)",
                        "WHODrug_List (201503)"});
#line 239
 testRunner.Then("the synonyms for approval are limited to those synonyms that meet the filter crit" +
                    "eria when filtered by study \"All Studies\"", ((string)(null)), table21, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim",
                        "DictionaryAndLocale",
                        "ListName"});
            table22.AddRow(new string[] {
                        "ALPHA",
                        "MedDRA (ENG)",
                        "MedDRA_List (15.0)"});
#line 243
 testRunner.Then("the synonyms for approval are limited to those synonyms that meet the filter crit" +
                    "eria when filtered by study \"Study\"", ((string)(null)), table22, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim",
                        "DictionaryAndLocale",
                        "ListName"});
            table23.AddRow(new string[] {
                        "TANGO",
                        "WhoDrugDDEB2 (ENG)",
                        "WHODrug_List (201503)"});
#line 246
 testRunner.Then("the synonyms for approval are limited to those synonyms that meet the filter crit" +
                    "eria when filtered by study \"Dev\"", ((string)(null)), table23, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Synonym Approval page shall filter by the Dictionary")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_206142_011")]
        [NUnit.Framework.Timeout(300000)]
        public virtual void TheSynonymApprovalPageShallFilterByTheDictionary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Synonym Approval page shall filter by the Dictionary", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_206142_011",
                        "IncreaseTimeout_300000"});
#line 254
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "SynonymListName",
                        "Dictionary",
                        "Version",
                        "Locale"});
            table24.AddRow(new string[] {
                        "MedDRA_List",
                        "MedDRA",
                        "15.0",
                        "ENG"});
            table24.AddRow(new string[] {
                        "WHODrug_List",
                        "WhoDrugDDEB2",
                        "201503",
                        "ENG"});
#line 256
 testRunner.Given("a \"Auto Code Synonyms Need Approval\" Coder setup with no tasks and no synonyms an" +
                    "d dictionaries", ((string)(null)), table24, "Given ");
#line 260
 testRunner.When("the following externally managed verbatim requests are made \"Tasks_30_MultiStudy_" +
                    "MultiSup_MultiDict.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 261
 testRunner.And("task \"ALPHA\" is coded to term \"HEADACHE\" at search level \"Low Level Term\" with co" +
                    "de \"10019211\" at level \"LLT\" and a synonym is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 262
 testRunner.And("task \"TANGO\" is coded to term \"VITAMIN-C\" at search level \"Trade Name\" with code " +
                    "\"000080 01 517\" at level \"TN\" and a synonym is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim",
                        "DictionaryAndLocale"});
            table25.AddRow(new string[] {
                        "ALPHA",
                        "MedDRA (ENG)"});
            table25.AddRow(new string[] {
                        "TANGO",
                        "WhoDrugDDEB2 (ENG)"});
#line 263
 testRunner.Then("the synonyms for approval are limited to those synonyms that meet the filter crit" +
                    "eria when filtered by dictionary \"All Dictionary Types\"", ((string)(null)), table25, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim",
                        "DictionaryAndLocale"});
            table26.AddRow(new string[] {
                        "ALPHA",
                        "MedDRA (ENG)"});
#line 267
 testRunner.Then("the synonyms for approval are limited to those synonyms that meet the filter crit" +
                    "eria when filtered by dictionary \"MedDRA (ENG)\"", ((string)(null)), table26, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim",
                        "DictionaryAndLocale"});
            table27.AddRow(new string[] {
                        "TANGO",
                        "WhoDrugDDEB2 (ENG)"});
#line 270
 testRunner.Then("the synonyms for approval are limited to those synonyms that meet the filter crit" +
                    "eria when filtered by dictionary \"WhoDrugDDEB2 (ENG)\"", ((string)(null)), table27, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Synonym Approval page shall filter by the Synonym List")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_206142_012")]
        [NUnit.Framework.Timeout(300000)]
        public virtual void TheSynonymApprovalPageShallFilterByTheSynonymList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Synonym Approval page shall filter by the Synonym List", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_206142_012",
                        "IncreaseTimeout_300000"});
#line 278
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "SynonymListName",
                        "Dictionary",
                        "Version",
                        "Locale"});
            table28.AddRow(new string[] {
                        "MedDRA_List",
                        "MedDRA",
                        "15.0",
                        "ENG"});
            table28.AddRow(new string[] {
                        "WHODrug_List",
                        "WhoDrugDDEB2",
                        "201503",
                        "ENG"});
#line 280
 testRunner.Given("a \"Auto Code Synonyms Need Approval\" Coder setup with no tasks and no synonyms an" +
                    "d dictionaries", ((string)(null)), table28, "Given ");
#line 284
 testRunner.When("the following externally managed verbatim requests are made \"Tasks_30_MultiStudy_" +
                    "MultiSup_MultiDict.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 285
 testRunner.And("task \"ALPHA\" is coded to term \"HEADACHE\" at search level \"Low Level Term\" with co" +
                    "de \"10019211\" at level \"LLT\" and a synonym is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 286
 testRunner.And("task \"TANGO\" is coded to term \"VITAMIN-C\" at search level \"Trade Name\" with code " +
                    "\"000080 01 517\" at level \"TN\" and a synonym is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim",
                        "ListName"});
            table29.AddRow(new string[] {
                        "ALPHA",
                        "MedDRA_List (15.0)"});
            table29.AddRow(new string[] {
                        "TANGO",
                        "WHODrug_List (201503)"});
#line 287
 testRunner.Then("the synonyms for approval are limited to those synonyms that meet the filter crit" +
                    "eria when filtered by synonym list \"All Synonym Lists\"", ((string)(null)), table29, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim",
                        "ListName"});
            table30.AddRow(new string[] {
                        "ALPHA",
                        "MedDRA_List (15.0)"});
#line 291
 testRunner.Then("the synonyms for approval are limited to those synonyms that meet the filter crit" +
                    "eria when filtered by synonym list \"MedDRA_List (15.0)\"", ((string)(null)), table30, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim",
                        "ListName"});
            table31.AddRow(new string[] {
                        "TANGO",
                        "WHODrug_List (201503)"});
#line 294
 testRunner.Then("the synonyms for approval are limited to those synonyms that meet the filter crit" +
                    "eria when filtered by synonym list \"WHODrug_List (201503)\"", ((string)(null)), table31, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Synonym Approval page shall filter by the Date")]
        [NUnit.Framework.IgnoreAttribute()]
        [NUnit.Framework.CategoryAttribute("DFT")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_206142_013")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void TheSynonymApprovalPageShallFilterByTheDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Synonym Approval page shall filter by the Date", new string[] {
                        "DFT",
                        "Release2015.3.0",
                        "PBMCC_206142_013",
                        "IncreaseTimeout_600000",
                        "ignore"});
#line 304
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "SynonymListName",
                        "Dictionary",
                        "Version",
                        "Locale"});
            table32.AddRow(new string[] {
                        "MedDRA_List",
                        "MedDRA",
                        "15.0",
                        "ENG"});
            table32.AddRow(new string[] {
                        "WHODrug_List",
                        "WhoDrugDDEB2",
                        "201503",
                        "ENG"});
#line 306
 testRunner.Given("a \"Auto Code Synonyms Need Approval\" Coder setup with no tasks and no synonyms an" +
                    "d dictionaries", ((string)(null)), table32, "Given ");
#line 310
 testRunner.When("the following externally managed verbatim requests are made \"Tasks_30_MultiStudy_" +
                    "MultiSup_MultiDict.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 311
 testRunner.And("a browse and code for task \"ALPHA\" is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim",
                        "SearchText",
                        "SearchLevel",
                        "Code",
                        "Level",
                        "CreateSynonym"});
            table33.AddRow(new string[] {
                        "ALPHA",
                        "HEADACHE",
                        "Low Level Term",
                        "10019211",
                        "LLT",
                        "True"});
            table33.AddRow(new string[] {
                        "ALPHA AMBER",
                        "VITAMIN-C",
                        "Trade Name",
                        "000080 01 517",
                        "TN",
                        "True"});
            table33.AddRow(new string[] {
                        "AMBER CHARLIE",
                        "VITAMIN-C",
                        "Trade Name",
                        "000080 01 517",
                        "TN",
                        "True"});
            table33.AddRow(new string[] {
                        "AMBER DELTA",
                        "VITAMIN-C",
                        "Trade Name",
                        "000080 01 517",
                        "TN",
                        "True"});
            table33.AddRow(new string[] {
                        "BRAVO",
                        "HEADACHE",
                        "Low Level Term",
                        "10019211",
                        "LLT",
                        "True"});
            table33.AddRow(new string[] {
                        "BRAVO AMBER",
                        "VITAMIN-C",
                        "Trade Name",
                        "000080 01 517",
                        "TN",
                        "True"});
            table33.AddRow(new string[] {
                        "CHARLIE",
                        "HEADACHE",
                        "Low Level Term",
                        "10019211",
                        "LLT",
                        "True"});
            table33.AddRow(new string[] {
                        "DELTA",
                        "HEADACHE",
                        "Low Level Term",
                        "10019211",
                        "LLT",
                        "True"});
            table33.AddRow(new string[] {
                        "ECHO",
                        "HEADACHE",
                        "Low Level Term",
                        "10019211",
                        "LLT",
                        "True"});
            table33.AddRow(new string[] {
                        "FOXTROT",
                        "HEADACHE",
                        "Low Level Term",
                        "10019211",
                        "LLT",
                        "True"});
#line 312
 testRunner.And("I code next available task", ((string)(null)), table33, "And ");
#line 324
 testRunner.And("the time elapsed since synonym \"AMBER CHARLIE \" was created is \"3\" days", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 325
 testRunner.And("the time elapsed since synonym \"AMBER DELTA\" was created is \"10\" days", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 326
 testRunner.And("the time elapsed since synonym \"BRAVO\" was created is \"20\" days", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 327
 testRunner.And("the time elapsed since synonym \"BRAVO AMBER\" was created is \"40\" days", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 328
 testRunner.And("the time elapsed since synonym \"CHARLIE\" was updated is \"3\" days", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 329
 testRunner.And("the time elapsed since synonym \"DELTA\" was updated is \"10\" days", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 330
 testRunner.And("the time elapsed since synonym \"ECHO\" was updated is \"20\" days", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 331
 testRunner.And("the time elapsed since synonym \"FOXTROT\" was updated is \"40\" days", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "DateRange",
                        "ExpectedVerbatims"});
            table34.AddRow(new string[] {
                        "All Dates",
                        "ALPHA, ALPHA AMBER, AMBER CHARLIE, AMBER DELTA, BRAVO, BRAVO AMBER, CHARLIE, DELT" +
                            "A, ECHO, FOXTROT"});
            table34.AddRow(new string[] {
                        "Today",
                        "ALPHA, ALPHA AMBER"});
            table34.AddRow(new string[] {
                        "Last Seven Days",
                        "AMBER CHARLIE, CHARLIE"});
            table34.AddRow(new string[] {
                        "Between Seven And Fourteen Days",
                        "AMBER DELTA, DELTA"});
            table34.AddRow(new string[] {
                        "Between Fourteen And Thirty Days",
                        "BRAVO, ECHO"});
            table34.AddRow(new string[] {
                        "Older Than Thirty Days",
                        "BRAVO AMBER, FOXTROT"});
#line 332
 testRunner.Then("the synonyms for approval are limited to those synonyms that meet the filter crit" +
                    "eria when filtered by date range", ((string)(null)), table34, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Synonym Approval page shall filter by the Synonym Term")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_206142_014")]
        [NUnit.Framework.Timeout(300000)]
        public virtual void TheSynonymApprovalPageShallFilterByTheSynonymTerm()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Synonym Approval page shall filter by the Synonym Term", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_206142_014",
                        "IncreaseTimeout_300000"});
#line 345
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "SynonymListName",
                        "Dictionary",
                        "Version",
                        "Locale"});
            table35.AddRow(new string[] {
                        "MedDRA_List",
                        "MedDRA",
                        "15.0",
                        "ENG"});
            table35.AddRow(new string[] {
                        "WHODrug_List",
                        "WhoDrugDDEB2",
                        "201503",
                        "ENG"});
#line 347
 testRunner.Given("a \"Auto Code Synonyms Need Approval\" Coder setup with no tasks and no synonyms an" +
                    "d dictionaries", ((string)(null)), table35, "Given ");
#line 351
 testRunner.When("the following externally managed verbatim requests are made \"Tasks_30_MultiStudy_" +
                    "MultiSup_MultiDict.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 352
 testRunner.And("task \"ALPHA\" is coded to term \"HEADACHE\" at search level \"Low Level Term\" with co" +
                    "de \"10019211\" at level \"LLT\" and a synonym is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 353
 testRunner.And("task \"AMBER CHARLIE\" is coded to term \"VITAMIN-C\" at search level \"Trade Name\" wi" +
                    "th code \"000080 01 517\" at level \"TN\" and a synonym is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 354
 testRunner.And("task \"AMBER DELTA\" is coded to term \"VITAMIN-C\" at search level \"Trade Name\" with" +
                    " code \"000080 01 517\" at level \"TN\" and a synonym is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "SearchText",
                        "ExpectedVerbatims"});
            table36.AddRow(new string[] {
                        "ALPHA",
                        "ALPHA"});
            table36.AddRow(new string[] {
                        "ALP*",
                        "ALPHA"});
            table36.AddRow(new string[] {
                        "AMBER CHARLIE",
                        "AMBER CHARLIE, AMBER DELTA"});
            table36.AddRow(new string[] {
                        "AMBER DELTA",
                        "AMBER CHARLIE, AMBER DELTA"});
            table36.AddRow(new string[] {
                        "AMBER",
                        "AMBER CHARLIE, AMBER DELTA"});
            table36.AddRow(new string[] {
                        "AMB*",
                        "AMBER CHARLIE, AMBER DELTA"});
            table36.AddRow(new string[] {
                        "AMBER*CHARLIE",
                        "AMBER CHARLIE"});
            table36.AddRow(new string[] {
                        "AMBER*DELTA",
                        "AMBER DELTA"});
#line 355
 testRunner.Then("the synonyms for approval are limited to those synonyms that meet the filter crit" +
                    "eria when filtered by search text", ((string)(null)), table36, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Synonym Details page shall filter by status")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_206142_015")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void TheSynonymDetailsPageShallFilterByStatus()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Synonym Details page shall filter by status", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_206142_015",
                        "IncreaseTimeout_600000"});
#line 370
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "SynonymListName",
                        "Dictionary",
                        "Version",
                        "Locale"});
            table37.AddRow(new string[] {
                        "MedDRA_List",
                        "MedDRA",
                        "15.0",
                        "ENG"});
            table37.AddRow(new string[] {
                        "WHODrug_List",
                        "WhoDrugDDEB2",
                        "201503",
                        "ENG"});
#line 372
    testRunner.Given("a \"Auto Code Synonyms Need Approval\" Coder setup with no tasks and no synonyms an" +
                    "d dictionaries", ((string)(null)), table37, "Given ");
#line 376
 testRunner.When("the following externally managed verbatim requests are made \"Tasks_30_MultiStudy_" +
                    "MultiSup_MultiDict.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 377
 testRunner.And("task \"TANGO\" is coded to term \"ANTIVENOM\" at search level \"Trade Name\" with code " +
                    "\"003416 01 006\" at level \"TN\" and a synonym is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 378
 testRunner.And("task \"UNIFORM\" is coded to term \"ANTIVENOM\" at search level \"Trade Name\" with cod" +
                    "e \"003416 01 006\" at level \"TN\" and a synonym is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 379
 testRunner.And("task \"VICTOR\" is coded to term \"ANTIVENOM\" at search level \"Trade Name\" with code" +
                    " \"003416 01 006\" at level \"TN\" and a synonym is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 380
 testRunner.And("task \"WHISKEY\" is coded to term \"ANTIVENOM\" at search level \"Trade Name\" with cod" +
                    "e \"003416 01 006\" at level \"TN\" and a synonym is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 381
 testRunner.And("task \"XRAY\" is coded to term \"ANTIVENOM\" at search level \"Trade Name\" with code \"" +
                    "003416 01 006\" at level \"TN\" and a synonym is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 382
 testRunner.When("the synonym for verbatim \"TANGO\" and code \"003416 01 006\" is approved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 383
 testRunner.And("the synonym for verbatim \"VICTOR\" and code \"003416 01 006\" is approved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Status",
                        "SearchText",
                        "ExpectedVerbatim",
                        "ExpectedStatus"});
            table38.AddRow(new string[] {
                        "All",
                        "TANGO",
                        "TANGO",
                        "Active"});
            table38.AddRow(new string[] {
                        "All",
                        "UNIFORM",
                        "UNIFORM",
                        "Provisional"});
            table38.AddRow(new string[] {
                        "All",
                        "VICTOR",
                        "VICTOR",
                        "Active"});
            table38.AddRow(new string[] {
                        "All",
                        "WHISKEY",
                        "WHISKEY",
                        "Provisional"});
            table38.AddRow(new string[] {
                        "All",
                        "XRAY",
                        "XRAY",
                        "Provisional"});
            table38.AddRow(new string[] {
                        "Provisional",
                        "UNIFORM",
                        "UNIFORM",
                        "Provisional"});
            table38.AddRow(new string[] {
                        "Provisional",
                        "WHISKEY",
                        "WHISKEY",
                        "Provisional"});
            table38.AddRow(new string[] {
                        "Provisional",
                        "XRAY",
                        "XRAY",
                        "Provisional"});
            table38.AddRow(new string[] {
                        "Active",
                        "TANGO",
                        "TANGO",
                        "Active"});
            table38.AddRow(new string[] {
                        "Active",
                        "VICTOR",
                        "VICTOR",
                        "Active"});
#line 384
 testRunner.Then("the synonym details are limited to those synonyms that meet the filter criteria w" +
                    "hen filtered by status", ((string)(null)), table38, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Synonym Details page shall filter by verbatim or term")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_206142_016")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void TheSynonymDetailsPageShallFilterByVerbatimOrTerm()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Synonym Details page shall filter by verbatim or term", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_206142_016",
                        "IncreaseTimeout_600000"});
#line 402
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "SynonymListName",
                        "Dictionary",
                        "Version",
                        "Locale"});
            table39.AddRow(new string[] {
                        "MedDRA_List",
                        "MedDRA",
                        "15.0",
                        "ENG"});
            table39.AddRow(new string[] {
                        "WHODrug_List",
                        "WhoDrugDDEB2",
                        "201503",
                        "ENG"});
#line 404
 testRunner.Given("a \"Auto Code Synonyms Need Approval\" Coder setup with no tasks and no synonyms an" +
                    "d dictionaries", ((string)(null)), table39, "Given ");
#line 408
 testRunner.When("the following externally managed verbatim requests are made \"Tasks_30_MultiStudy_" +
                    "MultiSup_MultiDict.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 409
 testRunner.And("task \"AMBER CHARLIE\" is coded to term \"VITAMIN-A\" at search level \"Trade Name\" wi" +
                    "th code \"000560 01 078\" at level \"TN\" and a synonym is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 410
 testRunner.And("task \"AMBER DELTA\" is coded to term \"ANTIVENOM\" at search level \"Trade Name\" with" +
                    " code \"003416 01 006\" at level \"TN\" and a synonym is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 411
 testRunner.And("task \"TANGO\" is coded to term \"VITAMIN-A\" at search level \"Trade Name\" with code " +
                    "\"000560 01 078\" at level \"TN\" and a synonym is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 412
 testRunner.And("task \"UNIFORM\" is coded to term \"VITAMIN-C\" at search level \"Trade Name\" with cod" +
                    "e \"000080 01 517\" at level \"TN\" and a synonym is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 413
 testRunner.And("task \"VICTOR\" is coded to term \"ANTIVENOM\" at search level \"Trade Name\" with code" +
                    " \"003416 01 006\" at level \"TN\" and a synonym is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 414
 testRunner.When("the synonym for verbatim \"TANGO\" and code \"000560 01 078\" is approved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 415
 testRunner.When("the synonym for verbatim \"VICTOR\" and code \"003416 01 006\" is approved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "SearchText",
                        "ExpectedVerbatims",
                        "SearchBy"});
            table40.AddRow(new string[] {
                        "TANGO",
                        "TANGO",
                        "By Verbatim"});
            table40.AddRow(new string[] {
                        "TAN*",
                        "TANGO",
                        "By Verbatim"});
            table40.AddRow(new string[] {
                        "UNIFORM",
                        "UNIFORM",
                        "By Verbatim"});
            table40.AddRow(new string[] {
                        "VICTOR",
                        "VICTOR",
                        "By Verbatim"});
            table40.AddRow(new string[] {
                        "AMBER CHARLIE",
                        "AMBER CHARLIE, AMBER DELTA",
                        "By Verbatim"});
            table40.AddRow(new string[] {
                        "AMBER DELTA",
                        "AMBER CHARLIE, AMBER DELTA",
                        "By Verbatim"});
            table40.AddRow(new string[] {
                        "AMBER",
                        "AMBER CHARLIE, AMBER DELTA",
                        "By Verbatim"});
            table40.AddRow(new string[] {
                        "AMB*",
                        "AMBER CHARLIE, AMBER DELTA",
                        "By Verbatim"});
            table40.AddRow(new string[] {
                        "AMBER*CHARLIE",
                        "AMBER CHARLIE",
                        "By Verbatim"});
            table40.AddRow(new string[] {
                        "AMBER*DELTA",
                        "AMBER DELTA",
                        "By Verbatim"});
#line 416
 testRunner.Then("the synonym details are limited to those synonyms that meet the filter criteria w" +
                    "hen filtered by search text", ((string)(null)), table40, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
