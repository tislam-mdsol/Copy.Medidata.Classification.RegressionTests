// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Coder.RegressionTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("This feature will demonstrate Coder\'s functionality on generating Coding Decision" +
        " Reports which contains task information about terms that have gone through codi" +
        "ng and approval.")]
    [NUnit.Framework.CategoryAttribute("specCodingDecisionsReport.feature")]
    [NUnit.Framework.CategoryAttribute("CoderCore")]
    public partial class ThisFeatureWillDemonstrateCoderSFunctionalityOnGeneratingCodingDecisionReportsWhichContainsTaskInformationAboutTermsThatHaveGoneThroughCodingAndApproval_Feature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "specCodingDecisionsReport.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "This feature will demonstrate Coder\'s functionality on generating Coding Decision" +
                    " Reports which contains task information about terms that have gone through codi" +
                    "ng and approval.", "", ProgrammingLanguage.CSharp, new string[] {
                        "specCodingDecisionsReport.feature",
                        "CoderCore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Coder will allow a user to be able to export a Coding Decision Report, which cont" +
            "ains information on coded and approved coding decisions via verbatim text")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_189285_001")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void CoderWillAllowAUserToBeAbleToExportACodingDecisionReportWhichContainsInformationOnCodedAndApprovedCodingDecisionsViaVerbatimText()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Coder will allow a user to be able to export a Coding Decision Report, which cont" +
                    "ains information on coded and approved coding decisions via verbatim text", new string[] {
                        "VAL",
                        "PBMCC_189285_001",
                        "Release2015.3.0"});
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
    testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 11" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
 testRunner.And("coding task \"Headache\" for dictionary level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.When("a new report type \"Coding Decision\" is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
 testRunner.And("searching for the verbatim \"Headache\" in Coding Decisions Report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.And("searching for auto coded items in Coding Decisions Report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And("exporting all columns in the Coding Decisions Report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary Level",
                        "Coded By",
                        "Current Workflow State",
                        "Term",
                        "Code",
                        "Is Auto Coded",
                        "Priority",
                        "Logline",
                        "Path"});
            table1.AddRow(new string[] {
                        "Headache",
                        "Low Level Term",
                        "System User",
                        "Completed",
                        "Headache",
                        "10019211",
                        "True",
                        "1",
                        "1",
                        "SOC: Nervous system disorders: 10029205; HLGT: Headaches: 10019231; HLT: Headache" +
                            "s NEC: 10019233; PT: Headache: 10019211; LLT: Headache: 10019211"});
#line 15
 testRunner.Then("the Coding Decisions Report should contain the following", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the user is able to export using verbatim for Coding Decisions Report")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_197264_001")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.2")]
        public virtual void VerifyTheUserIsAbleToExportUsingVerbatimForCodingDecisionsReport()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the user is able to export using verbatim for Coding Decisions Report", new string[] {
                        "VAL",
                        "PBMCC_197264_001",
                        "Release2015.3.2"});
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
 testRunner.Given("a \"Waiting Approval\" Coder setup with no tasks and no synonyms and dictionary \"Me" +
                    "dDRA ENG 15.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
 testRunner.And("coding task \"Adverse Event Term 1\" for dictionary level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Operator",
                        "Attribute",
                        "Text"});
            table2.AddRow(new string[] {
                        "Has",
                        "System Organ Class",
                        "Vascular disorders"});
#line 25
    testRunner.When("task \"Adverse Event Term 1\" is coded to term \"Dizzy on standing\" at search level " +
                    "\"Low Level Term\" with code \"10013581\" at level \"LLT\" and higher level terms", ((string)(null)), table2, "When ");
#line 28
 testRunner.And("a new report type \"Coding Decisions\" is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
 testRunner.And("searching for the verbatim \"Adverse Event Term 1\" in Coding Decisions Report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
 testRunner.And("searching for auto coded items in Coding Decisions Report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
 testRunner.And("exporting all columns in the Coding Decisions Report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary Level",
                        "Current Workflow State",
                        "Term",
                        "Code",
                        "Is Auto Coded",
                        "Priority",
                        "Logline",
                        "Path"});
            table3.AddRow(new string[] {
                        "Adverse Event Term 1",
                        "Low Level Term",
                        "Waiting Approval",
                        "Dizzy on standing",
                        "10013581",
                        "False",
                        "1",
                        "1",
                        "SOC: Vascular disorders: 10047065; HLGT: Decreased and nonspecific blood pressure" +
                            " disorders and shock: 10011954; HLT: Circulatory collapse and shock: 10009193; P" +
                            "T: Dizziness postural: 10013578; LLT: Dizzy on standing: 10013581"});
#line 32
 testRunner.Then("the Coding Decisions Report should contain the following", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the user is able to export using verbatim for Coding Decisions Report with" +
            " Auto Coded unchecked")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_197264_002")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.2")]
        public virtual void VerifyTheUserIsAbleToExportUsingVerbatimForCodingDecisionsReportWithAutoCodedUnchecked()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the user is able to export using verbatim for Coding Decisions Report with" +
                    " Auto Coded unchecked", new string[] {
                        "VAL",
                        "PBMCC_197264_002",
                        "Release2015.3.2"});
#line 39
this.ScenarioSetup(scenarioInfo);
#line 40
 testRunner.Given("a \"Waiting Approval\" Coder setup with no tasks and no synonyms and dictionary \"Me" +
                    "dDRA ENG 15.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 41
 testRunner.And("coding task \"PAIN IN UPPER CHEST\" for dictionary level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Operator",
                        "Attribute",
                        "Text"});
            table4.AddRow(new string[] {
                        "Has",
                        "System Organ Class",
                        "General disorders and administration site conditions"});
#line 42
    testRunner.When("task \"PAIN IN UPPER CHEST\" is coded to term \"Acute chest pain\" at search level \"L" +
                    "ow Level Term\" with code \"10066987\" at level \"LLT\" and higher level terms", ((string)(null)), table4, "When ");
#line 45
 testRunner.And("a new report type \"Coding Decisions\" is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
 testRunner.And("searching for the verbatim \"PAIN IN UPPER CHEST\" in Coding Decisions Report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
 testRunner.And("exporting all columns in the Coding Decisions Report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary Level",
                        "Current Workflow State",
                        "Term",
                        "Code",
                        "Is Auto Coded",
                        "Priority",
                        "Logline",
                        "Path"});
            table5.AddRow(new string[] {
                        "PAIN IN UPPER CHEST",
                        "Low Level Term",
                        "Waiting Approval",
                        "Acute chest pain",
                        "10066987",
                        "False",
                        "1",
                        "1",
                        "SOC: General disorders and administration site conditions: 10018065; HLGT: Genera" +
                            "l system disorders NEC: 10018073; HLT: Pain and discomfort NEC: 10033372; PT: Ch" +
                            "est pain: 10008479; LLT: Acute chest pain: 10066987"});
#line 48
 testRunner.Then("the Coding Decisions Report should contain the following", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the user is able to select statuses in current status for Coding Decisions" +
            " Report")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_197264_003")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.2")]
        public virtual void VerifyTheUserIsAbleToSelectStatusesInCurrentStatusForCodingDecisionsReport()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the user is able to select statuses in current status for Coding Decisions" +
                    " Report", new string[] {
                        "VAL",
                        "PBMCC_197264_003",
                        "Release2015.3.2"});
#line 55
this.ScenarioSetup(scenarioInfo);
#line 56
 testRunner.Given("a \"Waiting Approval\" Coder setup with no tasks and no synonyms and dictionary \"Me" +
                    "dDRA ENG 15.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 57
 testRunner.And("coding task \"Adverse Event Term 1\" for dictionary level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Operator",
                        "Attribute",
                        "Text"});
            table6.AddRow(new string[] {
                        "Has",
                        "System Organ Class",
                        "Vascular disorders"});
#line 58
    testRunner.When("task \"Adverse Event Term 1\" is coded to term \"Dizzy on standing\" at search level " +
                    "\"Low Level Term\" with code \"10013581\" at level \"LLT\" and higher level terms", ((string)(null)), table6, "When ");
#line 61
 testRunner.And("a new report type \"Coding Decisions\" is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
 testRunner.And("searching for the verbatim \"Adverse Event Term 1\" in Coding Decisions Report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
 testRunner.And("searching for the status \"Waiting Approval\" in Coding Decisions Report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
 testRunner.And("searching for auto coded items in Coding Decisions Report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
 testRunner.And("exporting all columns in the Coding Decisions Report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary Level",
                        "Current Workflow State",
                        "Term",
                        "Code",
                        "Is Auto Coded",
                        "Priority",
                        "Logline",
                        "Path"});
            table7.AddRow(new string[] {
                        "Adverse Event Term 1",
                        "Low Level Term",
                        "Waiting Approval",
                        "Dizzy on standing",
                        "10013581",
                        "False",
                        "1",
                        "1",
                        "SOC: Vascular disorders: 10047065; HLGT: Decreased and nonspecific blood pressure" +
                            " disorders and shock: 10011954; HLT: Circulatory collapse and shock: 10009193; P" +
                            "T: Dizziness postural: 10013578; LLT: Dizzy on standing: 10013581"});
#line 66
 testRunner.Then("the Coding Decisions Report should contain the following", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the user is able to enter a start and end date for Coding Decisions Report" +
            "")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_197264_004")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.2")]
        public virtual void VerifyTheUserIsAbleToEnterAStartAndEndDateForCodingDecisionsReport()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the user is able to enter a start and end date for Coding Decisions Report" +
                    "", new string[] {
                        "VAL",
                        "PBMCC_197264_004",
                        "Release2015.3.2"});
#line 74
this.ScenarioSetup(scenarioInfo);
#line 75
 testRunner.Given("a \"Waiting Approval\" Coder setup with no tasks and no synonyms and dictionary \"Me" +
                    "dDRA ENG 15.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 76
 testRunner.And("coding task \"Adverse Event Term 1\" for dictionary level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Operator",
                        "Attribute",
                        "Text"});
            table8.AddRow(new string[] {
                        "Has",
                        "System Organ Class",
                        "Vascular disorders"});
#line 77
 testRunner.When("task \"Adverse Event Term 1\" is coded to term \"Dizzy on standing\" at search level " +
                    "\"Low Level Term\" with code \"10013581\" at level \"LLT\" and higher level terms", ((string)(null)), table8, "When ");
#line 80
 testRunner.And("a new report type \"Coding Decisions\" is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
 testRunner.And("searching for the verbatim \"Adverse Event Term 1\" in Coding Decisions Report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
 testRunner.And("searching for start date of \"01 Jan 2015\" and end date of \"01 Jan 2050\" in Coding" +
                    " Decisions Report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
 testRunner.And("searching for auto coded items in Coding Decisions Report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
 testRunner.And("exporting all columns in the Coding Decisions Report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary Level",
                        "Current Workflow State",
                        "Term",
                        "Code",
                        "Is Auto Coded",
                        "Priority",
                        "Logline",
                        "Path"});
            table9.AddRow(new string[] {
                        "Adverse Event Term 1",
                        "Low Level Term",
                        "Waiting Approval",
                        "Dizzy on standing",
                        "10013581",
                        "False",
                        "1",
                        "1",
                        "SOC: Vascular disorders: 10047065; HLGT: Decreased and nonspecific blood pressure" +
                            " disorders and shock: 10011954; HLT: Circulatory collapse and shock: 10009193; P" +
                            "T: Dizziness postural: 10013578; LLT: Dizzy on standing: 10013581"});
#line 85
 testRunner.Then("the Coding Decisions Report should contain the following", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the user is able to export multiple terms for Coding Decisions Report")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_197264_005")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.2")]
        [NUnit.Framework.Timeout(3000000)]
        public virtual void VerifyTheUserIsAbleToExportMultipleTermsForCodingDecisionsReport()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the user is able to export multiple terms for Coding Decisions Report", new string[] {
                        "VAL",
                        "PBMCC_197264_005",
                        "Release2015.3.2",
                        "IncreaseTimeout_3000000"});
#line 94
this.ScenarioSetup(scenarioInfo);
#line 95
 testRunner.Given("a \"Waiting Approval\" Coder setup with no tasks and no synonyms and dictionary \"Me" +
                    "dDRA ENG 15.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary",
                        "Dictionary Level",
                        "Is Approval Required",
                        "Is Auto Approval",
                        "Locale"});
            table10.AddRow(new string[] {
                        "Adverse Event Term 1",
                        "MedDRA",
                        "LLT",
                        "TRUE",
                        "FALSE",
                        "eng"});
            table10.AddRow(new string[] {
                        "Adverse Event Term 1",
                        "MedDRA",
                        "LLT",
                        "TRUE",
                        "FALSE",
                        "eng"});
#line 96
 testRunner.When("uploading MEV content", ((string)(null)), table10, "When ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Operator",
                        "Attribute",
                        "Text"});
            table11.AddRow(new string[] {
                        "Has",
                        "System Organ Class",
                        "Vascular disorders"});
#line 100
 testRunner.And("task \"Adverse Event Term 1\" is coded to term \"Dizzy on standing\" at search level " +
                    "\"Low Level Term\" with code \"10013581\" at level \"LLT\" and higher level terms", ((string)(null)), table11, "And ");
#line 103
 testRunner.And("a new report type \"Coding Decisions\" is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 104
 testRunner.And("searching for the verbatim \"Adverse Event Term 1\" in Coding Decisions Report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 105
 testRunner.And("searching for auto coded items in Coding Decisions Report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 106
 testRunner.And("exporting all columns in the Coding Decisions Report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary Level",
                        "Current Workflow State",
                        "Term",
                        "Code",
                        "Is Auto Coded",
                        "Priority",
                        "Logline",
                        "Path"});
            table12.AddRow(new string[] {
                        "Adverse Event Term 1",
                        "Low Level Term",
                        "Waiting Approval",
                        "Dizzy on standing",
                        "10013581",
                        "False",
                        "1",
                        "Line 1",
                        "SOC: Vascular disorders: 10047065; HLGT: Decreased and nonspecific blood pressure" +
                            " disorders and shock: 10011954; HLT: Circulatory collapse and shock: 10009193; P" +
                            "T: Dizziness postural: 10013578; LLT: Dizzy on standing: 10013581"});
            table12.AddRow(new string[] {
                        "Adverse Event Term 1",
                        "Low Level Term",
                        "Waiting Approval",
                        "Dizzy on standing",
                        "10013581",
                        "False",
                        "1",
                        "Line 1",
                        "SOC: Vascular disorders: 10047065; HLGT: Decreased and nonspecific blood pressure" +
                            " disorders and shock: 10011954; HLT: Circulatory collapse and shock: 10009193; P" +
                            "T: Dizziness postural: 10013578; LLT: Dizzy on standing: 10013581"});
#line 107
 testRunner.Then("the Coding Decisions Report should contain the following", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the user is able to export using verbatim on a non production study for Co" +
            "ding Decisions Report")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_197264_006")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.2")]
        public virtual void VerifyTheUserIsAbleToExportUsingVerbatimOnANonProductionStudyForCodingDecisionsReport()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the user is able to export using verbatim on a non production study for Co" +
                    "ding Decisions Report", new string[] {
                        "VAL",
                        "PBMCC_197264_006",
                        "Release2015.3.2"});
#line 116
this.ScenarioSetup(scenarioInfo);
#line 117
 testRunner.Given("a \"Waiting Approval\" Coder setup for a non-production study with no tasks and no " +
                    "synonyms and dictionary \"MedDRA ENG 15.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 118
 testRunner.And("coding task \"Adverse Event Term 2\" for dictionary level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Operator",
                        "Attribute",
                        "Text"});
            table13.AddRow(new string[] {
                        "Has",
                        "System Organ Class",
                        "Vascular disorders"});
#line 119
 testRunner.When("task \"Adverse Event Term 2\" is coded to term \"Dizzy on standing\" at search level " +
                    "\"Low Level Term\" with code \"10013581\" at level \"LLT\" and higher level terms", ((string)(null)), table13, "When ");
#line 122
 testRunner.And("a new report type \"Coding Decisions\" is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 123
 testRunner.And("searching for the verbatim \"Adverse Event Term 2\" in Coding Decisions Report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 124
 testRunner.And("searching for auto coded items in Coding Decisions Report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 125
 testRunner.And("exporting all columns in the Coding Decisions Report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Study Name",
                        "Verbatim Term",
                        "Dictionary Level",
                        "Current Workflow State",
                        "Term",
                        "Code",
                        "Is Auto Coded",
                        "Priority",
                        "Logline",
                        "Path"});
            table14.AddRow(new string[] {
                        "<DevStudyName>",
                        "Adverse Event Term 2",
                        "Low Level Term",
                        "Waiting Approval",
                        "Dizzy on standing",
                        "10013581",
                        "False",
                        "1",
                        "1",
                        "SOC: Vascular disorders: 10047065; HLGT: Decreased and nonspecific blood pressure" +
                            " disorders and shock: 10011954; HLT: Circulatory collapse and shock: 10009193; P" +
                            "T: Dizziness postural: 10013578; LLT: Dizzy on standing: 10013581"});
#line 126
 testRunner.Then("the Coding Decisions Report should contain the following", ((string)(null)), table14, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
