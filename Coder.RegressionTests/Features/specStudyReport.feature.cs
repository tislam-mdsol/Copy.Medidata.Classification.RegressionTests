// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Coder.RegressionTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("These scenarios will validate the Coder Study Report behavior")]
    [NUnit.Framework.CategoryAttribute("specStudyReport.feature")]
    [NUnit.Framework.CategoryAttribute("CoderCore")]
    public partial class TheseScenariosWillValidateTheCoderStudyReportBehaviorFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "specStudyReport.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "These scenarios will validate the Coder Study Report behavior", "", ProgrammingLanguage.CSharp, new string[] {
                        "specStudyReport.feature",
                        "CoderCore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Study Report returns correct number of tasks")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_185572_001")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void StudyReportReturnsCorrectNumberOfTasks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Study Report returns correct number of tasks", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_185572_001",
                        "IncreaseTimeout"});
#line 10
this.ScenarioSetup(scenarioInfo);
#line 11
    testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 12
 testRunner.When("coding tasks are loaded from CSV file \"Tasks_6_CodeAndNext.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
 testRunner.Then("Study Report data should have \"6\" tasks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Study Report returns data for task with a task state of \"Not Coded\"")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_185572_002")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void StudyReportReturnsDataForTaskWithATaskStateOfNotCoded()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Study Report returns data for task with a task state of \"Not Coded\"", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_185572_002",
                        "IncreaseTimeout"});
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
    testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
 testRunner.When("coding tasks are loaded from CSV file \"Tasks_6_CodeAndNext.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Status",
                        "Count"});
            table1.AddRow(new string[] {
                        "Completed Count",
                        "0"});
            table1.AddRow(new string[] {
                        "Not Coded Count",
                        "6"});
            table1.AddRow(new string[] {
                        "Coded Not Completed Count",
                        "0"});
            table1.AddRow(new string[] {
                        "With Open Query Count",
                        "0"});
#line 23
 testRunner.Then("the study report task status count information should have the following", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Study Report returns data for task with a task state of \"completed\"")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_185572_003")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void StudyReportReturnsDataForTaskWithATaskStateOfCompleted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Study Report returns data for task with a task state of \"completed\"", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_185572_003",
                        "IncreaseTimeout"});
#line 36
this.ScenarioSetup(scenarioInfo);
#line 37
    testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 38
 testRunner.When("coding tasks are loaded from CSV file \"Tasks_6_CodeAndNext.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
 testRunner.And("a browse and code for task \"Burning\" is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim",
                        "SearchText",
                        "SearchLevel",
                        "Code",
                        "Level",
                        "CreateSynonym"});
            table2.AddRow(new string[] {
                        "Burning",
                        "Gastroesophageal burning",
                        "Low Level Term",
                        "10066998",
                        "LLT",
                        "False"});
            table2.AddRow(new string[] {
                        "Congestion",
                        "Congestion nasal",
                        "Low Level Term",
                        "10010676",
                        "LLT",
                        "False"});
            table2.AddRow(new string[] {
                        "Heart Burn",
                        "Reflux gastritis",
                        "Low Level Term",
                        "10057969",
                        "LLT",
                        "False"});
            table2.AddRow(new string[] {
                        "Nasal Drip",
                        "Postnasal drip",
                        "Low Level Term",
                        "10036402",
                        "LLT",
                        "False"});
            table2.AddRow(new string[] {
                        "Reflux",
                        "Gastritis alkaline reflux",
                        "Low Level Term",
                        "10017858",
                        "LLT",
                        "False"});
            table2.AddRow(new string[] {
                        "Stiff Joints",
                        "Stiff joint",
                        "Low Level Term",
                        "10042041",
                        "LLT",
                        "False"});
#line 40
 testRunner.And("I code next available task", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Status",
                        "Count"});
            table3.AddRow(new string[] {
                        "Completed Count",
                        "6"});
            table3.AddRow(new string[] {
                        "Not Coded Count",
                        "0"});
            table3.AddRow(new string[] {
                        "Coded Not Completed Count",
                        "0"});
            table3.AddRow(new string[] {
                        "With Open Query Count",
                        "0"});
#line 48
 testRunner.Then("the study report task status count information should have the following", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Study Report returns data for tasks with a task state of \"completed\" as wells as " +
            "\"NotCoded\"")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_185572_004")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void StudyReportReturnsDataForTasksWithATaskStateOfCompletedAsWellsAsNotCoded()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Study Report returns data for tasks with a task state of \"completed\" as wells as " +
                    "\"NotCoded\"", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_185572_004",
                        "IncreaseTimeout"});
#line 61
this.ScenarioSetup(scenarioInfo);
#line 62
    testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 63
 testRunner.And("coding tasks from CSV file \"Tasks_6_CodeAndNext.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
 testRunner.When("task \"Congestion\" is coded to term \"Congestion nasal\" at search level \"Low Level " +
                    "Term\" with code \"10010676\" at level \"LLT\" and a synonym is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Status",
                        "Count"});
            table4.AddRow(new string[] {
                        "Completed Count",
                        "1"});
            table4.AddRow(new string[] {
                        "Not Coded Count",
                        "5"});
            table4.AddRow(new string[] {
                        "Coded Not Completed Count",
                        "0"});
            table4.AddRow(new string[] {
                        "With Open Query Count",
                        "0"});
#line 65
 testRunner.Then("the study report task status count information should have the following", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Study Report returns data for tasks with a task state of \"Coded But Not Completed" +
            "\"")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_185572_005")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void StudyReportReturnsDataForTasksWithATaskStateOfCodedButNotCompleted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Study Report returns data for tasks with a task state of \"Coded But Not Completed" +
                    "\"", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_185572_005",
                        "IncreaseTimeout"});
#line 78
this.ScenarioSetup(scenarioInfo);
#line 79
    testRunner.Given("a \"Approval\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG" +
                    " 15.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 80
 testRunner.And("coding task \"Congestion\" for dictionary level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
 testRunner.When("task \"Congestion\" is coded to term \"Congestion nasal\" at search level \"Low Level " +
                    "Term\" with code \"10010676\" at level \"LLT\" and a synonym is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 82
 testRunner.And("reclassifying task \"CONGESTION\" with Include Autocoded Items set to \"True\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Status",
                        "Count"});
            table5.AddRow(new string[] {
                        "Completed Count",
                        "0"});
            table5.AddRow(new string[] {
                        "Not Coded Count",
                        "0"});
            table5.AddRow(new string[] {
                        "Coded Not Completed Count",
                        "1"});
            table5.AddRow(new string[] {
                        "With Open Query Count",
                        "0"});
#line 83
 testRunner.Then("the study report task status count information should have the following", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Study Report returns data for tasks with a task state of \"With Open Query Count\"")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_185572_006")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void StudyReportReturnsDataForTasksWithATaskStateOfWithOpenQueryCount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Study Report returns data for tasks with a task state of \"With Open Query Count\"", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_185572_006",
                        "IncreaseTimeout"});
#line 96
this.ScenarioSetup(scenarioInfo);
#line 97
    testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 98
    testRunner.When("the query for new task \"HEADACHES\" with comment \"Severity?\" is \"Open\" with respon" +
                    "se \"Acute\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Status",
                        "Count"});
            table6.AddRow(new string[] {
                        "Completed Count",
                        "0"});
            table6.AddRow(new string[] {
                        "Not Coded Count",
                        "1"});
            table6.AddRow(new string[] {
                        "Coded Not Completed Count",
                        "0"});
            table6.AddRow(new string[] {
                        "With Open Query Count",
                        "1"});
#line 99
 testRunner.Then("the study report task status count information should have the following", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Study Report returns verbatim data for tasks with a task state of \"Not Coded\"")]
        [NUnit.Framework.CategoryAttribute("DFT")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_185572_007")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void StudyReportReturnsVerbatimDataForTasksWithATaskStateOfNotCoded()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Study Report returns verbatim data for tasks with a task state of \"Not Coded\"", new string[] {
                        "DFT",
                        "Release2015.3.0",
                        "PBMCC_185572_007",
                        "IncreaseTimeout"});
#line 112
this.ScenarioSetup(scenarioInfo);
#line 113
    testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 114
 testRunner.When("coding tasks are loaded from CSV file \"Tasks_6_CodeAndNext.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim",
                        "Dictionary",
                        "Dictionary Level",
                        "Code",
                        "Term",
                        "Workflow Status",
                        "Path",
                        "Batch"});
            table7.AddRow(new string[] {
                        "Burning",
                        "MedDRA 15.0",
                        "Low Level Term",
                        "",
                        "",
                        "Waiting Manual Code",
                        "",
                        "MedDRA Batch 1"});
            table7.AddRow(new string[] {
                        "Congestion",
                        "MedDRA 15.0",
                        "Low Level Term",
                        "",
                        "",
                        "Waiting Manual Code",
                        "",
                        "MedDRA Batch 1"});
            table7.AddRow(new string[] {
                        "Heart Burn",
                        "MedDRA 15.0",
                        "Low Level Term",
                        "",
                        "",
                        "Waiting Manual Code",
                        "",
                        "MedDRA Batch 1"});
            table7.AddRow(new string[] {
                        "Nasal Drip",
                        "MedDRA 15.0",
                        "Low Level Term",
                        "",
                        "",
                        "Waiting Manual Code",
                        "",
                        "MedDRA Batch 1"});
            table7.AddRow(new string[] {
                        "Reflux",
                        "MedDRA 15.0",
                        "Low Level Term",
                        "",
                        "",
                        "Waiting Manual Code",
                        "",
                        "MedDRA Batch 1"});
            table7.AddRow(new string[] {
                        "Stiff Joints",
                        "MedDRA 15.0",
                        "Low Level Term",
                        "",
                        "",
                        "Waiting Manual Code",
                        "",
                        "MedDRA Batch 1"});
#line 115
 testRunner.Then("the study report task detail information for a study with task category \"Not Code" +
                    "d\" should have the following", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
