// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Coder.RegressionTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("These scenarios will validate the Coder Study Report behavior")]
    [NUnit.Framework.CategoryAttribute("specStudyReport.feature")]
    [NUnit.Framework.CategoryAttribute("CoderCore")]
    public partial class TheseScenariosWillValidateTheCoderStudyReportBehaviorFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "specStudyReport.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "These scenarios will validate the Coder Study Report behavior", "", ProgrammingLanguage.CSharp, new string[] {
                        "specStudyReport.feature",
                        "CoderCore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Study Report returns correct number of tasks")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_185572_001")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void StudyReportReturnsCorrectNumberOfTasks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Study Report returns correct number of tasks", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_185572_001",
                        "IncreaseTimeout"});
#line 10
this.ScenarioSetup(scenarioInfo);
#line 11
    testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 12
 testRunner.And("coding tasks from CSV file \"Tasks_6_CodeAndNext.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.Then("Study Report data should have \"6\" tasks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Study Report returns data for task with a workflow state of \"Not Coded\"")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_185572_002")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void StudyReportReturnsDataForTaskWithAWorkflowStateOfNotCoded()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Study Report returns data for task with a workflow state of \"Not Coded\"", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_185572_002",
                        "IncreaseTimeout"});
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
    testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
 testRunner.And("coding tasks from CSV file \"Tasks_6_CodeAndNext.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.Then("Study Report data should have \"6\" tasks  with a workflow state of \"NotCoded\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Study Report returns data for task with a workflow state of \"completed\"")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_185572_003")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void StudyReportReturnsDataForTaskWithAWorkflowStateOfCompleted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Study Report returns data for task with a workflow state of \"completed\"", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_185572_003",
                        "IncreaseTimeout"});
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
    testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 32
 testRunner.And("coding tasks from CSV file \"Tasks_6_CodeAndNext.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
 testRunner.And("a browse and code for task \"Burning\" is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim",
                        "SearchText",
                        "SearchLevel",
                        "Code",
                        "Level",
                        "CreateSynonym"});
            table1.AddRow(new string[] {
                        "Burning",
                        "Gastroesophageal burning",
                        "Low Level Term",
                        "10066998",
                        "LLT",
                        "False"});
            table1.AddRow(new string[] {
                        "Congestion",
                        "Congestion nasal",
                        "Low Level Term",
                        "10010676",
                        "LLT",
                        "False"});
            table1.AddRow(new string[] {
                        "Heart Burn",
                        "Reflux gastritis",
                        "Low Level Term",
                        "10057969",
                        "LLT",
                        "False"});
            table1.AddRow(new string[] {
                        "Nasal Drip",
                        "Postnasal drip",
                        "Low Level Term",
                        "10036402",
                        "LLT",
                        "False"});
            table1.AddRow(new string[] {
                        "Reflux",
                        "Gastritis alkaline reflux",
                        "Low Level Term",
                        "10017858",
                        "LLT",
                        "False"});
            table1.AddRow(new string[] {
                        "Stiff Joints",
                        "Stiff joint",
                        "Low Level Term",
                        "10042041",
                        "LLT",
                        "False"});
#line 34
 testRunner.When("I code next available task", ((string)(null)), table1, "When ");
#line 42
 testRunner.Then("Study Report data should have \"6\" tasks  with a workflow state of \"Completed\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Study Report returns data for tasks with a workflow state of \"completed\" as wells" +
            " as \"NotCoded\"")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_185572_004")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void StudyReportReturnsDataForTasksWithAWorkflowStateOfCompletedAsWellsAsNotCoded()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Study Report returns data for tasks with a workflow state of \"completed\" as wells" +
                    " as \"NotCoded\"", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_185572_004",
                        "IncreaseTimeout"});
#line 50
this.ScenarioSetup(scenarioInfo);
#line 51
    testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 52
 testRunner.And("coding tasks from CSV file \"Tasks_6_CodeAndNext.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
 testRunner.And("task \"Congestion\" is coded to term \"Congestion nasal\" at search level \"Low Level " +
                    "Term\" with code \"10010676\" at level \"LLT\" and a synonym is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
 testRunner.Then("Study Report data should have \"1\" tasks  with a workflow state of \"Completed\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 55
 testRunner.And("Study Report data should have \"5\" tasks  with a workflow state of \"NotCoded\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Study Report returns data for tasks with a workflow state of \"Coded But Not Compl" +
            "eted\"")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_185572_005")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void StudyReportReturnsDataForTasksWithAWorkflowStateOfCodedButNotCompleted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Study Report returns data for tasks with a workflow state of \"Coded But Not Compl" +
                    "eted\"", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_185572_005",
                        "IncreaseTimeout"});
#line 63
this.ScenarioSetup(scenarioInfo);
#line 64
    testRunner.Given("a \"Approval\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG" +
                    " 15.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 65
 testRunner.And("coding task \"Congestion\" for dictionary level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
 testRunner.And("task \"Congestion\" is coded to term \"Congestion nasal\" at search level \"Low Level " +
                    "Term\" with code \"10010676\" at level \"LLT\" and a synonym is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
 testRunner.When("reclassifying task \"CONGESTION\" with Include Autocoded Items set to \"True\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 68
 testRunner.Then("Study Report data should have \"1\" tasks  with a workflow state of \"CodedButNotCom" +
                    "plete\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
