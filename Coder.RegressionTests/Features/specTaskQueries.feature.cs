// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Coder.RegressionTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("This feature verifies Coder Task Query processing and display of information.")]
    [NUnit.Framework.CategoryAttribute("specTaskQueries.feature")]
    [NUnit.Framework.CategoryAttribute("CoderCore")]
    public partial class ThisFeatureVerifiesCoderTaskQueryProcessingAndDisplayOfInformation_Feature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "specTaskQueries.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "This feature verifies Coder Task Query processing and display of information.", @"
Actions Affecting Queries:
Coding Decisions
Study Migrations (In separate feature file: specTaskQueriesAfterStudyMigration.feature)
Query Responses
User Cancellation

Coder UI Elements Affected by Query Actions:
Task Grid Query Status
Task Grid Grouping
Task Grid Filtering
Task Grid Query Controls
Coding History Tab
Query History Tab
Coding History Report 

_ The following environment configuration settings were enabled:

 Empty Synonym Lists Registered:
 Synonym List 1: MedDRA              (ENG) 15.0      Primary 
 Synonym List 2: MedDRA              (ENG) 15.0      Initial_List
 Synonym List 3: JDrug               (JPN) 2013H1    Primary

 Common Configurations:   
 Basic                    
 Waiting Approval", ProgrammingLanguage.CSharp, new string[] {
                        "specTaskQueries.feature",
                        "CoderCore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CANCEL Coder shall display a Queued status for an Open Query request until EDC ac" +
            "cepts the request")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163356_001")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void CANCELCoderShallDisplayAQueuedStatusForAnOpenQueryRequestUntilEDCAcceptsTheRequest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CANCEL Coder shall display a Queued status for an Open Query request until EDC ac" +
                    "cepts the request", new string[] {
                        "VAL",
                        "PBMCC_163356_001",
                        "Release2015.3.0"});
#line 34
this.ScenarioSetup(scenarioInfo);
#line 36
   testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 37
   testRunner.When("I open a query for new task \"HEADACHES\" with comment \"Severity?\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
   testRunner.Then("the query status for task \"HEADACHES\" is \"Queued\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CANCEL The Cancel Query option is available when the Query Status is Open")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163356_002")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void CANCELTheCancelQueryOptionIsAvailableWhenTheQueryStatusIsOpen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CANCEL The Cancel Query option is available when the Query Status is Open", new string[] {
                        "VAL",
                        "PBMCC_163356_002",
                        "Release2015.3.0"});
#line 43
this.ScenarioSetup(scenarioInfo);
#line 45
   testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 46
   testRunner.When("the query for new task \"HEADACHES\" with comment \"Severity?\" is \"Open\" with respon" +
                    "se \"Acute\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
   testRunner.Then("the query for task \"HEADACHES\" can only be canceled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 48
   testRunner.And("the query status for task \"HEADACHES\" is \"Open\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CANCEL The Cancel Query option is available when the Query Status is Answered")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163356_003")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void CANCELTheCancelQueryOptionIsAvailableWhenTheQueryStatusIsAnswered()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CANCEL The Cancel Query option is available when the Query Status is Answered", new string[] {
                        "VAL",
                        "PBMCC_163356_003",
                        "Release2015.3.0"});
#line 53
this.ScenarioSetup(scenarioInfo);
#line 55
   testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 56
   testRunner.When("the query for new task \"HEADACHES\" with comment \"Severity?\" is \"Answered\" with re" +
                    "sponse \"Acute\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 57
   testRunner.Then("the query for task \"HEADACHES\" can only be canceled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 58
   testRunner.And("the query status for task \"HEADACHES\" is \"Answered\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CANCEL The Cancel Query option is not available when the Query status is Cancelle" +
            "d")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163356_004")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void CANCELTheCancelQueryOptionIsNotAvailableWhenTheQueryStatusIsCancelled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CANCEL The Cancel Query option is not available when the Query status is Cancelle" +
                    "d", new string[] {
                        "VAL",
                        "PBMCC_163356_004",
                        "Release2015.3.0"});
#line 63
this.ScenarioSetup(scenarioInfo);
#line 65
   testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 66
   testRunner.When("the query for new task \"HEADACHES\" with comment \"Severity?\" is \"Cancelled\" with r" +
                    "esponse \"None\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 67
   testRunner.Then("the query for task \"HEADACHES\" can only be opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 68
   testRunner.And("the query status for task \"HEADACHES\" is \"Cancelled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CANCEL The Cancel Query option is not available when the Query status is Closed")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163356_005")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void CANCELTheCancelQueryOptionIsNotAvailableWhenTheQueryStatusIsClosed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CANCEL The Cancel Query option is not available when the Query status is Closed", new string[] {
                        "VAL",
                        "PBMCC_163356_005",
                        "Release2015.3.0"});
#line 73
this.ScenarioSetup(scenarioInfo);
#line 75
   testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 76
   testRunner.When("the query for new task \"HEADACHES\" with comment \"Severity?\" is \"Closed\" with resp" +
                    "onse \"Acute\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 77
   testRunner.Then("the query for task \"HEADACHES\" can only be opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 78
   testRunner.And("the query status for task \"HEADACHES\" is \"Closed\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CANCEL The Cancel Query option is not available when the task has no query status" +
            "")]
        [NUnit.Framework.IgnoreAttribute()]
        [NUnit.Framework.CategoryAttribute("DFT")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163356_006")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void CANCELTheCancelQueryOptionIsNotAvailableWhenTheTaskHasNoQueryStatus()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CANCEL The Cancel Query option is not available when the task has no query status" +
                    "", new string[] {
                        "DFT",
                        "PBMCC_163356_006",
                        "Release2015.3.0",
                        "ignore"});
#line 85
this.ScenarioSetup(scenarioInfo);
#line 87
   testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 88
   testRunner.And("coding task \"HEADACHES\" for dictionary level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
   testRunner.Then("the query for task \"HEADACHES\" can only be opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 90
   testRunner.And("the query status for task \"HEADACHES\" is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CANCEL When canceling a query request Coder shall display a Queued status until i" +
            "t gets confirmation back from EDC")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163356_007")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void CANCELWhenCancelingAQueryRequestCoderShallDisplayAQueuedStatusUntilItGetsConfirmationBackFromEDC()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CANCEL When canceling a query request Coder shall display a Queued status until i" +
                    "t gets confirmation back from EDC", new string[] {
                        "VAL",
                        "PBMCC_163356_007",
                        "Release2015.3.0"});
#line 95
this.ScenarioSetup(scenarioInfo);
#line 97
   testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 98
   testRunner.When("the query for new task \"HEADACHES\" with comment \"Severity?\" is \"Open\" with respon" +
                    "se \"Acute\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 99
   testRunner.And("I cancel the query for task \"HEADACHES\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 100
   testRunner.Then("the query status for task \"HEADACHES\" is \"Queued\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CANCEL Upon EDC successfully accepting a cancelled request from Coder Coder shall" +
            " display the Query status as Cancelled")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163356_008")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void CANCELUponEDCSuccessfullyAcceptingACancelledRequestFromCoderCoderShallDisplayTheQueryStatusAsCancelled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CANCEL Upon EDC successfully accepting a cancelled request from Coder Coder shall" +
                    " display the Query status as Cancelled", new string[] {
                        "VAL",
                        "PBMCC_163356_008",
                        "Release2015.3.0"});
#line 105
this.ScenarioSetup(scenarioInfo);
#line 107
   testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 108
   testRunner.When("the query for new task \"HEADACHES\" with comment \"Severity?\" is \"Open\" with respon" +
                    "se \"Acute\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 109
   testRunner.And("I cancel the query for task \"HEADACHES\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 110
   testRunner.And("the latest query for task \"HEADACHES\" is \"Cancelled\" with response \"Ok\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 111
   testRunner.Then("the query status for task \"HEADACHES\" is \"Cancelled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Verbatim Term",
                        "Query Status",
                        "Query Text",
                        "Query Response",
                        "Open To",
                        "Query Notes",
                        "Time Stamp"});
            table1.AddRow(new string[] {
                        "<SystemUser>",
                        "HEADACHES",
                        "Cancelled",
                        "Severity?",
                        "Ok",
                        "SystemMarkingGroup",
                        "",
                        "<TimeStamp>"});
            table1.AddRow(new string[] {
                        "<User>",
                        "HEADACHES",
                        "Queued",
                        "",
                        "",
                        "",
                        "",
                        "<TimeStamp>"});
            table1.AddRow(new string[] {
                        "<SystemUser>",
                        "HEADACHES",
                        "Open",
                        "Severity?",
                        "Acute",
                        "SystemMarkingGroup",
                        "",
                        "<TimeStamp>"});
            table1.AddRow(new string[] {
                        "<User>",
                        "HEADACHES",
                        "Queued",
                        "Severity?",
                        "",
                        "SystemMarkingGroup",
                        "",
                        "<TimeStamp>"});
#line 112
   testRunner.And("the query history contains the following information", ((string)(null)), table1, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("QUERY HISTORY When a query Response is received by Coder the appropriate informat" +
            "ion shall be logged in the Query History tab")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163356_009")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void QUERYHISTORYWhenAQueryResponseIsReceivedByCoderTheAppropriateInformationShallBeLoggedInTheQueryHistoryTab()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("QUERY HISTORY When a query Response is received by Coder the appropriate informat" +
                    "ion shall be logged in the Query History tab", new string[] {
                        "VAL",
                        "PBMCC_163356_009",
                        "Release2015.3.0"});
#line 122
this.ScenarioSetup(scenarioInfo);
#line 124
   testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 125
   testRunner.When("the query for new task \"HEADACHES\" with comment \"Severity?\" is \"Answered\" with re" +
                    "sponse \"Acute\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Verbatim Term",
                        "Query Status",
                        "Query Text",
                        "Query Response",
                        "Open To",
                        "Query Notes",
                        "Time Stamp"});
            table2.AddRow(new string[] {
                        "<SystemUser>",
                        "HEADACHES",
                        "Answered",
                        "Severity?",
                        "Acute",
                        "SystemMarkingGroup",
                        "",
                        "<TimeStamp>"});
            table2.AddRow(new string[] {
                        "<User>",
                        "HEADACHES",
                        "Queued",
                        "Severity?",
                        "",
                        "SystemMarkingGroup",
                        "",
                        "<TimeStamp>"});
#line 126
   testRunner.Then("the query history contains the following information", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("QUERY HISTORY When a query Close response is received by Coder the appropriate in" +
            "formation shall be logged in the Query History tab")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163356_010")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void QUERYHISTORYWhenAQueryCloseResponseIsReceivedByCoderTheAppropriateInformationShallBeLoggedInTheQueryHistoryTab()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("QUERY HISTORY When a query Close response is received by Coder the appropriate in" +
                    "formation shall be logged in the Query History tab", new string[] {
                        "VAL",
                        "PBMCC_163356_010",
                        "Release2015.3.0"});
#line 134
this.ScenarioSetup(scenarioInfo);
#line 136
   testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 137
   testRunner.When("the query for new task \"HEADACHES\" with comment \"Severity?\" is \"Open\" with respon" +
                    "se \"Acute\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 138
   testRunner.And("the latest query for task \"HEADACHES\" is \"Closed\" with response \"Closing\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Verbatim Term",
                        "Query Status",
                        "Query Text",
                        "Query Response",
                        "Open To",
                        "Query Notes",
                        "Time Stamp"});
            table3.AddRow(new string[] {
                        "<SystemUser>",
                        "HEADACHES",
                        "Closed",
                        "Severity?",
                        "Closing",
                        "SystemMarkingGroup",
                        "",
                        "<TimeStamp>"});
            table3.AddRow(new string[] {
                        "<SystemUser>",
                        "HEADACHES",
                        "Open",
                        "Severity?",
                        "Acute",
                        "SystemMarkingGroup",
                        "",
                        "<TimeStamp>"});
            table3.AddRow(new string[] {
                        "<User>",
                        "HEADACHES",
                        "Queued",
                        "Severity?",
                        "",
                        "SystemMarkingGroup",
                        "",
                        "<TimeStamp>"});
#line 139
   testRunner.Then("the query history contains the following information", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("QUERY HISTORY When a query Cancel response is received by Coder the appropriate i" +
            "nformation shall be logged in the Query History tab")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163356_011")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void QUERYHISTORYWhenAQueryCancelResponseIsReceivedByCoderTheAppropriateInformationShallBeLoggedInTheQueryHistoryTab()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("QUERY HISTORY When a query Cancel response is received by Coder the appropriate i" +
                    "nformation shall be logged in the Query History tab", new string[] {
                        "VAL",
                        "PBMCC_163356_011",
                        "Release2015.3.0"});
#line 148
this.ScenarioSetup(scenarioInfo);
#line 150
   testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 151
   testRunner.When("the query for new task \"HEADACHES\" with comment \"Severity?\" is \"Open\" with respon" +
                    "se \"Acute\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 152
   testRunner.And("the latest query for task \"HEADACHES\" is \"Cancelled\" with response \"Cancelling\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Verbatim Term",
                        "Query Status",
                        "Query Text",
                        "Query Response",
                        "Open To",
                        "Query Notes",
                        "Time Stamp"});
            table4.AddRow(new string[] {
                        "<SystemUser>",
                        "HEADACHES",
                        "Cancelled",
                        "Severity?",
                        "Cancelling",
                        "SystemMarkingGroup",
                        "",
                        "<TimeStamp>"});
            table4.AddRow(new string[] {
                        "<SystemUser>",
                        "HEADACHES",
                        "Open",
                        "Severity?",
                        "Acute",
                        "SystemMarkingGroup",
                        "",
                        "<TimeStamp>"});
            table4.AddRow(new string[] {
                        "<User>",
                        "HEADACHES",
                        "Queued",
                        "Severity?",
                        "",
                        "SystemMarkingGroup",
                        "",
                        "<TimeStamp>"});
#line 153
   testRunner.Then("the query history contains the following information", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("QUERY HISTORY When a markinggroup is received by Coder the appropriate informatio" +
            "n shall be logged in OpenTo column in the Query History tab")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163356_012")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void QUERYHISTORYWhenAMarkinggroupIsReceivedByCoderTheAppropriateInformationShallBeLoggedInOpenToColumnInTheQueryHistoryTab()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("QUERY HISTORY When a markinggroup is received by Coder the appropriate informatio" +
                    "n shall be logged in OpenTo column in the Query History tab", new string[] {
                        "VAL",
                        "PBMCC_163356_012",
                        "Release2015.3.0"});
#line 162
this.ScenarioSetup(scenarioInfo);
#line 164
   testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 165
   testRunner.When("the query sent to marking group \"Quality\" for new task \"HEADACHES\" with comment \"" +
                    "Severity?\" is \"Open\" with response \"Acute\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Verbatim Term",
                        "Query Status",
                        "Query Text",
                        "Query Response",
                        "Open To",
                        "Query Notes",
                        "Time Stamp"});
            table5.AddRow(new string[] {
                        "<SystemUser>",
                        "HEADACHES",
                        "Open",
                        "Severity?",
                        "Acute",
                        "Quality",
                        "",
                        "<TimeStamp>"});
            table5.AddRow(new string[] {
                        "<User>",
                        "HEADACHES",
                        "Queued",
                        "Severity?",
                        "",
                        "Quality",
                        "",
                        "<TimeStamp>"});
#line 166
   testRunner.Then("the query history contains the following information", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("QUERY HISTORY The Query History tab shall show the latest version of the verbatim" +
            " under the Verbatim column")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163356_013")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void QUERYHISTORYTheQueryHistoryTabShallShowTheLatestVersionOfTheVerbatimUnderTheVerbatimColumn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("QUERY HISTORY The Query History tab shall show the latest version of the verbatim" +
                    " under the Verbatim column", new string[] {
                        "VAL",
                        "PBMCC_163356_013",
                        "Release2015.3.0"});
#line 174
this.ScenarioSetup(scenarioInfo);
#line 176
   testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 177
   testRunner.When("the verbatim term for new task \"HEADACHED\" is changed to \"HEADACHES\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 178
   testRunner.And("the query for task \"HEADACHES\" with comment \"Severity?\" is \"Cancelled\" with respo" +
                    "nse \"Cancelling\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Verbatim Term",
                        "Query Status",
                        "Query Text",
                        "Query Response",
                        "Open To",
                        "Query Notes",
                        "Time Stamp"});
            table6.AddRow(new string[] {
                        "<SystemUser>",
                        "HEADACHES",
                        "Cancelled",
                        "Severity?",
                        "Cancelling",
                        "SystemMarkingGroup",
                        "",
                        "<TimeStamp>"});
            table6.AddRow(new string[] {
                        "<User>",
                        "HEADACHES",
                        "Queued",
                        "Severity?",
                        "",
                        "SystemMarkingGroup",
                        "",
                        "<TimeStamp>"});
#line 179
   testRunner.Then("the query history contains the following information", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("QUERY HISTORY The Coding and Query History Tables shall display supplemental and " +
            "component information when the verbatim changes and a query is updated")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163356_014")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void QUERYHISTORYTheCodingAndQueryHistoryTablesShallDisplaySupplementalAndComponentInformationWhenTheVerbatimChangesAndAQueryIsUpdated()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("QUERY HISTORY The Coding and Query History Tables shall display supplemental and " +
                    "component information when the verbatim changes and a query is updated", new string[] {
                        "VAL",
                        "PBMCC_163356_014",
                        "Release2015.3.0",
                        "IncreaseTimeout_600000"});
#line 188
this.ScenarioSetup(scenarioInfo);
#line 190
   testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "SupplementalValues",
                        "ComponenetValues"});
            table7.AddRow(new string[] {
                        "Head",
                        "Person"});
#line 191
   testRunner.When("the verbatim term for new task \"Blood Term\"  with additional information is chang" +
                    "ed to \"Blood Clotted\"", ((string)(null)), table7, "When ");
#line 194
   testRunner.And("the query for task \"Blood Clotted\" with comment \"Where is the blood clot?\" is \"Op" +
                    "en\" with response \"Investigating\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 195
   testRunner.And("the latest query for task \"Blood Clotted\" is \"Answered\" with response \"The blood " +
                    "was clotted right under the brain, a place between the neck and the brain.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Verbatim Term",
                        "Query Status",
                        "Query Text",
                        "Query Response",
                        "Open To",
                        "Query Notes",
                        "Time Stamp"});
            table8.AddRow(new string[] {
                        "<SystemUser>",
                        "BLOOD CLOTTED(S) LOGSUPPFIELD1 : HEAD(S) TestDLCOID1 : PERSON",
                        "Answered",
                        "Where is the blood clot?",
                        "The blood was clotted right under the brain, a place between the neck and the bra" +
                            "in.",
                        "SystemMarkingGroup",
                        "",
                        "<TimeStamp>"});
            table8.AddRow(new string[] {
                        "<SystemUser>",
                        "BLOOD CLOTTED(S) LOGSUPPFIELD1 : HEAD(S) TestDLCOID1 : PERSON",
                        "Open",
                        "Where is the blood clot?",
                        "Investigating",
                        "SystemMarkingGroup",
                        "",
                        "<TimeStamp>"});
            table8.AddRow(new string[] {
                        "<User>",
                        "BLOOD CLOTTED(S) LOGSUPPFIELD1 : HEAD(S) TestDLCOID1 : PERSON",
                        "Queued",
                        "Where is the blood clot?",
                        "",
                        "SystemMarkingGroup",
                        "",
                        "<TimeStamp>"});
#line 196
   testRunner.Then("the query history contains the following information", ((string)(null)), table8, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Action",
                        "Status",
                        "Verbatim Term",
                        "Comment",
                        "Time Stamp"});
            table9.AddRow(new string[] {
                        "<User>",
                        "Open Query",
                        "Waiting Manual Code",
                        "BLOOD CLOTTED(S) LOGSUPPFIELD1 : HEAD(S) TestDLCOID1 : PERSON",
                        "",
                        "<TimeStamp>"});
            table9.AddRow(new string[] {
                        "<SystemUser>",
                        "Start Auto Code",
                        "Waiting Manual Code",
                        "BLOOD CLOTTED(S) LOGSUPPFIELD1 : HEAD(S) TestDLCOID1 : PERSON",
                        "",
                        "<TimeStamp>"});
            table9.AddRow(new string[] {
                        "<SystemUser>",
                        "",
                        "Start",
                        "BLOOD CLOTTED(S) LOGSUPPFIELD1 : HEAD(S) TestDLCOID1 : PERSON",
                        "Workflow=DEFAULT,WorkflowVariables[IsAutoCode=True,IsApprovalRequired=True,IsAuto" +
                            "Approval=True,IsBypassTransmit=True]",
                        "<TimeStamp>"});
            table9.AddRow(new string[] {
                        "<SystemUser>",
                        "",
                        "Start",
                        "BLOOD CLOTTED(S) LOGSUPPFIELD1 : HEAD(S) TestDLCOID1 : PERSON",
                        "Field \'Verbatim\' with old text of \'Blood Term\' has now changed to text of \'Blood " +
                            "Clotted\'",
                        "<TimeStamp>"});
            table9.AddRow(new string[] {
                        "<SystemUser>",
                        "Start Auto Code",
                        "Waiting Manual Code",
                        "BLOOD TERM(S) LOGSUPPFIELD1 : HEAD(S) TestDLCOID1 : PERSON",
                        "",
                        "<TimeStamp>"});
            table9.AddRow(new string[] {
                        "<SystemUser>",
                        "",
                        "Start",
                        "BLOOD TERM(S) LOGSUPPFIELD1 : HEAD(S) TestDLCOID1 : PERSON",
                        "Workflow=DEFAULT,WorkflowVariables[IsAutoCode=True,IsApprovalRequired=True,IsAuto" +
                            "Approval=True,IsBypassTransmit=True]",
                        "<TimeStamp>"});
#line 201
   testRunner.And("the Coding History contains following information", ((string)(null)), table9, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CODING When a manually coded decision for a verbatim with a Query status of Open " +
            "is approved Coder shall display a Queued query status and accept the coding deci" +
            "sion approval")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163356_015")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.Timeout(300000)]
        public virtual void CODINGWhenAManuallyCodedDecisionForAVerbatimWithAQueryStatusOfOpenIsApprovedCoderShallDisplayAQueuedQueryStatusAndAcceptTheCodingDecisionApproval()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CODING When a manually coded decision for a verbatim with a Query status of Open " +
                    "is approved Coder shall display a Queued query status and accept the coding deci" +
                    "sion approval", new string[] {
                        "VAL",
                        "PBMCC_163356_015",
                        "Release2015.3.0",
                        "IncreaseTimeout_300000"});
#line 214
this.ScenarioSetup(scenarioInfo);
#line 216
   testRunner.Given("a \"Waiting Approval\" Coder setup with no tasks and no synonyms and dictionary \"Me" +
                    "dDRA ENG 15.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 217
   testRunner.When("the query for new task \"HEADACHES\" with comment \"Severity?\" is \"Open\" with respon" +
                    "se \"Acute\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 218
   testRunner.And("task \"HEADACHES\" is coded to term \"Acute migraine\" at search level \"Low Level Ter" +
                    "m\" with code \"10066635\" at level \"LLT\" and the coding decision is manually appro" +
                    "ved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 219
   testRunner.And("reclassifying task \"HEADACHES\" with comment \"Reconfirm\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 220
   testRunner.And("exporting the Coding History Report for term \"HEADACHES\" with export columns \"ALL" +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "User",
                        "Action",
                        "System Action",
                        "Query Status",
                        "Query Text",
                        "Query Response",
                        "Query Notes"});
            table10.AddRow(new string[] {
                        "HEADACHES",
                        "System User",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table10.AddRow(new string[] {
                        "HEADACHES",
                        "System User",
                        "Start Auto Code",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table10.AddRow(new string[] {
                        "HEADACHES",
                        "<User>",
                        "Open Query",
                        "Open Query",
                        "",
                        "",
                        "",
                        ""});
            table10.AddRow(new string[] {
                        "HEADACHES",
                        "<User>",
                        "",
                        "",
                        "Queued",
                        "Severity?",
                        "",
                        ""});
            table10.AddRow(new string[] {
                        "HEADACHES",
                        "System User",
                        "",
                        "",
                        "Open",
                        "Severity?",
                        "Acute",
                        ""});
            table10.AddRow(new string[] {
                        "HEADACHES",
                        "<User>",
                        "",
                        "",
                        "Queued",
                        "",
                        "",
                        ""});
            table10.AddRow(new string[] {
                        "HEADACHES",
                        "<User>",
                        "Browse and Code",
                        "Manual Coding",
                        "",
                        "",
                        "",
                        ""});
#line 221
   testRunner.Then("the Coding History Report should contain the following", ((string)(null)), table10, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Verbatim Term",
                        "Query Status",
                        "Query Text",
                        "Query Response",
                        "Open To",
                        "Query Notes",
                        "Time Stamp"});
            table11.AddRow(new string[] {
                        "<User>",
                        "HEADACHES",
                        "Queued",
                        "",
                        "",
                        "",
                        "",
                        "<TimeStamp>"});
            table11.AddRow(new string[] {
                        "<SystemUser>",
                        "HEADACHES",
                        "Open",
                        "Severity?",
                        "Acute",
                        "SystemMarkingGroup",
                        "",
                        "<TimeStamp>"});
            table11.AddRow(new string[] {
                        "<User>",
                        "HEADACHES",
                        "Queued",
                        "Severity?",
                        "",
                        "SystemMarkingGroup",
                        "",
                        "<TimeStamp>"});
#line 230
   testRunner.And("the query history contains the following information", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Action",
                        "Status",
                        "Verbatim Term",
                        "Comment",
                        "Time Stamp"});
            table12.AddRow(new string[] {
                        "<User>",
                        "Reclassify",
                        "Reconsider",
                        "HEADACHES",
                        "Reconfirm",
                        "<TimeStamp>"});
            table12.AddRow(new string[] {
                        "<User>",
                        "Complete Without Transmission",
                        "Completed",
                        "HEADACHES",
                        "Transmission Queue Number:",
                        "<TimeStamp>"});
            table12.AddRow(new string[] {
                        "<User>",
                        "Complete Without Transmission",
                        "Waiting Transmission",
                        "HEADACHES",
                        "Cancel Query On Transmit:",
                        "<TimeStamp>"});
#line 235
   testRunner.And("the Coding History contains following information", ((string)(null)), table12, "And ");
#line 240
   testRunner.And("the query status for task \"HEADACHES\" is \"Queued\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CODING When an auto-coded direct dictionary matching decision for a verbatim with" +
            " a Query status of Open is approved Coder shall display a Queued query status an" +
            "d accept the coding decision approval")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163356_016")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void CODINGWhenAnAuto_CodedDirectDictionaryMatchingDecisionForAVerbatimWithAQueryStatusOfOpenIsApprovedCoderShallDisplayAQueuedQueryStatusAndAcceptTheCodingDecisionApproval()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CODING When an auto-coded direct dictionary matching decision for a verbatim with" +
                    " a Query status of Open is approved Coder shall display a Queued query status an" +
                    "d accept the coding decision approval", new string[] {
                        "VAL",
                        "PBMCC_163356_016",
                        "Release2015.3.0"});
#line 245
this.ScenarioSetup(scenarioInfo);
#line 247
   testRunner.Given("a \"Waiting Approval\" Coder setup with no tasks and no synonyms and dictionary \"Me" +
                    "dDRA ENG 15.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 248
   testRunner.When("the query for new task \"HEADACHE\" with comment \"Severity?\" is \"Open\" with respons" +
                    "e \"Acute\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 249
   testRunner.And("approving task \"HEADACHE\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 250
   testRunner.And("reclassifying task \"HEADACHE\" with comment \"Reconfirm\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 251
   testRunner.And("exporting the Coding History Report for term \"HEADACHE\" with export columns \"ALL\"" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "User",
                        "Action",
                        "System Action",
                        "Query Status",
                        "Query Text",
                        "Query Response",
                        "Query Notes"});
            table13.AddRow(new string[] {
                        "HEADACHE",
                        "System User",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "HEADACHE",
                        "System User",
                        "Start Auto Code",
                        "Auto Coding",
                        "",
                        "",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "HEADACHE",
                        "<User>",
                        "Open Query",
                        "Open Query",
                        "",
                        "",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "HEADACHE",
                        "<User>",
                        "",
                        "",
                        "Queued",
                        "Severity?",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "HEADACHE",
                        "System User",
                        "",
                        "",
                        "Open",
                        "Severity?",
                        "Acute",
                        ""});
            table13.AddRow(new string[] {
                        "HEADACHE",
                        "<User>",
                        "",
                        "",
                        "Queued",
                        "",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "HEADACHE",
                        "<User>",
                        "Approve",
                        "Approve Coding",
                        "",
                        "",
                        "",
                        ""});
#line 252
   testRunner.Then("the Coding History Report should contain the following", ((string)(null)), table13, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Verbatim Term",
                        "Query Status",
                        "Query Text",
                        "Query Response",
                        "Open To",
                        "Query Notes",
                        "Time Stamp"});
            table14.AddRow(new string[] {
                        "<User>",
                        "HEADACHE",
                        "Queued",
                        "",
                        "",
                        "",
                        "",
                        "<TimeStamp>"});
            table14.AddRow(new string[] {
                        "<SystemUser>",
                        "HEADACHE",
                        "Open",
                        "Severity?",
                        "Acute",
                        "SystemMarkingGroup",
                        "",
                        "<TimeStamp>"});
            table14.AddRow(new string[] {
                        "<User>",
                        "HEADACHE",
                        "Queued",
                        "Severity?",
                        "",
                        "SystemMarkingGroup",
                        "",
                        "<TimeStamp>"});
#line 261
   testRunner.And("the query history contains the following information", ((string)(null)), table14, "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Action",
                        "Status",
                        "Verbatim Term",
                        "Comment",
                        "Time Stamp"});
            table15.AddRow(new string[] {
                        "<User>",
                        "Reclassify",
                        "Reconsider",
                        "HEADACHE",
                        "Reconfirm",
                        "<TimeStamp>"});
            table15.AddRow(new string[] {
                        "<User>",
                        "Complete Without Transmission",
                        "Completed",
                        "HEADACHE",
                        "Transmission Queue Number:",
                        "<TimeStamp>"});
            table15.AddRow(new string[] {
                        "<User>",
                        "Complete Without Transmission",
                        "Waiting Transmission",
                        "HEADACHE",
                        "Cancel Query On Transmit:",
                        "<TimeStamp>"});
#line 266
   testRunner.And("the Coding History contains following information", ((string)(null)), table15, "And ");
#line 271
   testRunner.And("the query status for task \"HEADACHE\" is \"Queued\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CODING When an auto-coded by synonym coding decision for a verbatim with a Query " +
            "status of Open is approved Coder shall display a Queued query status and accept " +
            "the coding decision approval")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163356_017")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.Timeout(300000)]
        public virtual void CODINGWhenAnAuto_CodedBySynonymCodingDecisionForAVerbatimWithAQueryStatusOfOpenIsApprovedCoderShallDisplayAQueuedQueryStatusAndAcceptTheCodingDecisionApproval()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CODING When an auto-coded by synonym coding decision for a verbatim with a Query " +
                    "status of Open is approved Coder shall display a Queued query status and accept " +
                    "the coding decision approval", new string[] {
                        "VAL",
                        "PBMCC_163356_017",
                        "Release2015.3.0",
                        "IncreaseTimeout_300000"});
#line 277
this.ScenarioSetup(scenarioInfo);
#line 279
   testRunner.Given("a \"Waiting Approval\" Coder setup with registered synonym list \"MedDRA ENG 15.0 In" +
                    "itial_List\" containing entry \"HEADACHES|10066635|LLT|LLT:10066635;PT:10027599;HL" +
                    "T:10027603;HLGT:10019231;SOC:10029205|True||Approved|Acute migraine\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 280
   testRunner.When("the query for new task \"HEADACHES\" with comment \"Severity?\" is \"Open\" with respon" +
                    "se \"Acute\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 281
   testRunner.And("approving task \"HEADACHES\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 282
   testRunner.And("reclassifying task \"HEADACHES\" with comment \"Reconfirm\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 283
   testRunner.And("exporting the Coding History Report for term \"HEADACHES\" with export columns \"ALL" +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "User",
                        "Action",
                        "System Action",
                        "Query Status",
                        "Query Text",
                        "Query Response",
                        "Query Notes"});
            table16.AddRow(new string[] {
                        "HEADACHES",
                        "System User",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table16.AddRow(new string[] {
                        "HEADACHES",
                        "System User",
                        "Start Auto Code",
                        "Auto Coding",
                        "",
                        "",
                        "",
                        ""});
            table16.AddRow(new string[] {
                        "HEADACHES",
                        "<User>",
                        "Open Query",
                        "Open Query",
                        "",
                        "",
                        "",
                        ""});
            table16.AddRow(new string[] {
                        "HEADACHES",
                        "<User>",
                        "",
                        "",
                        "Queued",
                        "Severity?",
                        "",
                        ""});
            table16.AddRow(new string[] {
                        "HEADACHES",
                        "System User",
                        "",
                        "",
                        "Open",
                        "Severity?",
                        "Acute",
                        ""});
            table16.AddRow(new string[] {
                        "HEADACHES",
                        "<User>",
                        "",
                        "",
                        "Queued",
                        "",
                        "",
                        ""});
            table16.AddRow(new string[] {
                        "HEADACHES",
                        "<User>",
                        "Approve",
                        "Approve Coding",
                        "",
                        "",
                        "",
                        ""});
#line 284
   testRunner.Then("the Coding History Report should contain the following", ((string)(null)), table16, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Verbatim Term",
                        "Query Status",
                        "Query Text",
                        "Query Response",
                        "Open To",
                        "Query Notes",
                        "Time Stamp"});
            table17.AddRow(new string[] {
                        "<User>",
                        "HEADACHES",
                        "Queued",
                        "",
                        "",
                        "",
                        "",
                        "<TimeStamp>"});
            table17.AddRow(new string[] {
                        "<SystemUser>",
                        "HEADACHES",
                        "Open",
                        "Severity?",
                        "Acute",
                        "SystemMarkingGroup",
                        "",
                        "<TimeStamp>"});
            table17.AddRow(new string[] {
                        "<User>",
                        "HEADACHES",
                        "Queued",
                        "Severity?",
                        "",
                        "SystemMarkingGroup",
                        "",
                        "<TimeStamp>"});
#line 293
   testRunner.And("the query history contains the following information", ((string)(null)), table17, "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Action",
                        "Status",
                        "Verbatim Term",
                        "Comment",
                        "Time Stamp"});
            table18.AddRow(new string[] {
                        "<User>",
                        "Reclassify",
                        "Reconsider",
                        "HEADACHES",
                        "Reconfirm",
                        "<TimeStamp>"});
            table18.AddRow(new string[] {
                        "<User>",
                        "Complete Without Transmission",
                        "Completed",
                        "HEADACHES",
                        "Transmission Queue Number:",
                        "<TimeStamp>"});
            table18.AddRow(new string[] {
                        "<User>",
                        "Complete Without Transmission",
                        "Waiting Transmission",
                        "HEADACHES",
                        "Cancel Query On Transmit:",
                        "<TimeStamp>"});
#line 298
   testRunner.And("the Coding History contains following information", ((string)(null)), table18, "And ");
#line 303
   testRunner.And("the query status for task \"HEADACHES\" is \"Queued\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CODING When a manually coded decision for a verbatim with a Query status of Answe" +
            "red is approved Coder shall display a Queued query status and accept the coding " +
            "decision approval")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163356_018")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.Timeout(300000)]
        public virtual void CODINGWhenAManuallyCodedDecisionForAVerbatimWithAQueryStatusOfAnsweredIsApprovedCoderShallDisplayAQueuedQueryStatusAndAcceptTheCodingDecisionApproval()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CODING When a manually coded decision for a verbatim with a Query status of Answe" +
                    "red is approved Coder shall display a Queued query status and accept the coding " +
                    "decision approval", new string[] {
                        "VAL",
                        "PBMCC_163356_018",
                        "Release2015.3.0",
                        "IncreaseTimeout_300000"});
#line 309
this.ScenarioSetup(scenarioInfo);
#line 311
   testRunner.Given("a \"Waiting Approval\" Coder setup with no tasks and no synonyms and dictionary \"Me" +
                    "dDRA ENG 15.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 312
   testRunner.When("the query for new task \"HEADACHES\" with comment \"Severity?\" is \"Answered\" with re" +
                    "sponse \"Acute\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 313
   testRunner.And("task \"HEADACHES\" is coded to term \"Acute migraine\" at search level \"Low Level Ter" +
                    "m\" with code \"10066635\" at level \"LLT\" and the coding decision is manually appro" +
                    "ved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 314
   testRunner.And("reclassifying task \"HEADACHES\" with comment \"Reconfirm\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 315
   testRunner.And("exporting the Coding History Report for term \"HEADACHES\" with export columns \"ALL" +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "User",
                        "Action",
                        "System Action",
                        "Query Status",
                        "Query Text",
                        "Query Response",
                        "Query Notes"});
            table19.AddRow(new string[] {
                        "HEADACHES",
                        "System User",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table19.AddRow(new string[] {
                        "HEADACHES",
                        "System User",
                        "Start Auto Code",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table19.AddRow(new string[] {
                        "HEADACHES",
                        "<User>",
                        "Open Query",
                        "Open Query",
                        "",
                        "",
                        "",
                        ""});
            table19.AddRow(new string[] {
                        "HEADACHES",
                        "<User>",
                        "",
                        "",
                        "Queued",
                        "Severity?",
                        "",
                        ""});
            table19.AddRow(new string[] {
                        "HEADACHES",
                        "System User",
                        "",
                        "",
                        "Answered",
                        "Severity?",
                        "Acute",
                        ""});
            table19.AddRow(new string[] {
                        "HEADACHES",
                        "<User>",
                        "",
                        "",
                        "Queued",
                        "",
                        "",
                        ""});
            table19.AddRow(new string[] {
                        "HEADACHES",
                        "<User>",
                        "Browse and Code",
                        "Manual Coding",
                        "",
                        "",
                        "",
                        ""});
#line 316
   testRunner.Then("the Coding History Report should contain the following", ((string)(null)), table19, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Verbatim Term",
                        "Query Status",
                        "Query Text",
                        "Query Response",
                        "Open To",
                        "Query Notes",
                        "Time Stamp"});
            table20.AddRow(new string[] {
                        "<User>",
                        "HEADACHES",
                        "Queued",
                        "",
                        "",
                        "",
                        "",
                        "<TimeStamp>"});
            table20.AddRow(new string[] {
                        "<SystemUser>",
                        "HEADACHES",
                        "Answered",
                        "Severity?",
                        "Acute",
                        "SystemMarkingGroup",
                        "",
                        "<TimeStamp>"});
            table20.AddRow(new string[] {
                        "<User>",
                        "HEADACHES",
                        "Queued",
                        "Severity?",
                        "",
                        "SystemMarkingGroup",
                        "",
                        "<TimeStamp>"});
#line 325
   testRunner.And("the query history contains the following information", ((string)(null)), table20, "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Action",
                        "Status",
                        "Verbatim Term",
                        "Comment",
                        "Time Stamp"});
            table21.AddRow(new string[] {
                        "<User>",
                        "Reclassify",
                        "Reconsider",
                        "HEADACHES",
                        "Reconfirm",
                        "<TimeStamp>"});
            table21.AddRow(new string[] {
                        "<User>",
                        "Complete Without Transmission",
                        "Completed",
                        "HEADACHES",
                        "Transmission Queue Number:",
                        "<TimeStamp>"});
            table21.AddRow(new string[] {
                        "<User>",
                        "Complete Without Transmission",
                        "Waiting Transmission",
                        "HEADACHES",
                        "Cancel Query On Transmit:",
                        "<TimeStamp>"});
#line 330
   testRunner.And("the Coding History contains following information", ((string)(null)), table21, "And ");
#line 335
   testRunner.And("the query status for task \"HEADACHES\" is \"Queued\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CODING When an auto-coded direct dictionary matching decision for a verbatim with" +
            " a Query status of Answered is approved Coder shall display a Queued query statu" +
            "s and accept the coding decision approval")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163356_019")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void CODINGWhenAnAuto_CodedDirectDictionaryMatchingDecisionForAVerbatimWithAQueryStatusOfAnsweredIsApprovedCoderShallDisplayAQueuedQueryStatusAndAcceptTheCodingDecisionApproval()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CODING When an auto-coded direct dictionary matching decision for a verbatim with" +
                    " a Query status of Answered is approved Coder shall display a Queued query statu" +
                    "s and accept the coding decision approval", new string[] {
                        "VAL",
                        "PBMCC_163356_019",
                        "Release2015.3.0"});
#line 340
this.ScenarioSetup(scenarioInfo);
#line 342
   testRunner.Given("a \"Waiting Approval\" Coder setup with no tasks and no synonyms and dictionary \"Me" +
                    "dDRA ENG 15.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 343
   testRunner.When("the query for new task \"HEADACHE\" with comment \"Severity?\" is \"Answered\" with res" +
                    "ponse \"Acute\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 344
   testRunner.And("approving task \"HEADACHE\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 345
   testRunner.And("reclassifying task \"HEADACHE\" with comment \"Reconfirm\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 346
   testRunner.And("exporting the Coding History Report for term \"HEADACHE\" with export columns \"ALL\"" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "User",
                        "Action",
                        "System Action",
                        "Query Status",
                        "Query Text",
                        "Query Response",
                        "Query Notes"});
            table22.AddRow(new string[] {
                        "HEADACHE",
                        "System User",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table22.AddRow(new string[] {
                        "HEADACHE",
                        "System User",
                        "Start Auto Code",
                        "Auto Coding",
                        "",
                        "",
                        "",
                        ""});
            table22.AddRow(new string[] {
                        "HEADACHE",
                        "<User>",
                        "Open Query",
                        "Open Query",
                        "",
                        "",
                        "",
                        ""});
            table22.AddRow(new string[] {
                        "HEADACHE",
                        "<User>",
                        "",
                        "",
                        "Queued",
                        "Severity?",
                        "",
                        ""});
            table22.AddRow(new string[] {
                        "HEADACHE",
                        "System User",
                        "",
                        "",
                        "Answered",
                        "Severity?",
                        "Acute",
                        ""});
            table22.AddRow(new string[] {
                        "HEADACHE",
                        "<User>",
                        "",
                        "",
                        "Queued",
                        "",
                        "",
                        ""});
            table22.AddRow(new string[] {
                        "HEADACHE",
                        "<User>",
                        "Approve",
                        "Approve Coding",
                        "",
                        "",
                        "",
                        ""});
#line 347
   testRunner.Then("the Coding History Report should contain the following", ((string)(null)), table22, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Verbatim Term",
                        "Query Status",
                        "Query Text",
                        "Query Response",
                        "Open To",
                        "Query Notes",
                        "Time Stamp"});
            table23.AddRow(new string[] {
                        "<User>",
                        "HEADACHE",
                        "Queued",
                        "",
                        "",
                        "",
                        "",
                        "<TimeStamp>"});
            table23.AddRow(new string[] {
                        "<SystemUser>",
                        "HEADACHE",
                        "Answered",
                        "Severity?",
                        "Acute",
                        "SystemMarkingGroup",
                        "",
                        "<TimeStamp>"});
            table23.AddRow(new string[] {
                        "<User>",
                        "HEADACHE",
                        "Queued",
                        "Severity?",
                        "",
                        "SystemMarkingGroup",
                        "",
                        "<TimeStamp>"});
#line 356
   testRunner.And("the query history contains the following information", ((string)(null)), table23, "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Action",
                        "Status",
                        "Verbatim Term",
                        "Comment",
                        "Time Stamp"});
            table24.AddRow(new string[] {
                        "<User>",
                        "Reclassify",
                        "Reconsider",
                        "HEADACHE",
                        "Reconfirm",
                        "<TimeStamp>"});
            table24.AddRow(new string[] {
                        "<User>",
                        "Complete Without Transmission",
                        "Completed",
                        "HEADACHE",
                        "Transmission Queue Number:",
                        "<TimeStamp>"});
            table24.AddRow(new string[] {
                        "<User>",
                        "Complete Without Transmission",
                        "Waiting Transmission",
                        "HEADACHE",
                        "Cancel Query On Transmit:",
                        "<TimeStamp>"});
#line 361
   testRunner.And("the Coding History contains following information", ((string)(null)), table24, "And ");
#line 366
   testRunner.And("the query status for task \"HEADACHE\" is \"Queued\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CODING When an auto-coded by synonym coding decision for a verbatim with a Query " +
            "status of Answered is approved Coder shall display a Queued query status and acc" +
            "ept the coding decision approval")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163356_020")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.Timeout(300000)]
        public virtual void CODINGWhenAnAuto_CodedBySynonymCodingDecisionForAVerbatimWithAQueryStatusOfAnsweredIsApprovedCoderShallDisplayAQueuedQueryStatusAndAcceptTheCodingDecisionApproval()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CODING When an auto-coded by synonym coding decision for a verbatim with a Query " +
                    "status of Answered is approved Coder shall display a Queued query status and acc" +
                    "ept the coding decision approval", new string[] {
                        "VAL",
                        "PBMCC_163356_020",
                        "Release2015.3.0",
                        "IncreaseTimeout_300000"});
#line 372
this.ScenarioSetup(scenarioInfo);
#line 374
   testRunner.Given("a \"Waiting Approval\" Coder setup with registered synonym list \"MedDRA ENG 15.0 In" +
                    "itial_List\" containing entry \"HEADACHES|10066635|LLT|LLT:10066635;PT:10027599;HL" +
                    "T:10027603;HLGT:10019231;SOC:10029205|True||Approved|Acute migraine\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 375
   testRunner.When("the query for new task \"HEADACHES\" with comment \"Severity?\" is \"Answered\" with re" +
                    "sponse \"Acute\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 376
   testRunner.And("approving task \"HEADACHES\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 377
   testRunner.And("reclassifying task \"HEADACHES\" with comment \"Reconfirm\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 378
   testRunner.And("exporting the Coding History Report for term \"HEADACHES\" with export columns \"ALL" +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "User",
                        "Action",
                        "System Action",
                        "Query Status",
                        "Query Text",
                        "Query Response",
                        "Query Notes"});
            table25.AddRow(new string[] {
                        "HEADACHES",
                        "System User",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table25.AddRow(new string[] {
                        "HEADACHES",
                        "System User",
                        "Start Auto Code",
                        "Auto Coding",
                        "",
                        "",
                        "",
                        ""});
            table25.AddRow(new string[] {
                        "HEADACHES",
                        "<User>",
                        "Open Query",
                        "Open Query",
                        "",
                        "",
                        "",
                        ""});
            table25.AddRow(new string[] {
                        "HEADACHES",
                        "<User>",
                        "",
                        "",
                        "Queued",
                        "Severity?",
                        "",
                        ""});
            table25.AddRow(new string[] {
                        "HEADACHES",
                        "System User",
                        "",
                        "",
                        "Answered",
                        "Severity?",
                        "Acute",
                        ""});
            table25.AddRow(new string[] {
                        "HEADACHES",
                        "<User>",
                        "",
                        "",
                        "Queued",
                        "",
                        "",
                        ""});
            table25.AddRow(new string[] {
                        "HEADACHES",
                        "<User>",
                        "Approve",
                        "Approve Coding",
                        "",
                        "",
                        "",
                        ""});
#line 379
   testRunner.Then("the Coding History Report should contain the following", ((string)(null)), table25, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Verbatim Term",
                        "Query Status",
                        "Query Text",
                        "Query Response",
                        "Open To",
                        "Query Notes",
                        "Time Stamp"});
            table26.AddRow(new string[] {
                        "<User>",
                        "HEADACHES",
                        "Queued",
                        "",
                        "",
                        "",
                        "",
                        "<TimeStamp>"});
            table26.AddRow(new string[] {
                        "<SystemUser>",
                        "HEADACHES",
                        "Answered",
                        "Severity?",
                        "Acute",
                        "SystemMarkingGroup",
                        "",
                        "<TimeStamp>"});
            table26.AddRow(new string[] {
                        "<User>",
                        "HEADACHES",
                        "Queued",
                        "Severity?",
                        "",
                        "SystemMarkingGroup",
                        "",
                        "<TimeStamp>"});
#line 388
   testRunner.And("the query history contains the following information", ((string)(null)), table26, "And ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Action",
                        "Status",
                        "Verbatim Term",
                        "Comment",
                        "Time Stamp"});
            table27.AddRow(new string[] {
                        "<User>",
                        "Reclassify",
                        "Reconsider",
                        "HEADACHES",
                        "Reconfirm",
                        "<TimeStamp>"});
            table27.AddRow(new string[] {
                        "<User>",
                        "Complete Without Transmission",
                        "Completed",
                        "HEADACHES",
                        "Transmission Queue Number:",
                        "<TimeStamp>"});
            table27.AddRow(new string[] {
                        "<User>",
                        "Complete Without Transmission",
                        "Waiting Transmission",
                        "HEADACHES",
                        "Cancel Query On Transmit:",
                        "<TimeStamp>"});
#line 393
   testRunner.And("the Coding History contains following information", ((string)(null)), table27, "And ");
#line 398
   testRunner.And("the query status for task \"HEADACHES\" is \"Queued\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CODING When a manually coded decision for a verbatim with a Query status of Open " +
            "is approved for J-Drug Coder shall display a Queued query status and accept the " +
            "coding decision approval")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163356_021")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.Timeout(300000)]
        public virtual void CODINGWhenAManuallyCodedDecisionForAVerbatimWithAQueryStatusOfOpenIsApprovedForJ_DrugCoderShallDisplayAQueuedQueryStatusAndAcceptTheCodingDecisionApproval()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CODING When a manually coded decision for a verbatim with a Query status of Open " +
                    "is approved for J-Drug Coder shall display a Queued query status and accept the " +
                    "coding decision approval", new string[] {
                        "VAL",
                        "PBMCC_163356_021",
                        "Release2015.3.0",
                        "IncreaseTimeout_300000"});
#line 404
this.ScenarioSetup(scenarioInfo);
#line 406
   testRunner.Given("a \"Waiting Approval\" Coder setup with no tasks and no synonyms and dictionary \"JD" +
                    "rug JPN 2013H1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 407
   testRunner.When("the query for new task \"HEADACHES\" with comment \"Severity?\" is \"Open\" with respon" +
                    "se \"Acute\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 408
   testRunner.And("task \"HEADACHES\" is coded to term \"コカイン塩酸塩\" at search level \"DrugName\" with code " +
                    "\"8121700\" at level \"薬\" and the coding decision is manually approved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 409
   testRunner.And("reclassifying task \"HEADACHES\" with comment \"Reconfirm\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 410
   testRunner.And("exporting the Coding History Report for term \"HEADACHES\" with export columns \"ALL" +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "User",
                        "Action",
                        "System Action",
                        "Query Status",
                        "Query Text",
                        "Query Response",
                        "Query Notes"});
            table28.AddRow(new string[] {
                        "HEADACHES",
                        "System User",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table28.AddRow(new string[] {
                        "HEADACHES",
                        "System User",
                        "Start Auto Code",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table28.AddRow(new string[] {
                        "HEADACHES",
                        "<User>",
                        "Open Query",
                        "Open Query",
                        "",
                        "",
                        "",
                        ""});
            table28.AddRow(new string[] {
                        "HEADACHES",
                        "<User>",
                        "",
                        "",
                        "Queued",
                        "Severity?",
                        "",
                        ""});
            table28.AddRow(new string[] {
                        "HEADACHES",
                        "System User",
                        "",
                        "",
                        "Open",
                        "Severity?",
                        "Acute",
                        ""});
            table28.AddRow(new string[] {
                        "HEADACHES",
                        "<User>",
                        "",
                        "",
                        "Queued",
                        "",
                        "",
                        ""});
            table28.AddRow(new string[] {
                        "HEADACHES",
                        "<User>",
                        "Browse and Code",
                        "Manual Coding",
                        "",
                        "",
                        "",
                        ""});
#line 411
   testRunner.Then("the Coding History Report should contain the following", ((string)(null)), table28, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Verbatim Term",
                        "Query Status",
                        "Query Text",
                        "Query Response",
                        "Open To",
                        "Query Notes",
                        "Time Stamp"});
            table29.AddRow(new string[] {
                        "<User>",
                        "HEADACHES",
                        "Queued",
                        "",
                        "",
                        "",
                        "",
                        "<TimeStamp>"});
            table29.AddRow(new string[] {
                        "<SystemUser>",
                        "HEADACHES",
                        "Open",
                        "Severity?",
                        "Acute",
                        "SystemMarkingGroup",
                        "",
                        "<TimeStamp>"});
            table29.AddRow(new string[] {
                        "<User>",
                        "HEADACHES",
                        "Queued",
                        "Severity?",
                        "",
                        "SystemMarkingGroup",
                        "",
                        "<TimeStamp>"});
#line 420
   testRunner.And("the query history contains the following information", ((string)(null)), table29, "And ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Action",
                        "Status",
                        "Verbatim Term",
                        "Comment",
                        "Time Stamp"});
            table30.AddRow(new string[] {
                        "<User>",
                        "Reclassify",
                        "Reconsider",
                        "HEADACHES",
                        "Reconfirm",
                        "<TimeStamp>"});
            table30.AddRow(new string[] {
                        "<User>",
                        "Complete Without Transmission",
                        "Completed",
                        "HEADACHES",
                        "Transmission Queue Number:",
                        "<TimeStamp>"});
            table30.AddRow(new string[] {
                        "<User>",
                        "Complete Without Transmission",
                        "Waiting Transmission",
                        "HEADACHES",
                        "Cancel Query On Transmit:",
                        "<TimeStamp>"});
#line 425
   testRunner.And("the Coding History contains following information", ((string)(null)), table30, "And ");
#line 430
   testRunner.And("the query status for task \"HEADACHES\" is \"Queued\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CODING When an auto-coded direct dictionary matching decision for a verbatim with" +
            " a Query status of Answered is approved for J-Drug Coder shall display a Queued " +
            "query status and accept the coding decision approval")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163356_022")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        public virtual void CODINGWhenAnAuto_CodedDirectDictionaryMatchingDecisionForAVerbatimWithAQueryStatusOfAnsweredIsApprovedForJ_DrugCoderShallDisplayAQueuedQueryStatusAndAcceptTheCodingDecisionApproval()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CODING When an auto-coded direct dictionary matching decision for a verbatim with" +
                    " a Query status of Answered is approved for J-Drug Coder shall display a Queued " +
                    "query status and accept the coding decision approval", new string[] {
                        "VAL",
                        "PBMCC_163356_022",
                        "Release2015.3.0"});
#line 435
this.ScenarioSetup(scenarioInfo);
#line 437
   testRunner.Given("a \"Waiting Approval\" Coder setup with no tasks and no synonyms and dictionary \"JD" +
                    "rug JPN 2013H1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 438
   testRunner.When("the query for new task \"コカイン塩酸塩\" with comment \"Severity?\" is \"Answered\" with resp" +
                    "onse \"Acute\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 439
   testRunner.And("approving task \"コカイン塩酸塩\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 440
   testRunner.And("reclassifying task \"コカイン塩酸塩\" with comment \"Reconfirm\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 441
   testRunner.And("exporting the Coding History Report for term \"コカイン塩酸塩\" with export columns \"ALL\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "User",
                        "Action",
                        "System Action",
                        "Query Status",
                        "Query Text",
                        "Query Response",
                        "Query Notes"});
            table31.AddRow(new string[] {
                        "コカイン塩酸塩",
                        "System User",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table31.AddRow(new string[] {
                        "コカイン塩酸塩",
                        "System User",
                        "Start Auto Code",
                        "Auto Coding",
                        "",
                        "",
                        "",
                        ""});
            table31.AddRow(new string[] {
                        "コカイン塩酸塩",
                        "<User>",
                        "Open Query",
                        "Open Query",
                        "",
                        "",
                        "",
                        ""});
            table31.AddRow(new string[] {
                        "コカイン塩酸塩",
                        "<User>",
                        "",
                        "",
                        "Queued",
                        "Severity?",
                        "",
                        ""});
            table31.AddRow(new string[] {
                        "コカイン塩酸塩",
                        "System User",
                        "",
                        "",
                        "Answered",
                        "Severity?",
                        "Acute",
                        ""});
            table31.AddRow(new string[] {
                        "コカイン塩酸塩",
                        "<User>",
                        "",
                        "",
                        "Queued",
                        "",
                        "",
                        ""});
            table31.AddRow(new string[] {
                        "コカイン塩酸塩",
                        "<User>",
                        "Approve",
                        "Approve Coding",
                        "",
                        "",
                        "",
                        ""});
#line 442
   testRunner.Then("the Coding History Report should contain the following", ((string)(null)), table31, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Verbatim Term",
                        "Query Status",
                        "Query Text",
                        "Query Response",
                        "Open To",
                        "Query Notes",
                        "Time Stamp"});
            table32.AddRow(new string[] {
                        "<User>",
                        "コカイン塩酸塩",
                        "Queued",
                        "",
                        "",
                        "",
                        "",
                        "<TimeStamp>"});
            table32.AddRow(new string[] {
                        "<SystemUser>",
                        "コカイン塩酸塩",
                        "Answered",
                        "Severity?",
                        "Acute",
                        "SystemMarkingGroup",
                        "",
                        "<TimeStamp>"});
            table32.AddRow(new string[] {
                        "<User>",
                        "コカイン塩酸塩",
                        "Queued",
                        "Severity?",
                        "",
                        "SystemMarkingGroup",
                        "",
                        "<TimeStamp>"});
#line 451
   testRunner.And("the query history contains the following information", ((string)(null)), table32, "And ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Action",
                        "Status",
                        "Verbatim Term",
                        "Comment",
                        "Time Stamp"});
            table33.AddRow(new string[] {
                        "<User>",
                        "Reclassify",
                        "Reconsider",
                        "コカイン塩酸塩",
                        "Reconfirm",
                        "<TimeStamp>"});
            table33.AddRow(new string[] {
                        "<User>",
                        "Complete Without Transmission",
                        "Completed",
                        "コカイン塩酸塩",
                        "Transmission Queue Number:",
                        "<TimeStamp>"});
            table33.AddRow(new string[] {
                        "<User>",
                        "Complete Without Transmission",
                        "Waiting Transmission",
                        "コカイン塩酸塩",
                        "Cancel Query On Transmit:",
                        "<TimeStamp>"});
#line 456
   testRunner.And("the Coding History contains following information", ((string)(null)), table33, "And ");
#line 461
   testRunner.And("the query status for task \"コカイン塩酸塩\" is \"Queued\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("REPORT The Query History Information shall not be displayed in the report if Incl" +
            "ude Query Fields is not selected as an Export Column")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163356_023")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void REPORTTheQueryHistoryInformationShallNotBeDisplayedInTheReportIfIncludeQueryFieldsIsNotSelectedAsAnExportColumn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("REPORT The Query History Information shall not be displayed in the report if Incl" +
                    "ude Query Fields is not selected as an Export Column", new string[] {
                        "VAL",
                        "PBMCC_163356_023",
                        "Release2015.3.0",
                        "IncreaseTimeout_600000"});
#line 467
this.ScenarioSetup(scenarioInfo);
#line 469
   testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 470
   testRunner.And("coding task \"EMPTY\" for dictionary level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 471
   testRunner.When("I open a query for new task \"FLUS\" with comment \"Epidemic?\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 472
   testRunner.And("the query for new task \"OPEN WOUNDED\" with comment \"Size?\" is \"Open\" with respons" +
                    "e \"Small\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 473
   testRunner.And("the query for new task \"PAINS\" with comment \"Many?\" is \"Answered\" with response \"" +
                    "A lot\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 474
   testRunner.And("the query for new task \"HEADACHES\" with comment \"Severity?\" is \"Cancelled\" with r" +
                    "esponse \"Acute\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 475
   testRunner.And("the query for new task \"CLOTHES\" with comment \"Is this a typo?\" is \"Closed\" with " +
                    "response \"Yes\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 476
   testRunner.And("exporting the Coding History Report with export columns \"None\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 477
   testRunner.Then("the Coding History Report includes no query history information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("REPORT The Query History Information shall be displayed in the report if Include " +
            "Query Fields is selected as an Export Column")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163356_024")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void REPORTTheQueryHistoryInformationShallBeDisplayedInTheReportIfIncludeQueryFieldsIsSelectedAsAnExportColumn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("REPORT The Query History Information shall be displayed in the report if Include " +
                    "Query Fields is selected as an Export Column", new string[] {
                        "VAL",
                        "PBMCC_163356_024",
                        "Release2015.3.0",
                        "IncreaseTimeout_600000"});
#line 483
this.ScenarioSetup(scenarioInfo);
#line 485
   testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 486
   testRunner.And("coding task \"EMPTY\" for dictionary level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 487
   testRunner.When("I open a query for new task \"FLUS\" with comment \"Epidemic?\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 488
   testRunner.And("the query for new task \"OPEN WOUNDED\" with comment \"Size?\" is \"Open\" with respons" +
                    "e \"Small\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 489
   testRunner.And("the query for new task \"PAINS\" with comment \"Many?\" is \"Answered\" with response \"" +
                    "A lot\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 490
   testRunner.And("the query for new task \"HEADACHES\" with comment \"Severity?\" is \"Cancelled\" with r" +
                    "esponse \"Acute\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 491
   testRunner.And("the query for new task \"CLOTHES\" with comment \"Is this a typo?\" is \"Closed\" with " +
                    "response \"Yes\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 492
   testRunner.And("exporting the Coding History Report with export columns \"ALL\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "User",
                        "Action",
                        "System Action",
                        "Query Status",
                        "Query Text",
                        "Query Response",
                        "Query Notes"});
            table34.AddRow(new string[] {
                        "EMPTY",
                        "System User",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "EMPTY",
                        "System User",
                        "Start Auto Code",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "FLUS",
                        "System User",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "FLUS",
                        "System User",
                        "Start Auto Code",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "FLUS",
                        "<User>",
                        "Open Query",
                        "Open Query",
                        "",
                        "",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "FLUS",
                        "<User>",
                        "",
                        "",
                        "Queued",
                        "Epidemic?",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "OPEN WOUNDED",
                        "System User",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "OPEN WOUNDED",
                        "System User",
                        "Start Auto Code",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "OPEN WOUNDED",
                        "<User>",
                        "Open Query",
                        "Open Query",
                        "",
                        "",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "OPEN WOUNDED",
                        "<User>",
                        "",
                        "",
                        "Queued",
                        "Size?",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "OPEN WOUNDED",
                        "System User",
                        "",
                        "",
                        "Open",
                        "Size?",
                        "Small",
                        ""});
            table34.AddRow(new string[] {
                        "PAINS",
                        "System User",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "PAINS",
                        "System User",
                        "Start Auto Code",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "PAINS",
                        "<User>",
                        "Open Query",
                        "Open Query",
                        "",
                        "",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "PAINS",
                        "<User>",
                        "",
                        "",
                        "Queued",
                        "Many?",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "PAINS",
                        "System User",
                        "",
                        "",
                        "Answered",
                        "Many?",
                        "A lot",
                        ""});
            table34.AddRow(new string[] {
                        "HEADACHES",
                        "System User",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "HEADACHES",
                        "System User",
                        "Start Auto Code",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "HEADACHES",
                        "<User>",
                        "Open Query",
                        "Open Query",
                        "",
                        "",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "HEADACHES",
                        "<User>",
                        "",
                        "",
                        "Queued",
                        "Severity?",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "HEADACHES",
                        "System User",
                        "",
                        "",
                        "Cancelled",
                        "Severity?",
                        "Acute",
                        ""});
            table34.AddRow(new string[] {
                        "CLOTHES",
                        "System User",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "CLOTHES",
                        "System User",
                        "Start Auto Code",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "CLOTHES",
                        "<User>",
                        "Open Query",
                        "Open Query",
                        "",
                        "",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "CLOTHES",
                        "<User>",
                        "",
                        "",
                        "Queued",
                        "Is this a typo?",
                        "",
                        ""});
            table34.AddRow(new string[] {
                        "CLOTHES",
                        "System User",
                        "",
                        "",
                        "Closed",
                        "Is this a typo?",
                        "Yes",
                        ""});
#line 493
   testRunner.Then("the Coding History Report should contain the following", ((string)(null)), table34, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("FILTER User can filter Queries by Open Answered Cancelled Closed Queued and All")]
        [NUnit.Framework.IgnoreAttribute()]
        [NUnit.Framework.CategoryAttribute("DFT")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163356_025")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.Timeout(300000)]
        public virtual void FILTERUserCanFilterQueriesByOpenAnsweredCancelledClosedQueuedAndAll()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("FILTER User can filter Queries by Open Answered Cancelled Closed Queued and All", new string[] {
                        "DFT",
                        "PBMCC_163356_025",
                        "Release2015.3.0",
                        "IncreaseTimeout_300000",
                        "ignore"});
#line 528
this.ScenarioSetup(scenarioInfo);
#line 530
   testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 531
   testRunner.And("coding task \"EMPTY\" for dictionary level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 532
   testRunner.When("I open a query for new task \"FLUS\" with comment \"Epidemic?\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 533
   testRunner.And("the query for new task \"OPEN WOUNDED\" with comment \"Size?\" is \"Open\" with respons" +
                    "e \"Small\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 534
   testRunner.And("the query for new task \"PAINS\" with comment \"Many?\" is \"Answered\" with response \"" +
                    "A lot\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 535
   testRunner.And("the query for new task \"HEADACHES\" with comment \"Severity?\" is \"Cancelled\" with r" +
                    "esponse \"Acute\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 536
   testRunner.And("the query for new task \"CLOTHES\" with comment \"Is this a typo?\" is \"Closed\" with " +
                    "response \"Yes\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 537
   testRunner.And("all task filters are cleared", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 538
   testRunner.And("I filter for tasks with \"Queries\" of \"Queued\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 539
   testRunner.Then("Only tasks with \"Queries\" of \"Queued\" will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 540
   testRunner.When("I filter for tasks with \"Queries\" of \"Open\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 541
   testRunner.Then("Only tasks with \"Queries\" of \"Open\" will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 542
   testRunner.When("I filter for tasks with \"Queries\" of \"Answered\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 543
   testRunner.Then("Only tasks with \"Queries\" of \"Answered\" will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 544
   testRunner.When("I filter for tasks with \"Queries\" of \"Cancelled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 545
   testRunner.Then("Only tasks with \"Queries\" of \"Cancelled\" will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 546
   testRunner.When("I filter for tasks with \"Queries\" of \"Closed\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 547
   testRunner.Then("Only tasks with \"Queries\" of \"Closed\" will be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 548
   testRunner.When("I filter for tasks with \"Queries\" of \"All\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Queries"});
            table35.AddRow(new string[] {
                        "EMPTY",
                        ""});
            table35.AddRow(new string[] {
                        "FLUS",
                        "Queued"});
            table35.AddRow(new string[] {
                        "OPEN WOUNDED",
                        "Open"});
            table35.AddRow(new string[] {
                        "PAINS",
                        "Answered"});
            table35.AddRow(new string[] {
                        "HEADACHES",
                        "Cancelled"});
            table35.AddRow(new string[] {
                        "CLOTHES",
                        "Closed"});
#line 549
   testRunner.Then("the coding task table has the following ordered information", ((string)(null)), table35, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GROUPING Verbatims shall be grouped by query and workflow status")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC_163356_026")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.Timeout(420000)]
        public virtual void GROUPINGVerbatimsShallBeGroupedByQueryAndWorkflowStatus()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GROUPING Verbatims shall be grouped by query and workflow status", new string[] {
                        "VAL",
                        "PBMCC_163356_026",
                        "Release2015.3.0",
                        "IncreaseTimeout_420000"});
#line 562
this.ScenarioSetup(scenarioInfo);
#line 564
   testRunner.Given("a \"Waiting Approval\" Coder setup with no tasks and no synonyms and dictionary \"Me" +
                    "dDRA ENG 15.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 565
   testRunner.And("coding tasks \"HEADACHES, HEADACHES, HEADACHES, PAINS, PAINS, CLOTHES, CLOTHES, CL" +
                    "OTHES, CLOTHES\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 566
   testRunner.When("the query for task \"HEADACHES\" with comment \"Severity?\" is \"Open\" with response \"" +
                    "Acute\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 567
   testRunner.And("the query for task \"PAINS\" with comment \"Many?\" is \"Answered\" with response \"A lo" +
                    "t\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 568
   testRunner.And("the query for task \"CLOTHES\" with comment \"Is this a typo?\" is \"Closed\" with resp" +
                    "onse \"Yes\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Group",
                        "Queries"});
            table36.AddRow(new string[] {
                        "CLOTHES",
                        "3",
                        "Queued"});
            table36.AddRow(new string[] {
                        "CLOTHES",
                        "1",
                        "Closed"});
            table36.AddRow(new string[] {
                        "HEADACHES",
                        "2",
                        "Queued"});
            table36.AddRow(new string[] {
                        "HEADACHES",
                        "1",
                        "Open"});
            table36.AddRow(new string[] {
                        "PAINS",
                        "1",
                        "Queued"});
            table36.AddRow(new string[] {
                        "PAINS",
                        "1",
                        "Answered"});
#line 569
   testRunner.Then("the coding task table has the following ordered information", ((string)(null)), table36, "Then ");
#line 577
   testRunner.When("the first task \"CLOTHES\" in group \"3\" is coded to term \"Acute migraine\" at search" +
                    " level \"Low Level Term\" with code \"10066635\" at level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 578
   testRunner.When("all task filters are cleared", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Group",
                        "Status",
                        "Queries"});
            table37.AddRow(new string[] {
                        "CLOTHES",
                        "2",
                        "Waiting Manual Code",
                        "Queued"});
            table37.AddRow(new string[] {
                        "CLOTHES",
                        "1",
                        "Waiting Manual Code",
                        "Closed"});
            table37.AddRow(new string[] {
                        "CLOTHES",
                        "1",
                        "Waiting Approval",
                        "Queued"});
            table37.AddRow(new string[] {
                        "HEADACHES",
                        "2",
                        "Waiting Manual Code",
                        "Queued"});
            table37.AddRow(new string[] {
                        "HEADACHES",
                        "1",
                        "Waiting Manual Code",
                        "Open"});
            table37.AddRow(new string[] {
                        "PAINS",
                        "1",
                        "Waiting Manual Code",
                        "Queued"});
            table37.AddRow(new string[] {
                        "PAINS",
                        "1",
                        "Waiting Manual Code",
                        "Answered"});
#line 579
   testRunner.Then("the coding task table has the following ordered information", ((string)(null)), table37, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
