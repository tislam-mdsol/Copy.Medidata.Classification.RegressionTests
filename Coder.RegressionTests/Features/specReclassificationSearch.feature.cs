// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Coder.RegressionTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Verify the reclassification search section display and functionality")]
    [NUnit.Framework.CategoryAttribute("specReclassificationSearch.feature")]
    [NUnit.Framework.CategoryAttribute("CoderCore")]
    public partial class VerifyTheReclassificationSearchSectionDisplayAndFunctionalityFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "specReclassificationSearch.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Verify the reclassification search section display and functionality", "", ProgrammingLanguage.CSharp, new string[] {
                        "specReclassificationSearch.feature",
                        "CoderCore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Coder User is able to search via the following criteria: Subject, Verbatim Term" +
            ", Term, Code")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC166003_01")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.TestCaseAttribute("Verbatim", "HEADACHE", null)]
        [NUnit.Framework.TestCaseAttribute("Term", "Headache", null)]
        [NUnit.Framework.TestCaseAttribute("Code", "10019211", null)]
        [NUnit.Framework.TestCaseAttribute("Subject", "Subject 1", null)]
        public virtual void ACoderUserIsAbleToSearchViaTheFollowingCriteriaSubjectVerbatimTermTermCode(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "VAL",
                    "PBMCC166003_01",
                    "Release2015.3.0"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Coder User is able to search via the following criteria: Subject, Verbatim Term" +
                    ", Term, Code", @__tags);
#line 9
this.ScenarioSetup(scenarioInfo);
#line 11
 testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 12
 testRunner.And("coding task \"Headache\" for dictionary level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.When(string.Format("setting reclassification search value \"{0}\" for \"{1}\"", value, field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
 testRunner.And("setting reclassification search value \"True\" for \"IncludeAutocodedItems\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.And("performing reclassification search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Study",
                        "Subject",
                        "Verbatim",
                        "Term",
                        "Code",
                        "Priority",
                        "Form"});
            table1.AddRow(new string[] {
                        "<StudyName>",
                        "Subject 1",
                        "HEADACHE",
                        "Headache",
                        "10019211",
                        "1",
                        "Form 1"});
#line 16
 testRunner.Then("the reclassification search should contain", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A user can review a coding decision\'s EDC Form. Enables an easy way to differenti" +
            "ate Adverse Event vs Medical History related terms by their form names.")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC166003_02")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.TestCaseAttribute("Verbatim", "Headache", "Adverse Event", null)]
        [NUnit.Framework.TestCaseAttribute("Verbatim", "Headache", "Medical History", null)]
        public virtual void AUserCanReviewACodingDecisionSEDCForm_EnablesAnEasyWayToDifferentiateAdverseEventVsMedicalHistoryRelatedTermsByTheirFormNames_(string field, string value, string formValue, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "VAL",
                    "PBMCC166003_02",
                    "Release2015.3.0"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A user can review a coding decision\'s EDC Form. Enables an easy way to differenti" +
                    "ate Adverse Event vs Medical History related terms by their form names.", @__tags);
#line 30
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary Level",
                        "Form"});
            table2.AddRow(new string[] {
                        "Headache",
                        "LLT",
                        string.Format("{0}", formValue)});
#line 33
 testRunner.When("the following externally managed verbatim requests are made", ((string)(null)), table2, "When ");
#line 36
 testRunner.And(string.Format("setting reclassification search value \"{0}\" for \"{1}\"", value, field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
 testRunner.And("setting reclassification search value \"True\" for \"IncludeAutocodedItems\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.And("performing reclassification search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Study",
                        "Subject",
                        "Verbatim",
                        "Term",
                        "Code",
                        "Priority",
                        "Form"});
            table3.AddRow(new string[] {
                        "<StudyName>",
                        "Subject 1",
                        "HEADACHE",
                        "Headache",
                        "10019211",
                        "1",
                        string.Format("{0}", formValue)});
#line 39
 testRunner.Then("the reclassification search should contain", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Coder User is able to do a partial term search using the following criteria: Ve" +
            "rbatim, Subject")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC166003_03")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.TestCaseAttribute("Verbatim", "Head", null)]
        [NUnit.Framework.TestCaseAttribute("Subject", "Subject", null)]
        public virtual void ACoderUserIsAbleToDoAPartialTermSearchUsingTheFollowingCriteriaVerbatimSubject(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "VAL",
                    "PBMCC166003_03",
                    "Release2015.3.0"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Coder User is able to do a partial term search using the following criteria: Ve" +
                    "rbatim, Subject", @__tags);
#line 51
this.ScenarioSetup(scenarioInfo);
#line 53
 testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 54
 testRunner.And("coding task \"Headache\" for dictionary level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 55
 testRunner.When(string.Format("setting reclassification search value \"{0}\" for \"{1}\"", value, field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 56
 testRunner.And("setting reclassification search value \"True\" for \"IncludeAutocodedItems\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
 testRunner.And("performing reclassification search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Study",
                        "Subject",
                        "Verbatim",
                        "Term",
                        "Code",
                        "Priority",
                        "Form"});
            table4.AddRow(new string[] {
                        "<StudyName>",
                        "Subject 1",
                        "HEADACHE",
                        "Headache",
                        "10019211",
                        "1",
                        "Form 1"});
#line 58
 testRunner.Then("the reclassification search should contain", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Coder User is able to conduct a search using the following Prior Action: Browse" +
            " And Code, Approve")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC166003_04")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.TestCaseAttribute("PriorActions", "Browse And Code", null)]
        [NUnit.Framework.TestCaseAttribute("PriorActions", "Approve", null)]
        public virtual void ACoderUserIsAbleToConductASearchUsingTheFollowingPriorActionBrowseAndCodeApprove(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "VAL",
                    "PBMCC166003_04",
                    "Release2015.3.0"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Coder User is able to conduct a search using the following Prior Action: Browse" +
                    " And Code, Approve", @__tags);
#line 70
this.ScenarioSetup(scenarioInfo);
#line 72
 testRunner.Given("a \"Waiting Approval\" Coder setup with no tasks and no synonyms and dictionary \"Me" +
                    "dDRA ENG 15.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 73
 testRunner.And("coding task \"Heart Burn\" for dictionary level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
 testRunner.When("task \"Heart Burn\" is coded to term \"Reflux gastritis\" at search level \"Low Level " +
                    "Term\" with code \"10057969\" at level \"LLT\" and a synonym is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 75
 testRunner.And("approving task \"HEART BURN\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
 testRunner.And(string.Format("setting reclassification search value \"{0}\" for \"{1}\"", value, field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
 testRunner.And("performing reclassification search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Study",
                        "Subject",
                        "Verbatim",
                        "Term",
                        "Code",
                        "Priority",
                        "Form"});
            table5.AddRow(new string[] {
                        "<StudyName>",
                        "Subject 1",
                        "HEART BURN",
                        "Reflux gastritis",
                        "10057969",
                        "1",
                        "Form 1"});
#line 78
 testRunner.Then("the reclassification search should contain", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Coder User is able to conduct a search using the following Prior Action: Comple" +
            "te Without Transmission, Auto Approve Internal")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC166003_05")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.TestCaseAttribute("PriorActions", "Complete Without Transmission", null)]
        [NUnit.Framework.TestCaseAttribute("PriorActions", "Auto Approve Internal", null)]
        public virtual void ACoderUserIsAbleToConductASearchUsingTheFollowingPriorActionCompleteWithoutTransmissionAutoApproveInternal(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "VAL",
                    "PBMCC166003_05",
                    "Release2015.3.0"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Coder User is able to conduct a search using the following Prior Action: Comple" +
                    "te Without Transmission, Auto Approve Internal", @__tags);
#line 90
this.ScenarioSetup(scenarioInfo);
#line 92
 testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 93
 testRunner.And("coding task \"Headache\" for dictionary level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
 testRunner.When(string.Format("setting reclassification search value \"{0}\" for \"{1}\"", value, field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 95
 testRunner.And("setting reclassification search value \"True\" for \"IncludeAutocodedItems\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 96
 testRunner.And("performing reclassification search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Study",
                        "Subject",
                        "Verbatim",
                        "Term",
                        "Code",
                        "Priority",
                        "Form"});
            table6.AddRow(new string[] {
                        "<StudyName>",
                        "Subject 1",
                        "HEADACHE",
                        "Headache",
                        "10019211",
                        "1",
                        "Form 1"});
#line 97
 testRunner.Then("the reclassification search should contain", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Coder User is able to conduct a search using the following Prior Status: Comple" +
            "ted, Start")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC166003_06")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.TestCaseAttribute("PriorStatus", "Completed", null)]
        [NUnit.Framework.TestCaseAttribute("PriorStatus", "Start", null)]
        public virtual void ACoderUserIsAbleToConductASearchUsingTheFollowingPriorStatusCompletedStart(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "VAL",
                    "PBMCC166003_06",
                    "Release2015.3.0"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Coder User is able to conduct a search using the following Prior Status: Comple" +
                    "ted, Start", @__tags);
#line 109
this.ScenarioSetup(scenarioInfo);
#line 111
 testRunner.Given("a \"Basic\" Coder setup with no tasks and no synonyms and dictionary \"MedDRA ENG 15" +
                    ".0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 112
 testRunner.And("coding task \"Headache\" for dictionary level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 113
 testRunner.When(string.Format("setting reclassification search value \"{0}\" for \"{1}\"", value, field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 114
 testRunner.And("setting reclassification search value \"True\" for \"IncludeAutocodedItems\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 115
 testRunner.And("performing reclassification search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Study",
                        "Subject",
                        "Verbatim",
                        "Term",
                        "Code",
                        "Priority",
                        "Form"});
            table7.AddRow(new string[] {
                        "<StudyName>",
                        "Subject 1",
                        "HEADACHE",
                        "Headache",
                        "10019211",
                        "1",
                        "Form 1"});
#line 116
 testRunner.Then("the reclassification search should contain", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Coder User is able to conduct a search using the following Prior Status: Waitin" +
            "g Approval, Waiting Manual Code")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("PBMCC166003_07")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.TestCaseAttribute("PriorStatus", "Waiting Approval", null)]
        [NUnit.Framework.TestCaseAttribute("PriorStatus", "Waiting Manual Code", null)]
        public virtual void ACoderUserIsAbleToConductASearchUsingTheFollowingPriorStatusWaitingApprovalWaitingManualCode(string field, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "VAL",
                    "PBMCC166003_07",
                    "Release2015.3.0"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Coder User is able to conduct a search using the following Prior Status: Waitin" +
                    "g Approval, Waiting Manual Code", @__tags);
#line 128
this.ScenarioSetup(scenarioInfo);
#line 130
 testRunner.Given("a \"Waiting Approval\" Coder setup with no tasks and no synonyms and dictionary \"Me" +
                    "dDRA ENG 15.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 131
 testRunner.And("coding task \"Heart Burn\" for dictionary level \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 132
 testRunner.When("task \"Heart Burn\" is coded to term \"Reflux gastritis\" at search level \"Low Level " +
                    "Term\" with code \"10057969\" at level \"LLT\" and a synonym is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 133
 testRunner.And("approving task \"HEART BURN\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 134
 testRunner.And(string.Format("setting reclassification search value \"{0}\" for \"{1}\"", value, field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 135
 testRunner.And("performing reclassification search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Study",
                        "Subject",
                        "Verbatim",
                        "Term",
                        "Code",
                        "Priority",
                        "Form"});
            table8.AddRow(new string[] {
                        "<StudyName>",
                        "Subject 1",
                        "HEART BURN",
                        "Reflux gastritis",
                        "10057969",
                        "1",
                        "Form 1"});
#line 136
 testRunner.Then("the reclassification search should contain", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
