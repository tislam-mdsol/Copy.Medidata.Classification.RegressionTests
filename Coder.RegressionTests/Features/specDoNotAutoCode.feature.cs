// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Coder.RegressionTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("This feature file will verify Do Not Auto Code")]
    [NUnit.Framework.CategoryAttribute("specDoNotAutoCode.feature")]
    [NUnit.Framework.CategoryAttribute("CoderCore")]
    public partial class ThisFeatureFileWillVerifyDoNotAutoCodeFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "specDoNotAutoCode.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "This feature file will verify Do Not Auto Code", "", ProgrammingLanguage.CSharp, new string[] {
                        "specDoNotAutoCode.feature",
                        "CoderCore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that when direct dictionary terms are set to do not auto code that when up" +
            "loading these tasks, auto code isn\'t performed")]
        [NUnit.Framework.CategoryAttribute("VAL")]
        [NUnit.Framework.CategoryAttribute("Release2015.3.0")]
        [NUnit.Framework.CategoryAttribute("PBMCC_189072_001")]
        [NUnit.Framework.Timeout(600000)]
        public virtual void VerifyThatWhenDirectDictionaryTermsAreSetToDoNotAutoCodeThatWhenUploadingTheseTasksAutoCodeIsnTPerformed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that when direct dictionary terms are set to do not auto code that when up" +
                    "loading these tasks, auto code isn\'t performed", new string[] {
                        "VAL",
                        "Release2015.3.0",
                        "PBMCC_189072_001",
                        "IncreaseTimeout"});
#line 9
this.ScenarioSetup(scenarioInfo);
#line 10
 testRunner.Given("a \"Waiting Approval\" Coder setup with no tasks and no synonyms and dictionary \"Me" +
                    "dDRA ENG 15.0\" unregistered", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 11
 testRunner.And("an activated synonym list \"MedDRA ENG 15.0 History_List\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Project",
                        "Dictionary",
                        "Version",
                        "Locale",
                        "SynonymListName",
                        "RegistrationName"});
            table1.AddRow(new string[] {
                        "<StudyName>",
                        "MedDRA",
                        "15.0",
                        "eng",
                        "Primary List",
                        "MedDRA"});
            table1.AddRow(new string[] {
                        "<StudyName>",
                        "MedDRA",
                        "15.0",
                        "eng",
                        "History_List",
                        "MedDRAMedHistory"});
#line 12
 testRunner.When("registering a project with the following options", ((string)(null)), table1, "When ");
#line 16
 testRunner.And("do not auto code \"Back arched backwards\" for dictionary \"MedDRA-15_0-English\" lev" +
                    "el \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.And("do not auto code \"Death sudden\" for dictionary \"MedDRAMedHistory-15_0-English\" le" +
                    "vel \"LLT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim Term",
                        "Dictionary",
                        "Dictionary Level",
                        "Is Approval Required",
                        "Is Auto Approval"});
            table2.AddRow(new string[] {
                        "Back arched backwards",
                        "MedDRA",
                        "LLT",
                        "TRUE",
                        "FALSE"});
            table2.AddRow(new string[] {
                        "Death sudden",
                        "MedDRA",
                        "LLT",
                        "TRUE",
                        "FALSE"});
            table2.AddRow(new string[] {
                        "Back arched backwards",
                        "MedDRAMedHistory",
                        "LLT",
                        "TRUE",
                        "FALSE"});
            table2.AddRow(new string[] {
                        "Death sudden",
                        "MedDRAMedHistory",
                        "LLT",
                        "TRUE",
                        "FALSE"});
#line 18
 testRunner.And("uploading MEV content", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Verbatim",
                        "Dictionary",
                        "Status",
                        "Comment"});
            table3.AddRow(new string[] {
                        "Back arched backwards",
                        "MedDRA - 15.0 - Primary List",
                        "Waiting Manual Code",
                        "Cannot auto code because term is in Do Not Auto Code list"});
            table3.AddRow(new string[] {
                        "Death sudden",
                        "MedDRA - 15.0 - Primary List",
                        "Waiting Approval",
                        "Auto coded by direct dictionary match"});
            table3.AddRow(new string[] {
                        "Back arched backwards",
                        "MedDRA - 15.0 - History_List",
                        "Waiting Approval",
                        "Auto coded by direct dictionary match"});
            table3.AddRow(new string[] {
                        "Death sudden",
                        "MedDRA - 15.0 - History_List",
                        "Waiting Manual Code",
                        "Cannot auto code because term is in Do Not Auto Code list"});
#line 24
    testRunner.Then("the dictionary list term has the following coding history comments", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
